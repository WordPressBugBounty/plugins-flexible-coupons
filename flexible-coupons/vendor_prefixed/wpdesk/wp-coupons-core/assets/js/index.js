/*! For license information please see index.js.LICENSE.txt */
(()=>{var e,t,n={56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var l={},a=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=l[s]||0,f="".concat(s," ").concat(c);l[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=o(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:m,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var l=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<l.length;a++){var i=n(l[a]);t[i].references--}for(var u=r(e,o),s=0;s<l.length;s++){var c=n(l[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}l=u}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},221:(e,t,n)=>{"use strict";var r=n(540);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(){}var a={d:{f:l,r:function(){throw Error(o(522))},D:l,C:l,L:l,m:l,X:l,S:l,M:l},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=a,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(o(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=a.p;try{if(u.T=null,a.p=2,e)return e()}finally{u.T=t,a.p=n,a.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,a.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&a.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),o="string"==typeof t.integrity?t.integrity:void 0,l="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?a.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:l}):"script"===n&&a.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:l,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);a.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&a.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);a.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);a.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else a.d.m(e)},t.requestFormReset=function(e){a.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.1.0"},244:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(354),o=n.n(r),l=n(314),a=n.n(l)()(o());a.push([e.id,".fc-tooltip-content {\n    z-index: 50;\n    overflow: hidden;\n    border-radius: 0.375rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    padding-top: 0.375rem;\n    padding-bottom: 0.375rem;\n    font-size: 0.875rem;\n    color: #1d2327;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* adjusted for WordPress style */\n}\n","",{version:3,sources:["webpack://./assets-src/js/components/ui/Tooltip.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,gBAAgB;IAChB,uBAAuB;IACvB,yBAAyB,EAAE,0BAA0B;IACrD,yBAAyB;IACzB,qBAAqB;IACrB,sBAAsB;IACtB,qBAAqB;IACrB,wBAAwB;IACxB,mBAAmB;IACnB,cAAc;IACd,wCAAwC,EAAE,iCAAiC;AAC/E",sourcesContent:[".fc-tooltip-content {\n    z-index: 50;\n    overflow: hidden;\n    border-radius: 0.375rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    padding-top: 0.375rem;\n    padding-bottom: 0.375rem;\n    font-size: 0.875rem;\n    color: #1d2327;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* adjusted for WordPress style */\n}\n"],sourceRoot:""}]);const i=a},247:(e,t,n)=>{"use strict";var r=n(982),o=n(540),l=n(961);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function u(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function s(e){if(i(e)!==e)throw Error(a(188))}function c(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=c(e)))return t;e=e.sibling}return null}var f=Object.assign,d=Symbol.for("react.element"),p=Symbol.for("react.transitional.element"),m=Symbol.for("react.portal"),h=Symbol.for("react.fragment"),g=Symbol.for("react.strict_mode"),y=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),v=Symbol.for("react.consumer"),A=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),k=Symbol.for("react.suspense"),x=Symbol.for("react.suspense_list"),S=Symbol.for("react.memo"),C=Symbol.for("react.lazy");Symbol.for("react.scope");var E=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var _=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var P=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=P&&e[P]||e["@@iterator"])?e:null}var B=Symbol.for("react.client.reference");function I(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===B?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case h:return"Fragment";case y:return"Profiler";case g:return"StrictMode";case k:return"Suspense";case x:return"SuspenseList";case E:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case m:return"Portal";case A:return(e.displayName||"Context")+".Provider";case v:return(e._context.displayName||"Context")+".Consumer";case w:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case S:return null!==(t=e.displayName||null)?t:I(e.type)||"Memo";case C:t=e._payload,e=e._init;try{return I(e(t))}catch(e){}}return null}var T=Array.isArray,z=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,O=l.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,L={pending:!1,data:null,method:null,action:null},R=[],D=-1;function F(e){return{current:e}}function j(e){0>D||(e.current=R[D],R[D]=null,D--)}function M(e,t){D++,R[D]=e.current,e.current=t}var W=F(null),U=F(null),H=F(null),$=F(null);function V(e,t){switch(M(H,t),M(U,e),M(W,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?rf(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=of(t=rf(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}j(W),M(W,e)}function q(){j(W),j(U),j(H)}function Q(e){null!==e.memoizedState&&M($,e);var t=W.current,n=of(t,e.type);t!==n&&(M(U,e),M(W,n))}function Y(e){U.current===e&&(j(W),j(U)),$.current===e&&(j($),Yf._currentValue=L)}var X=Object.prototype.hasOwnProperty,K=r.unstable_scheduleCallback,G=r.unstable_cancelCallback,Z=r.unstable_shouldYield,J=r.unstable_requestPaint,ee=r.unstable_now,te=r.unstable_getCurrentPriorityLevel,ne=r.unstable_ImmediatePriority,re=r.unstable_UserBlockingPriority,oe=r.unstable_NormalPriority,le=r.unstable_LowPriority,ae=r.unstable_IdlePriority,ie=r.log,ue=r.unstable_setDisableYieldValue,se=null,ce=null;function fe(e){if("function"==typeof ie&&ue(e),ce&&"function"==typeof ce.setStrictMode)try{ce.setStrictMode(se,e)}catch(e){}}var de=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(pe(e)/me|0)|0},pe=Math.log,me=Math.LN2,he=256,ge=4194304;function ye(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var o=0,l=e.suspendedLanes,a=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!=(r=i&~l)?o=ye(r):0!=(a&=i)?o=ye(a):n||0!=(n=i&~e)&&(o=ye(n)):0!=(i=r&~l)?o=ye(i):0!==a?o=ye(a):n||0!=(n=r&~e)&&(o=ye(n)),0===o?0:0===t||t===o||t&l||!((l=o&-o)>=(n=t&-t)||32===l&&4194048&n)?o:t}function ve(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Ae(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function we(){var e=he;return!(4194048&(he<<=1))&&(he=256),e}function ke(){var e=ge;return!(62914560&(ge<<=1))&&(ge=4194304),e}function xe(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Se(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Ce(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-de(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Ee(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-de(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function _e(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Pe(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ne(){var e=O.p;return 0!==e?e:void 0===(e=window.event)?32:id(e.type)}var Be=Math.random().toString(36).slice(2),Ie="__reactFiber$"+Be,Te="__reactProps$"+Be,ze="__reactContainer$"+Be,Oe="__reactEvents$"+Be,Le="__reactListeners$"+Be,Re="__reactHandles$"+Be,De="__reactResources$"+Be,Fe="__reactMarker$"+Be;function je(e){delete e[Ie],delete e[Te],delete e[Oe],delete e[Le],delete e[Re]}function Me(e){var t=e[Ie];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ze]||n[Ie]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=vf(e);null!==e;){if(n=e[Ie])return n;e=vf(e)}return t}n=(e=n).parentNode}return null}function We(e){if(e=e[Ie]||e[ze]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ue(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(a(33))}function He(e){var t=e[De];return t||(t=e[De]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function $e(e){e[Fe]=!0}var Ve=new Set,qe={};function Qe(e,t){Ye(e,t),Ye(e+"Capture",t)}function Ye(e,t){for(qe[e]=t,e=0;e<t.length;e++)Ve.add(t[e])}var Xe,Ke,Ge=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},Je={};function et(e,t,n){if(o=t,X.call(Je,o)||!X.call(Ze,o)&&(Ge.test(o)?Je[o]=!0:(Ze[o]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var o}function tt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function nt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function rt(e){if(void 0===Xe)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Xe=t&&t[1]||"",Ke=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Xe+e+Ke}var ot=!1;function lt(e,t){if(!e||ot)return"";ot=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var l=r.DetermineComponentFrameRoot(),a=l[0],i=l[1];if(a&&i){var u=a.split("\n"),s=i.split("\n");for(o=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;o<s.length&&!s[o].includes("DetermineComponentFrameRoot");)o++;if(r===u.length||o===s.length)for(r=u.length-1,o=s.length-1;1<=r&&0<=o&&u[r]!==s[o];)o--;for(;1<=r&&0<=o;r--,o--)if(u[r]!==s[o]){if(1!==r||1!==o)do{if(r--,0>--o||u[r]!==s[o]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=o);break}}}finally{ot=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?rt(n):""}function at(e){switch(e.tag){case 26:case 27:case 5:return rt(e.type);case 16:return rt("Lazy");case 13:return rt("Suspense");case 19:return rt("SuspenseList");case 0:case 15:return lt(e.type,!1);case 11:return lt(e.type.render,!1);case 1:return lt(e.type,!0);case 31:return rt("Activity");default:return""}}function it(e){try{var t="";do{t+=at(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function st(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ct(e){e._valueTracker||(e._valueTracker=function(e){var t=st(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=st(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function dt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function mt(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function ht(e,t,n,r,o,l,a,i){e.name="",null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a?e.type=a:e.removeAttribute("type"),null!=t?"number"===a?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==a&&"reset"!==a||e.removeAttribute("value"),null!=t?yt(e,a,ut(t)):null!=n?yt(e,a,ut(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=l&&(e.defaultChecked=!!l),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+ut(i):e.removeAttribute("name")}function gt(e,t,n,r,o,l,a,i){if(null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.type=l),null!=t||null!=n){if(("submit"===l||"reset"===l)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.name=a)}function yt(e,t,n){"number"===t&&dt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function vt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function At(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(a(92));if(T(r)){if(1<r.length)throw Error(a(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var kt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function xt(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||kt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function St(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(a(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in t)r=t[o],t.hasOwnProperty(o)&&n[o]!==r&&xt(e,o,r)}else for(var l in t)t.hasOwnProperty(l)&&xt(e,l,t[l])}function Ct(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Et=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),_t=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return _t.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Nt=null;function Bt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var It=null,Tt=null;function zt(e){var t=We(e);if(t&&(e=t.stateNode)){var n=e[Te]||null;e:switch(e=t.stateNode,t.type){case"input":if(ht(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[Te]||null;if(!o)throw Error(a(90));ht(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":vt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Ot=!1;function Lt(e,t,n){if(Ot)return e(t,n);Ot=!0;try{return e(t)}finally{if(Ot=!1,(null!==It||null!==Tt)&&(Ms(),It&&(t=It,e=Tt,Tt=It=null,zt(t),e)))for(t=0;t<e.length;t++)zt(e[t])}}function Rt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Te]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Dt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Ft=!1;if(Dt)try{var jt={};Object.defineProperty(jt,"passive",{get:function(){Ft=!0}}),window.addEventListener("test",jt,jt),window.removeEventListener("test",jt,jt)}catch(e){Ft=!1}var Mt=null,Wt=null,Ut=null;function Ht(){if(Ut)return Ut;var e,t,n=Wt,r=n.length,o="value"in Mt?Mt.value:Mt.textContent,l=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[l-t];t++);return Ut=o.slice(e,1<t?1-t:void 0)}function $t(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Vt(){return!0}function qt(){return!1}function Qt(e){function t(t,n,r,o,l){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Vt:qt,this.isPropagationStopped=qt,this}return f(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vt)},persist:function(){},isPersistent:Vt}),t}var Yt,Xt,Kt,Gt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Qt(Gt),Jt=f({},Gt,{view:0,detail:0}),en=Qt(Jt),tn=f({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Kt&&(Kt&&"mousemove"===e.type?(Yt=e.screenX-Kt.screenX,Xt=e.screenY-Kt.screenY):Xt=Yt=0,Kt=e),Yt)},movementY:function(e){return"movementY"in e?e.movementY:Xt}}),nn=Qt(tn),rn=Qt(f({},tn,{dataTransfer:0})),on=Qt(f({},Jt,{relatedTarget:0})),ln=Qt(f({},Gt,{animationName:0,elapsedTime:0,pseudoElement:0})),an=Qt(f({},Gt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=Qt(f({},Gt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=fn[e])&&!!t[e]}function pn(){return dn}var mn=Qt(f({},Jt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=$t(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pn,charCode:function(e){return"keypress"===e.type?$t(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?$t(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),hn=Qt(f({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=Qt(f({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pn})),yn=Qt(f({},Gt,{propertyName:0,elapsedTime:0,pseudoElement:0})),bn=Qt(f({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),vn=Qt(f({},Gt,{newState:0,oldState:0})),An=[9,13,27,32],wn=Dt&&"CompositionEvent"in window,kn=null;Dt&&"documentMode"in document&&(kn=document.documentMode);var xn=Dt&&"TextEvent"in window&&!kn,Sn=Dt&&(!wn||kn&&8<kn&&11>=kn),Cn=String.fromCharCode(32),En=!1;function _n(e,t){switch(e){case"keyup":return-1!==An.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Nn=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function In(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Tn(e,t,n,r){It?Tt?Tt.push(r):Tt=[r]:It=r,0<(t=Hc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var zn=null,On=null;function Ln(e){Lc(e,0)}function Rn(e){if(ft(Ue(e)))return e}function Dn(e,t){if("change"===e)return t}var Fn=!1;if(Dt){var jn;if(Dt){var Mn="oninput"in document;if(!Mn){var Wn=document.createElement("div");Wn.setAttribute("oninput","return;"),Mn="function"==typeof Wn.oninput}jn=Mn}else jn=!1;Fn=jn&&(!document.documentMode||9<document.documentMode)}function Un(){zn&&(zn.detachEvent("onpropertychange",Hn),On=zn=null)}function Hn(e){if("value"===e.propertyName&&Rn(On)){var t=[];Tn(t,On,e,Bt(e)),Lt(Ln,t)}}function $n(e,t,n){"focusin"===e?(Un(),On=n,(zn=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Un()}function Vn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rn(On)}function qn(e,t){if("click"===e)return Rn(t)}function Qn(e,t){if("input"===e||"change"===e)return Rn(t)}var Yn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Xn(e,t){if(Yn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!X.call(t,o)||!Yn(e[o],t[o]))return!1}return!0}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=dt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dt((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var tr=Dt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,or=null,lr=!1;function ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;lr||null==nr||nr!==dt(r)||(r="selectionStart"in(r=nr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},or&&Xn(or,r)||(or=r,0<(r=Hc(rr,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function ir(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:ir("Animation","AnimationEnd"),animationiteration:ir("Animation","AnimationIteration"),animationstart:ir("Animation","AnimationStart"),transitionrun:ir("Transition","TransitionRun"),transitionstart:ir("Transition","TransitionStart"),transitioncancel:ir("Transition","TransitionCancel"),transitionend:ir("Transition","TransitionEnd")},sr={},cr={};function fr(e){if(sr[e])return sr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in cr)return sr[e]=n[t];return e}Dt&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var dr=fr("animationend"),pr=fr("animationiteration"),mr=fr("animationstart"),hr=fr("transitionrun"),gr=fr("transitionstart"),yr=fr("transitioncancel"),br=fr("transitionend"),vr=new Map,Ar="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){vr.set(e,t),Qe(t,[e])}Ar.push("scrollEnd");var kr=new WeakMap;function xr(e,t){if("object"==typeof e&&null!==e){var n=kr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:it(t)},kr.set(e,t),t)}return{value:e,source:t,stack:it(t)}}var Sr=[],Cr=0,Er=0;function _r(){for(var e=Cr,t=Er=Cr=0;t<e;){var n=Sr[t];Sr[t++]=null;var r=Sr[t];Sr[t++]=null;var o=Sr[t];Sr[t++]=null;var l=Sr[t];if(Sr[t++]=null,null!==r&&null!==o){var a=r.pending;null===a?o.next=o:(o.next=a.next,a.next=o),r.pending=o}0!==l&&Ir(n,o,l)}}function Pr(e,t,n,r){Sr[Cr++]=e,Sr[Cr++]=t,Sr[Cr++]=n,Sr[Cr++]=r,Er|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Nr(e,t,n,r){return Pr(e,t,n,r),Tr(e)}function Br(e,t){return Pr(e,null,null,t),Tr(e)}function Ir(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,l=e.return;null!==l;)l.childLanes|=n,null!==(r=l.alternate)&&(r.childLanes|=n),22===l.tag&&(null===(e=l.stateNode)||1&e._visibility||(o=!0)),e=l,l=l.return;return 3===e.tag?(l=e.stateNode,o&&null!==t&&(o=31-de(n),null===(r=(e=l.hiddenUpdates)[o])?e[o]=[t]:r.push(t),t.lane=536870912|n),l):null}function Tr(e){if(50<Is)throw Is=0,Ts=null,Error(a(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var zr={};function Or(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Lr(e,t,n,r){return new Or(e,t,n,r)}function Rr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Dr(e,t){var n=e.alternate;return null===n?((n=Lr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Fr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function jr(e,t,n,r,o,l){var i=0;if(r=e,"function"==typeof e)Rr(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,W.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case E:return(e=Lr(31,n,t,o)).elementType=E,e.lanes=l,e;case h:return Mr(n.children,o,l,t);case g:i=8,o|=24;break;case y:return(e=Lr(12,n,t,2|o)).elementType=y,e.lanes=l,e;case k:return(e=Lr(13,n,t,o)).elementType=k,e.lanes=l,e;case x:return(e=Lr(19,n,t,o)).elementType=x,e.lanes=l,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case A:i=10;break e;case v:i=9;break e;case w:i=11;break e;case S:i=14;break e;case C:i=16,r=null;break e}i=29,n=Error(a(130,null===e?"null":typeof e,"")),r=null}return(t=Lr(i,n,t,o)).elementType=e,t.type=r,t.lanes=l,t}function Mr(e,t,n,r){return(e=Lr(7,e,r,t)).lanes=n,e}function Wr(e,t,n){return(e=Lr(6,e,null,t)).lanes=n,e}function Ur(e,t,n){return(t=Lr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Hr=[],$r=0,Vr=null,qr=0,Qr=[],Yr=0,Xr=null,Kr=1,Gr="";function Zr(e,t){Hr[$r++]=qr,Hr[$r++]=Vr,Vr=e,qr=t}function Jr(e,t,n){Qr[Yr++]=Kr,Qr[Yr++]=Gr,Qr[Yr++]=Xr,Xr=e;var r=Kr;e=Gr;var o=32-de(r)-1;r&=~(1<<o),n+=1;var l=32-de(t)+o;if(30<l){var a=o-o%5;l=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Kr=1<<32-de(t)+o|n<<o|r,Gr=l+e}else Kr=1<<l|n<<o|r,Gr=e}function eo(e){null!==e.return&&(Zr(e,1),Jr(e,1,0))}function to(e){for(;e===Vr;)Vr=Hr[--$r],Hr[$r]=null,qr=Hr[--$r],Hr[$r]=null;for(;e===Xr;)Xr=Qr[--Yr],Qr[Yr]=null,Gr=Qr[--Yr],Qr[Yr]=null,Kr=Qr[--Yr],Qr[Yr]=null}var no=null,ro=null,oo=!1,lo=null,ao=!1,io=Error(a(519));function uo(e){throw ho(xr(Error(a(418,"")),e)),io}function so(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Ie]=e,t[Te]=r,n){case"dialog":Rc("cancel",t),Rc("close",t);break;case"iframe":case"object":case"embed":Rc("load",t);break;case"video":case"audio":for(n=0;n<zc.length;n++)Rc(zc[n],t);break;case"source":Rc("error",t);break;case"img":case"image":case"link":Rc("error",t),Rc("load",t);break;case"details":Rc("toggle",t);break;case"input":Rc("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ct(t);break;case"select":Rc("invalid",t);break;case"textarea":Rc("invalid",t),At(t,r.value,r.defaultValue,r.children),ct(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Xc(t.textContent,n)?(null!=r.popover&&(Rc("beforetoggle",t),Rc("toggle",t)),null!=r.onScroll&&Rc("scroll",t),null!=r.onScrollEnd&&Rc("scrollend",t),null!=r.onClick&&(t.onclick=Kc),t=!0):t=!1,t||uo(e)}function co(e){for(no=e.return;no;)switch(no.tag){case 5:case 13:return void(ao=!1);case 27:case 3:return void(ao=!0);default:no=no.return}}function fo(e){if(e!==no)return!1;if(!oo)return co(e),oo=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||lf(e.type,e.memoizedProps)),t=!t),t&&ro&&uo(e),co(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){ro=yf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}ro=null}}else 27===n?(n=ro,pf(e.type)?(e=bf,bf=null,ro=e):ro=n):ro=no?yf(e.stateNode.nextSibling):null;return!0}function po(){ro=no=null,oo=!1}function mo(){var e=lo;return null!==e&&(null===bs?bs=e:bs.push.apply(bs,e),lo=null),e}function ho(e){null===lo?lo=[e]:lo.push(e)}var go=F(null),yo=null,bo=null;function vo(e,t,n){M(go,t._currentValue),t._currentValue=n}function Ao(e){e._currentValue=go.current,j(go)}function wo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ko(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var l=o.dependencies;if(null!==l){var i=o.child;l=l.firstContext;e:for(;null!==l;){var u=l;l=o;for(var s=0;s<t.length;s++)if(u.context===t[s]){l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),wo(l.return,n,e),r||(i=null);break e}l=u.next}}else if(18===o.tag){if(null===(i=o.return))throw Error(a(341));i.lanes|=n,null!==(l=i.alternate)&&(l.lanes|=n),wo(i,n,e),i=null}else i=o.child;if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function xo(e,t,n,r){e=null;for(var o=t,l=!1;null!==o;){if(!l)if(524288&o.flags)l=!0;else if(262144&o.flags)break;if(10===o.tag){var i=o.alternate;if(null===i)throw Error(a(387));if(null!==(i=i.memoizedProps)){var u=o.type;Yn(o.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(o===$.current){if(null===(i=o.alternate))throw Error(a(387));i.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Yf):e=[Yf])}o=o.return}null!==e&&ko(t,e,n,r),t.flags|=262144}function So(e){for(e=e.firstContext;null!==e;){if(!Yn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Co(e){yo=e,bo=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Eo(e){return Po(yo,e)}function _o(e,t){return null===yo&&Co(e),Po(e,t)}function Po(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===bo){if(null===e)throw Error(a(308));bo=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else bo=bo.next=t;return n}var No="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Bo=r.unstable_scheduleCallback,Io=r.unstable_NormalPriority,To={$$typeof:A,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function zo(){return{controller:new No,data:new Map,refCount:0}}function Oo(e){e.refCount--,0===e.refCount&&Bo(Io,(function(){e.controller.abort()}))}var Lo=null,Ro=0,Do=0,Fo=null;function jo(){if(0==--Ro&&null!==Lo){null!==Fo&&(Fo.status="fulfilled");var e=Lo;Lo=null,Do=0,Fo=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Mo=z.S;z.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Lo){var n=Lo=[];Ro=0,Do=Pc(),Fo={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ro++,t.then(jo,jo)}(0,t),null!==Mo&&Mo(e,t)};var Wo=F(null);function Uo(){var e=Wo.current;return null!==e?e:ns.pooledCache}function Ho(e,t){M(Wo,null===t?Wo.current:t.pool)}function $o(){var e=Uo();return null===e?null:{parent:To._currentValue,pool:e}}var Vo=Error(a(460)),qo=Error(a(474)),Qo=Error(a(542)),Yo={then:function(){}};function Xo(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Ko(){}function Go(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Ko,Ko),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw el(e=t.reason),e;default:if("string"==typeof t.status)t.then(Ko,Ko);else{if(null!==(e=ns)&&100<e.shellSuspendCounter)throw Error(a(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw el(e=t.reason),e}throw Zo=t,Vo}}var Zo=null;function Jo(){if(null===Zo)throw Error(a(459));var e=Zo;return Zo=null,e}function el(e){if(e===Vo||e===Qo)throw Error(a(483))}var tl=!1;function nl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function rl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ol(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function ll(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&ts){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=Tr(e),Ir(e,null,n),t}return Pr(e,r,t,n),Tr(e)}function al(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Ee(e,n)}}function il(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var a={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===l?o=l=a:l=l.next=a,n=n.next}while(null!==n);null===l?o=l=t:l=l.next=t}else o=l=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:l,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var ul=!1;function sl(){if(ul&&null!==Fo)throw Fo}function cl(e,t,n,r){ul=!1;var o=e.updateQueue;tl=!1;var l=o.firstBaseUpdate,a=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var u=i,s=u.next;u.next=null,null===a?l=s:a.next=s,a=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==l){var d=o.baseState;for(a=0,c=s=u=null,i=l;;){var p=-536870913&i.lane,m=p!==i.lane;if(m?(os&p)===p:(r&p)===p){0!==p&&p===Do&&(ul=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,g=i;p=t;var y=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(y,d,p);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(y,d,p):h))break e;d=f({},d,p);break e;case 2:tl=!0}}null!==(p=i.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=o.callbacks)?o.callbacks=[p]:m.push(p))}else m={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=m,u=d):c=c.next=m,a|=p;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(m=i).next,m.next=null,o.lastBaseUpdate=m,o.shared.pending=null}}null===c&&(u=d),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null===l&&(o.shared.lanes=0),ds|=a,e.lanes=a,e.memoizedState=d}}function fl(e,t){if("function"!=typeof e)throw Error(a(191,e));e.call(t)}function dl(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fl(n[e],t)}var pl=F(null),ml=F(0);function hl(e,t){M(ml,e=cs),M(pl,t),cs=e|t.baseLanes}function gl(){M(ml,cs),M(pl,pl.current)}function yl(){cs=ml.current,j(pl),j(ml)}var bl=0,vl=null,Al=null,wl=null,kl=!1,xl=!1,Sl=!1,Cl=0,El=0,_l=null,Pl=0;function Nl(){throw Error(a(321))}function Bl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yn(e[n],t[n]))return!1;return!0}function Il(e,t,n,r,o,l){return bl=l,vl=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,z.H=null===e||null===e.memoizedState?Va:qa,Sl=!1,l=n(r,o),Sl=!1,xl&&(l=zl(t,n,r,o)),Tl(e),l}function Tl(e){z.H=$a;var t=null!==Al&&null!==Al.next;if(bl=0,wl=Al=vl=null,kl=!1,El=0,_l=null,t)throw Error(a(300));null===e||Ei||null!==(e=e.dependencies)&&So(e)&&(Ei=!0)}function zl(e,t,n,r){vl=e;var o=0;do{if(xl&&(_l=null),El=0,xl=!1,25<=o)throw Error(a(301));if(o+=1,wl=Al=null,null!=e.updateQueue){var l=e.updateQueue;l.lastEffect=null,l.events=null,l.stores=null,null!=l.memoCache&&(l.memoCache.index=0)}z.H=Qa,l=t(n,r)}while(xl);return l}function Ol(){var e=z.H,t=e.useState()[0];return t="function"==typeof t.then?Ml(t):t,e=e.useState()[0],(null!==Al?Al.memoizedState:null)!==e&&(vl.flags|=1024),t}function Ll(){var e=0!==Cl;return Cl=0,e}function Rl(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Dl(e){if(kl){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}kl=!1}bl=0,wl=Al=vl=null,xl=!1,El=Cl=0,_l=null}function Fl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wl?vl.memoizedState=wl=e:wl=wl.next=e,wl}function jl(){if(null===Al){var e=vl.alternate;e=null!==e?e.memoizedState:null}else e=Al.next;var t=null===wl?vl.memoizedState:wl.next;if(null!==t)wl=t,Al=e;else{if(null===e){if(null===vl.alternate)throw Error(a(467));throw Error(a(310))}e={memoizedState:(Al=e).memoizedState,baseState:Al.baseState,baseQueue:Al.baseQueue,queue:Al.queue,next:null},null===wl?vl.memoizedState=wl=e:wl=wl.next=e}return wl}function Ml(e){var t=El;return El+=1,null===_l&&(_l=[]),e=Go(_l,e,t),t=vl,null===(null===wl?t.memoizedState:wl.next)&&(t=t.alternate,z.H=null===t||null===t.memoizedState?Va:qa),e}function Wl(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Ml(e);if(e.$$typeof===A)return Eo(e)}throw Error(a(438,String(e)))}function Ul(e){var t=null,n=vl.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=vl.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},vl.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=_;return t.index++,n}function Hl(e,t){return"function"==typeof t?t(e):t}function $l(e){return Vl(jl(),Al,e)}function Vl(e,t,n){var r=e.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=n;var o=e.baseQueue,l=r.pending;if(null!==l){if(null!==o){var i=o.next;o.next=l.next,l.next=i}t.baseQueue=o=l,r.pending=null}if(l=e.baseState,null===o)e.memoizedState=l;else{var u=i=null,s=null,c=t=o.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(os&d)===d:(bl&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Do&&(f=!0);else{if((bl&p)===p){c=c.next,p===Do&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=l):s=s.next=d,vl.lanes|=p,ds|=p}d=c.action,Sl&&n(l,d),l=c.hasEagerState?c.eagerState:n(l,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=l):s=s.next=p,vl.lanes|=d,ds|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=l:s.next=u,!Yn(l,e.memoizedState)&&(Ei=!0,f&&null!==(n=Fo)))throw n;e.memoizedState=l,e.baseState=i,e.baseQueue=s,r.lastRenderedState=l}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function ql(e){var t=jl(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,l=t.memoizedState;if(null!==o){n.pending=null;var i=o=o.next;do{l=e(l,i.action),i=i.next}while(i!==o);Yn(l,t.memoizedState)||(Ei=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Ql(e,t,n){var r=vl,o=jl(),l=oo;if(l){if(void 0===n)throw Error(a(407));n=n()}else n=t();var i=!Yn((Al||o).memoizedState,n);if(i&&(o.memoizedState=n,Ei=!0),o=o.queue,ga(2048,8,Kl.bind(null,r,o,e),[e]),o.getSnapshot!==t||i||null!==wl&&1&wl.memoizedState.tag){if(r.flags|=2048,pa(9,{destroy:void 0,resource:void 0},Xl.bind(null,r,o,n,t),null),null===ns)throw Error(a(349));l||124&bl||Yl(r,t,n)}return n}function Yl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=vl.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},vl.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Xl(e,t,n,r){t.value=n,t.getSnapshot=r,Gl(t)&&Zl(e)}function Kl(e,t,n){return n((function(){Gl(t)&&Zl(e)}))}function Gl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Yn(e,n)}catch(e){return!0}}function Zl(e){var t=Br(e,2);null!==t&&Ls(t,0,2)}function Jl(e){var t=Fl();if("function"==typeof e){var n=e;if(e=n(),Sl){fe(!0);try{n()}finally{fe(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Hl,lastRenderedState:e},t}function ea(e,t,n,r){return e.baseState=n,Vl(e,Al,"function"==typeof r?r:Hl)}function ta(e,t,n,r,o){if(Wa(e))throw Error(a(485));if(null!==(e=t.action)){var l={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){l.listeners.push(e)}};null!==z.T?n(!0):l.isTransition=!1,r(l),null===(n=t.pending)?(l.next=t.pending=l,na(t,l)):(l.next=n.next,t.pending=n.next=l)}}function na(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var l=z.T,a={};z.T=a;try{var i=n(o,r),u=z.S;null!==u&&u(a,i),ra(e,t,i)}catch(n){la(e,t,n)}finally{z.T=l}}else try{ra(e,t,l=n(o,r))}catch(n){la(e,t,n)}}function ra(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){oa(e,t,n)}),(function(n){return la(e,t,n)})):oa(e,t,n)}function oa(e,t,n){t.status="fulfilled",t.value=n,aa(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,na(e,n)))}function la(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,aa(t),t=t.next}while(t!==r)}e.action=null}function aa(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function ia(e,t){return t}function ua(e,t){if(oo){var n=ns.formState;if(null!==n){e:{var r=vl;if(oo){if(ro){t:{for(var o=ro,l=ao;8!==o.nodeType;){if(!l){o=null;break t}if(null===(o=yf(o.nextSibling))){o=null;break t}}o="F!"===(l=o.data)||"F"===l?o:null}if(o){ro=yf(o.nextSibling),r="F!"===o.data;break e}}uo(r)}r=!1}r&&(t=n[0])}}return(n=Fl()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ia,lastRenderedState:t},n.queue=r,n=Fa.bind(null,vl,r),r.dispatch=n,r=Jl(!1),l=Ma.bind(null,vl,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=Fl()).queue=o,n=ta.bind(null,vl,o,l,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function sa(e){return ca(jl(),Al,e)}function ca(e,t,n){if(t=Vl(e,t,ia)[0],e=$l(Hl)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Ml(t)}catch(e){if(e===Vo)throw Qo;throw e}else r=t;var o=(t=jl()).queue,l=o.dispatch;return n!==t.memoizedState&&(vl.flags|=2048,pa(9,{destroy:void 0,resource:void 0},fa.bind(null,o,n),null)),[r,l,e]}function fa(e,t){e.action=t}function da(e){var t=jl(),n=Al;if(null!==n)return ca(t,n,e);jl(),t=t.memoizedState;var r=(n=jl()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function pa(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=vl.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},vl.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ma(){return jl().memoizedState}function ha(e,t,n,r){var o=Fl();r=void 0===r?null:r,vl.flags|=e,o.memoizedState=pa(1|t,{destroy:void 0,resource:void 0},n,r)}function ga(e,t,n,r){var o=jl();r=void 0===r?null:r;var l=o.memoizedState.inst;null!==Al&&null!==r&&Bl(r,Al.memoizedState.deps)?o.memoizedState=pa(t,l,n,r):(vl.flags|=e,o.memoizedState=pa(1|t,l,n,r))}function ya(e,t){ha(8390656,8,e,t)}function ba(e,t){ga(2048,8,e,t)}function va(e,t){return ga(4,2,e,t)}function Aa(e,t){return ga(4,4,e,t)}function wa(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function ka(e,t,n){n=null!=n?n.concat([e]):null,ga(4,4,wa.bind(null,t,e),n)}function xa(){}function Sa(e,t){var n=jl();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Bl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=jl();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Bl(t,r[1]))return r[0];if(r=e(),Sl){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r}function Ea(e,t,n){return void 0===n||1073741824&bl?e.memoizedState=t:(e.memoizedState=n,e=Os(),vl.lanes|=e,ds|=e,n)}function _a(e,t,n,r){return Yn(n,t)?n:null!==pl.current?(e=Ea(e,n,r),Yn(e,t)||(Ei=!0),e):42&bl?(e=Os(),vl.lanes|=e,ds|=e,t):(Ei=!0,e.memoizedState=n)}function Pa(e,t,n,r,o){var l=O.p;O.p=0!==l&&8>l?l:8;var a,i,u,s=z.T,c={};z.T=c,Ma(e,!1,t,n);try{var f=o(),d=z.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?ja(e,t,(a=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=a;for(var e=0;e<i.length;e++)(0,i[e])(a)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),zs()):ja(e,t,r,zs())}catch(n){ja(e,t,{then:function(){},status:"rejected",reason:n},zs())}finally{O.p=l,z.T=s}}function Na(){}function Ba(e,t,n,r){if(5!==e.tag)throw Error(a(476));var o=Ia(e).queue;Pa(e,o,t,L,null===n?Na:function(){return Ta(e),n(r)})}function Ia(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:L,baseState:L,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Hl,lastRenderedState:L},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Hl,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Ta(e){ja(e,Ia(e).next.queue,{},zs())}function za(){return Eo(Yf)}function Oa(){return jl().memoizedState}function La(){return jl().memoizedState}function Ra(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=zs(),r=ll(t,e=ol(n),n);return null!==r&&(Ls(r,0,n),al(r,t,n)),t={cache:zo()},void(e.payload=t)}t=t.return}}function Da(e,t,n){var r=zs();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Wa(e)?Ua(t,n):null!==(n=Nr(e,t,n,r))&&(Ls(n,0,r),Ha(n,t,r))}function Fa(e,t,n){ja(e,t,n,zs())}function ja(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Wa(e))Ua(t,o);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var a=t.lastRenderedState,i=l(a,n);if(o.hasEagerState=!0,o.eagerState=i,Yn(i,a))return Pr(e,t,o,0),null===ns&&_r(),!1}catch(e){}if(null!==(n=Nr(e,t,o,r)))return Ls(n,0,r),Ha(n,t,r),!0}return!1}function Ma(e,t,n,r){if(r={lane:2,revertLane:Pc(),action:r,hasEagerState:!1,eagerState:null,next:null},Wa(e)){if(t)throw Error(a(479))}else null!==(t=Nr(e,n,r,2))&&Ls(t,0,2)}function Wa(e){var t=e.alternate;return e===vl||null!==t&&t===vl}function Ua(e,t){xl=kl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ha(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Ee(e,n)}}var $a={readContext:Eo,use:Wl,useCallback:Nl,useContext:Nl,useEffect:Nl,useImperativeHandle:Nl,useLayoutEffect:Nl,useInsertionEffect:Nl,useMemo:Nl,useReducer:Nl,useRef:Nl,useState:Nl,useDebugValue:Nl,useDeferredValue:Nl,useTransition:Nl,useSyncExternalStore:Nl,useId:Nl,useHostTransitionStatus:Nl,useFormState:Nl,useActionState:Nl,useOptimistic:Nl,useMemoCache:Nl,useCacheRefresh:Nl},Va={readContext:Eo,use:Wl,useCallback:function(e,t){return Fl().memoizedState=[e,void 0===t?null:t],e},useContext:Eo,useEffect:ya,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,ha(4194308,4,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ha(4194308,4,e,t)},useInsertionEffect:function(e,t){ha(4,2,e,t)},useMemo:function(e,t){var n=Fl();t=void 0===t?null:t;var r=e();if(Sl){fe(!0);try{e()}finally{fe(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Fl();if(void 0!==n){var o=n(t);if(Sl){fe(!0);try{n(t)}finally{fe(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=Da.bind(null,vl,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Fl().memoizedState=e},useState:function(e){var t=(e=Jl(e)).queue,n=Fa.bind(null,vl,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:xa,useDeferredValue:function(e,t){return Ea(Fl(),e,t)},useTransition:function(){var e=Jl(!1);return e=Pa.bind(null,vl,e.queue,!0,!1),Fl().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=vl,o=Fl();if(oo){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===ns)throw Error(a(349));124&os||Yl(r,t,n)}o.memoizedState=n;var l={value:n,getSnapshot:t};return o.queue=l,ya(Kl.bind(null,r,l,e),[e]),r.flags|=2048,pa(9,{destroy:void 0,resource:void 0},Xl.bind(null,r,l,n,t),null),n},useId:function(){var e=Fl(),t=ns.identifierPrefix;if(oo){var n=Gr;t="«"+t+"R"+(n=(Kr&~(1<<32-de(Kr)-1)).toString(32)+n),0<(n=Cl++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=Pl++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:za,useFormState:ua,useActionState:ua,useOptimistic:function(e){var t=Fl();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Ma.bind(null,vl,!0,n),n.dispatch=t,[e,t]},useMemoCache:Ul,useCacheRefresh:function(){return Fl().memoizedState=Ra.bind(null,vl)}},qa={readContext:Eo,use:Wl,useCallback:Sa,useContext:Eo,useEffect:ba,useImperativeHandle:ka,useInsertionEffect:va,useLayoutEffect:Aa,useMemo:Ca,useReducer:$l,useRef:ma,useState:function(){return $l(Hl)},useDebugValue:xa,useDeferredValue:function(e,t){return _a(jl(),Al.memoizedState,e,t)},useTransition:function(){var e=$l(Hl)[0],t=jl().memoizedState;return["boolean"==typeof e?e:Ml(e),t]},useSyncExternalStore:Ql,useId:Oa,useHostTransitionStatus:za,useFormState:sa,useActionState:sa,useOptimistic:function(e,t){return ea(jl(),0,e,t)},useMemoCache:Ul,useCacheRefresh:La},Qa={readContext:Eo,use:Wl,useCallback:Sa,useContext:Eo,useEffect:ba,useImperativeHandle:ka,useInsertionEffect:va,useLayoutEffect:Aa,useMemo:Ca,useReducer:ql,useRef:ma,useState:function(){return ql(Hl)},useDebugValue:xa,useDeferredValue:function(e,t){var n=jl();return null===Al?Ea(n,e,t):_a(n,Al.memoizedState,e,t)},useTransition:function(){var e=ql(Hl)[0],t=jl().memoizedState;return["boolean"==typeof e?e:Ml(e),t]},useSyncExternalStore:Ql,useId:Oa,useHostTransitionStatus:za,useFormState:da,useActionState:da,useOptimistic:function(e,t){var n=jl();return null!==Al?ea(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Ul,useCacheRefresh:La},Ya=null,Xa=0;function Ka(e){var t=Xa;return Xa+=1,null===Ya&&(Ya=[]),Go(Ya,e,t)}function Ga(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Za(e,t){if(t.$$typeof===d)throw Error(a(525));throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ja(e){return(0,e._init)(e._payload)}function ei(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=Dr(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Wr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var l=n.type;return l===h?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===C&&Ja(l)===t.type)?(Ga(t=o(t,n.props),n),t.return=e,t):(Ga(t=jr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ur(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,l){return null===t||7!==t.tag?((t=Mr(n,e.mode,r,l)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Wr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case p:return Ga(n=jr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case m:return(t=Ur(t,e.mode,n)).return=e,t;case C:return d(e,t=(0,t._init)(t._payload),n)}if(T(t)||N(t))return(t=Mr(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,Ka(t),n);if(t.$$typeof===A)return d(e,_o(e,t),n);Za(e,t)}return null}function g(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case p:return n.key===o?s(e,t,n,r):null;case m:return n.key===o?c(e,t,n,r):null;case C:return g(e,t,n=(o=n._init)(n._payload),r)}if(T(n)||N(n))return null!==o?null:f(e,t,n,r,null);if("function"==typeof n.then)return g(e,t,Ka(n),r);if(n.$$typeof===A)return g(e,t,_o(e,n),r);Za(e,n)}return null}function y(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case p:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case m:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case C:return y(e,t,n,r=(0,r._init)(r._payload),o)}if(T(r)||N(r))return f(t,e=e.get(n)||null,r,o,null);if("function"==typeof r.then)return y(e,t,n,Ka(r),o);if(r.$$typeof===A)return y(e,t,n,_o(t,r),o);Za(t,r)}return null}function b(u,s,c,f){if("object"==typeof c&&null!==c&&c.type===h&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case p:e:{for(var v=c.key;null!==s;){if(s.key===v){if((v=c.type)===h){if(7===s.tag){n(u,s.sibling),(f=o(s,c.props.children)).return=u,u=f;break e}}else if(s.elementType===v||"object"==typeof v&&null!==v&&v.$$typeof===C&&Ja(v)===s.type){n(u,s.sibling),Ga(f=o(s,c.props),c),f.return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}c.type===h?((f=Mr(c.props.children,u.mode,f,c.key)).return=u,u=f):(Ga(f=jr(c.type,c.key,c.props,null,u.mode,f),c),f.return=u,u=f)}return i(u);case m:e:{for(v=c.key;null!==s;){if(s.key===v){if(4===s.tag&&s.stateNode.containerInfo===c.containerInfo&&s.stateNode.implementation===c.implementation){n(u,s.sibling),(f=o(s,c.children||[])).return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}(f=Ur(c,u.mode,f)).return=u,u=f}return i(u);case C:return b(u,s,c=(v=c._init)(c._payload),f)}if(T(c))return function(o,a,i,u){for(var s=null,c=null,f=a,p=a=0,m=null;null!==f&&p<i.length;p++){f.index>p?(m=f,f=null):m=f.sibling;var h=g(o,f,i[p],u);if(null===h){null===f&&(f=m);break}e&&f&&null===h.alternate&&t(o,f),a=l(h,a,p),null===c?s=h:c.sibling=h,c=h,f=m}if(p===i.length)return n(o,f),oo&&Zr(o,p),s;if(null===f){for(;p<i.length;p++)null!==(f=d(o,i[p],u))&&(a=l(f,a,p),null===c?s=f:c.sibling=f,c=f);return oo&&Zr(o,p),s}for(f=r(f);p<i.length;p++)null!==(m=y(f,o,p,i[p],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?p:m.key),a=l(m,a,p),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(o,e)})),oo&&Zr(o,p),s}(u,s,c,f);if(N(c)){if("function"!=typeof(v=N(c)))throw Error(a(150));return function(o,i,u,s){if(null==u)throw Error(a(151));for(var c=null,f=null,p=i,m=i=0,h=null,b=u.next();null!==p&&!b.done;m++,b=u.next()){p.index>m?(h=p,p=null):h=p.sibling;var v=g(o,p,b.value,s);if(null===v){null===p&&(p=h);break}e&&p&&null===v.alternate&&t(o,p),i=l(v,i,m),null===f?c=v:f.sibling=v,f=v,p=h}if(b.done)return n(o,p),oo&&Zr(o,m),c;if(null===p){for(;!b.done;m++,b=u.next())null!==(b=d(o,b.value,s))&&(i=l(b,i,m),null===f?c=b:f.sibling=b,f=b);return oo&&Zr(o,m),c}for(p=r(p);!b.done;m++,b=u.next())null!==(b=y(p,o,m,b.value,s))&&(e&&null!==b.alternate&&p.delete(null===b.key?m:b.key),i=l(b,i,m),null===f?c=b:f.sibling=b,f=b);return e&&p.forEach((function(e){return t(o,e)})),oo&&Zr(o,m),c}(u,s,c=v.call(c),f)}if("function"==typeof c.then)return b(u,s,Ka(c),f);if(c.$$typeof===A)return b(u,s,_o(u,c),f);Za(u,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==s&&6===s.tag?(n(u,s.sibling),(f=o(s,c)).return=u,u=f):(n(u,s),(f=Wr(c,u.mode,f)).return=u,u=f),i(u)):n(u,s)}return function(e,t,n,r){try{Xa=0;var o=b(e,t,n,r);return Ya=null,o}catch(t){if(t===Vo||t===Qo)throw t;var l=Lr(29,t,null,e.mode);return l.lanes=r,l.return=e,l}}}var ti=ei(!0),ni=ei(!1),ri=F(null),oi=null;function li(e){var t=e.alternate;M(si,1&si.current),M(ri,e),null===oi&&(null===t||null!==pl.current||null!==t.memoizedState)&&(oi=e)}function ai(e){if(22===e.tag){if(M(si,si.current),M(ri,e),null===oi){var t=e.alternate;null!==t&&null!==t.memoizedState&&(oi=e)}}else ii()}function ii(){M(si,si.current),M(ri,ri.current)}function ui(e){j(ri),oi===e&&(oi=null),j(si)}var si=F(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||gf(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function fi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:f({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var di={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=zs(),o=ol(r);o.payload=t,null!=n&&(o.callback=n),null!==(t=ll(e,o,r))&&(Ls(t,0,r),al(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=zs(),o=ol(r);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=ll(e,o,r))&&(Ls(t,0,r),al(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=zs(),r=ol(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=ll(e,r,n))&&(Ls(t,0,n),al(t,e,n))}};function pi(e,t,n,r,o,l,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,a):!(t.prototype&&t.prototype.isPureReactComponent&&Xn(n,r)&&Xn(o,l))}function mi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&di.enqueueReplaceState(t,t.state,null)}function hi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=f({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}var gi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function yi(e){gi(e)}function bi(e){console.error(e)}function vi(e){gi(e)}function Ai(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function wi(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function ki(e,t,n){return(n=ol(n)).tag=3,n.payload={element:null},n.callback=function(){Ai(e,t)},n}function xi(e){return(e=ol(e)).tag=3,e}function Si(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var l=r.value;e.payload=function(){return o(l)},e.callback=function(){wi(t,n,r)}}var a=n.stateNode;null!==a&&"function"==typeof a.componentDidCatch&&(e.callback=function(){wi(t,n,r),"function"!=typeof o&&(null===xs?xs=new Set([this]):xs.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Ci=Error(a(461)),Ei=!1;function _i(e,t,n,r){t.child=null===e?ni(t,null,n,r):ti(t,e.child,n,r)}function Pi(e,t,n,r,o){n=n.render;var l=t.ref;if("ref"in r){var a={};for(var i in r)"ref"!==i&&(a[i]=r[i])}else a=r;return Co(t),r=Il(e,t,n,a,l,o),i=Ll(),null===e||Ei?(oo&&i&&eo(t),t.flags|=1,_i(e,t,r,o),t.child):(Rl(e,t,o),Yi(e,t,o))}function Ni(e,t,n,r,o){if(null===e){var l=n.type;return"function"!=typeof l||Rr(l)||void 0!==l.defaultProps||null!==n.compare?((e=jr(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Bi(e,t,l,r,o))}if(l=e.child,!Xi(e,o)){var a=l.memoizedProps;if((n=null!==(n=n.compare)?n:Xn)(a,r)&&e.ref===t.ref)return Yi(e,t,o)}return t.flags|=1,(e=Dr(l,r)).ref=t.ref,e.return=t,t.child=e}function Bi(e,t,n,r,o){if(null!==e){var l=e.memoizedProps;if(Xn(l,r)&&e.ref===t.ref){if(Ei=!1,t.pendingProps=r=l,!Xi(e,o))return t.lanes=e.lanes,Yi(e,t,o);131072&e.flags&&(Ei=!0)}}return Oi(e,t,n,r,o)}function Ii(e,t,n){var r=t.pendingProps,o=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==l?l.baseLanes|n:n,null!==e){for(o=t.child=e.child,l=0;null!==o;)l=l|o.lanes|o.childLanes,o=o.sibling;t.childLanes=l&~r}else t.childLanes=0,t.child=null;return Ti(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ti(e,t,null!==l?l.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Ho(0,null!==l?l.cachePool:null),null!==l?hl(t,l):gl(),ai(t)}else null!==l?(Ho(0,l.cachePool),hl(t,l),ii(),t.memoizedState=null):(null!==e&&Ho(0,null),gl(),ii());return _i(e,t,o,n),t.child}function Ti(e,t,n,r){var o=Uo();return o=null===o?null:{parent:To._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&Ho(0,null),gl(),ai(t),null!==e&&xo(e,t,r,!0),null}function zi(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(a(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Oi(e,t,n,r,o){return Co(t),n=Il(e,t,n,r,void 0,o),r=Ll(),null===e||Ei?(oo&&r&&eo(t),t.flags|=1,_i(e,t,n,o),t.child):(Rl(e,t,o),Yi(e,t,o))}function Li(e,t,n,r,o,l){return Co(t),t.updateQueue=null,n=zl(t,r,n,o),Tl(e),r=Ll(),null===e||Ei?(oo&&r&&eo(t),t.flags|=1,_i(e,t,n,l),t.child):(Rl(e,t,l),Yi(e,t,l))}function Ri(e,t,n,r,o){if(Co(t),null===t.stateNode){var l=zr,a=n.contextType;"object"==typeof a&&null!==a&&(l=Eo(a)),l=new n(r,l),t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=di,t.stateNode=l,l._reactInternals=t,(l=t.stateNode).props=r,l.state=t.memoizedState,l.refs={},nl(t),a=n.contextType,l.context="object"==typeof a&&null!==a?Eo(a):zr,l.state=t.memoizedState,"function"==typeof(a=n.getDerivedStateFromProps)&&(fi(t,n,a,r),l.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(a=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),a!==l.state&&di.enqueueReplaceState(l,l.state,null),cl(t,r,l,o),sl(),l.state=t.memoizedState),"function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){l=t.stateNode;var i=t.memoizedProps,u=hi(n,i);l.props=u;var s=l.context,c=n.contextType;a=zr,"object"==typeof c&&null!==c&&(a=Eo(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i||s!==a)&&mi(t,l,r,a),tl=!1;var d=t.memoizedState;l.state=d,cl(t,r,l,o),sl(),s=t.memoizedState,i||d!==s||tl?("function"==typeof f&&(fi(t,n,f,r),s=t.memoizedState),(u=tl||pi(t,n,u,r,d,s,a))?(c||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),l.props=r,l.state=s,l.context=a,r=u):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,rl(e,t),c=hi(n,a=t.memoizedProps),l.props=c,f=t.pendingProps,d=l.context,s=n.contextType,u=zr,"object"==typeof s&&null!==s&&(u=Eo(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(a!==f||d!==u)&&mi(t,l,r,u),tl=!1,d=t.memoizedState,l.state=d,cl(t,r,l,o),sl();var p=t.memoizedState;a!==f||d!==p||tl||null!==e&&null!==e.dependencies&&So(e.dependencies)?("function"==typeof i&&(fi(t,n,i,r),p=t.memoizedState),(c=tl||pi(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&So(e.dependencies))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,p,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||a===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||a===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),l.props=r,l.state=p,l.context=u,r=c):("function"!=typeof l.componentDidUpdate||a===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||a===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return l=r,zi(e,t),r=!!(128&t.flags),l||r?(l=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:l.render(),t.flags|=1,null!==e&&r?(t.child=ti(t,e.child,null,o),t.child=ti(t,null,n,o)):_i(e,t,n,o),t.memoizedState=l.state,e=t.child):e=Yi(e,t,o),e}function Di(e,t,n,r){return po(),t.flags|=256,_i(e,t,n,r),t.child}var Fi={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function ji(e){return{baseLanes:e,cachePool:$o()}}function Mi(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=hs),e}function Wi(e,t,n){var r,o=t.pendingProps,l=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&si.current)),r&&(l=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(oo){if(l?li(t):ii(),oo){var u,s=ro;if(u=s){e:{for(u=s,s=ao;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=yf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Xr?{id:Kr,overflow:Gr}:null,retryLane:536870912,hydrationErrors:null},(u=Lr(18,null,null,0)).stateNode=s,u.return=t,t.child=u,no=t,ro=null,u=!0):u=!1}u||uo(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return gf(s)?t.lanes=32:t.lanes=536870912,null;ui(t)}return s=o.children,o=o.fallback,l?(ii(),s=Hi({mode:"hidden",children:s},l=t.mode),o=Mr(o,l,n,null),s.return=t,o.return=t,s.sibling=o,t.child=s,(l=t.child).memoizedState=ji(n),l.childLanes=Mi(e,r,n),t.memoizedState=Fi,o):(li(t),Ui(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(li(t),t.flags&=-257,t=$i(e,t,n)):null!==t.memoizedState?(ii(),t.child=e.child,t.flags|=128,t=null):(ii(),l=o.fallback,s=t.mode,o=Hi({mode:"visible",children:o.children},s),(l=Mr(l,s,n,null)).flags|=2,o.return=t,l.return=t,o.sibling=l,t.child=o,ti(t,e.child,null,n),(o=t.child).memoizedState=ji(n),o.childLanes=Mi(e,r,n),t.memoizedState=Fi,t=l);else if(li(t),gf(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(o=Error(a(419))).stack="",o.digest=r,ho({value:o,source:null,stack:null}),t=$i(e,t,n)}else if(Ei||xo(e,t,n,!1),r=!!(n&e.childLanes),Ei||r){if(null!==(r=ns)&&0!==(o=(o=42&(o=n&-n)?1:_e(o))&(r.suspendedLanes|n)?0:o)&&o!==u.retryLane)throw u.retryLane=o,Br(e,o),Ls(r,0,o),Ci;"$?"===s.data||qs(),t=$i(e,t,n)}else"$?"===s.data?(t.flags|=192,t.child=e.child,t=null):(e=u.treeContext,ro=yf(s.nextSibling),no=t,oo=!0,lo=null,ao=!1,null!==e&&(Qr[Yr++]=Kr,Qr[Yr++]=Gr,Qr[Yr++]=Xr,Kr=e.id,Gr=e.overflow,Xr=t),(t=Ui(t,o.children)).flags|=4096);return t}return l?(ii(),l=o.fallback,s=t.mode,c=(u=e.child).sibling,(o=Dr(u,{mode:"hidden",children:o.children})).subtreeFlags=65011712&u.subtreeFlags,null!==c?l=Dr(c,l):(l=Mr(l,s,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,null===(s=e.child.memoizedState)?s=ji(n):(null!==(u=s.cachePool)?(c=To._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=$o(),s={baseLanes:s.baseLanes|n,cachePool:u}),l.memoizedState=s,l.childLanes=Mi(e,r,n),t.memoizedState=Fi,o):(li(t),e=(n=e.child).sibling,(n=Dr(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Ui(e,t){return(t=Hi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Hi(e,t){return(e=Lr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function $i(e,t,n){return ti(t,e.child,null,n),(e=Ui(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Vi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wo(e.return,t,n)}function qi(e,t,n,r,o){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=o)}function Qi(e,t,n){var r=t.pendingProps,o=r.revealOrder,l=r.tail;if(_i(e,t,r.children,n),2&(r=si.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vi(e,n,t);else if(19===e.tag)Vi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(M(si,r),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ci(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qi(t,!1,o,n,l);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ci(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qi(t,!0,n,null,l);break;case"together":qi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Yi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ds|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(xo(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Dr(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Dr(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xi(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!So(e))}function Ki(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Ei=!0;else{if(!(Xi(e,n)||128&t.flags))return Ei=!1,function(e,t,n){switch(t.tag){case 3:V(t,t.stateNode.containerInfo),vo(0,To,e.memoizedState.cache),po();break;case 27:case 5:Q(t);break;case 4:V(t,t.stateNode.containerInfo);break;case 10:vo(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(li(t),t.flags|=128,null):n&t.child.childLanes?Wi(e,t,n):(li(t),null!==(e=Yi(e,t,n))?e.sibling:null);li(t);break;case 19:var o=!!(128&e.flags);if((r=!!(n&t.childLanes))||(xo(e,t,n,!1),r=!!(n&t.childLanes)),o){if(r)return Qi(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),M(si,si.current),r)break;return null;case 22:case 23:return t.lanes=0,Ii(e,t,n);case 24:vo(0,To,e.memoizedState.cache)}return Yi(e,t,n)}(e,t,n);Ei=!!(131072&e.flags)}else Ei=!1,oo&&1048576&t.flags&&Jr(t,qr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,o=r._init;if(r=o(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===w){t.tag=11,t=Pi(null,t,r,e,n);break e}if(o===S){t.tag=14,t=Ni(null,t,r,e,n);break e}}throw t=I(r)||r,Error(a(306,t,""))}Rr(r)?(e=hi(r,e),t.tag=1,t=Ri(null,t,r,e,n)):(t.tag=0,t=Oi(null,t,r,e,n))}return t;case 0:return Oi(e,t,t.type,t.pendingProps,n);case 1:return Ri(e,t,r=t.type,o=hi(r,t.pendingProps),n);case 3:e:{if(V(t,t.stateNode.containerInfo),null===e)throw Error(a(387));r=t.pendingProps;var l=t.memoizedState;o=l.element,rl(e,t),cl(t,r,null,n);var i=t.memoizedState;if(r=i.cache,vo(0,To,r),r!==l.cache&&ko(t,[To],n,!0),sl(),r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Di(e,t,r,n);break e}if(r!==o){ho(o=xr(Error(a(424)),t)),t=Di(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,ro=yf(e.firstChild),no=t,oo=!0,lo=null,ao=!0,n=ni(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(po(),r===o){t=Yi(e,t,n);break e}_i(e,t,r,n)}t=t.child}return t;case 26:return zi(e,t),null===e?(n=Pf(t.type,null,t.pendingProps,null))?t.memoizedState=n:oo||(n=t.type,e=t.pendingProps,(r=nf(H.current).createElement(n))[Ie]=t,r[Te]=e,Jc(r,n,e),$e(r),t.stateNode=r):t.memoizedState=Pf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return Q(t),null===e&&oo&&(r=t.stateNode=Af(t.type,t.pendingProps,H.current),no=t,ao=!0,o=ro,pf(t.type)?(bf=o,ro=yf(r.firstChild)):ro=o),_i(e,t,t.pendingProps.children,n),zi(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&oo&&((o=r=ro)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Fe])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(l=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(l!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((l=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&l&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var l=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===l)return e}if(null===(e=yf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,ao))?(t.stateNode=r,no=t,ro=yf(r.firstChild),ao=!1,o=!0):o=!1),o||uo(t)),Q(t),o=t.type,l=t.pendingProps,i=null!==e?e.memoizedProps:null,r=l.children,lf(o,l)?r=null:null!==i&&lf(o,i)&&(t.flags|=32),null!==t.memoizedState&&(o=Il(e,t,Ol,null,null,n),Yf._currentValue=o),zi(e,t),_i(e,t,r,n),t.child;case 6:return null===e&&oo&&((e=n=ro)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yf(e.nextSibling)))return null}return e}(n,t.pendingProps,ao))?(t.stateNode=n,no=t,ro=null,e=!0):e=!1),e||uo(t)),null;case 13:return Wi(e,t,n);case 4:return V(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ti(t,null,r,n):_i(e,t,r,n),t.child;case 11:return Pi(e,t,t.type,t.pendingProps,n);case 7:return _i(e,t,t.pendingProps,n),t.child;case 8:case 12:return _i(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,vo(0,t.type,r.value),_i(e,t,r.children,n),t.child;case 9:return o=t.type._context,r=t.pendingProps.children,Co(t),r=r(o=Eo(o)),t.flags|=1,_i(e,t,r,n),t.child;case 14:return Ni(e,t,t.type,t.pendingProps,n);case 15:return Bi(e,t,t.type,t.pendingProps,n);case 19:return Qi(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Hi(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Dr(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Ii(e,t,n);case 24:return Co(t),r=Eo(To),null===e?(null===(o=Uo())&&(o=ns,l=zo(),o.pooledCache=l,l.refCount++,null!==l&&(o.pooledCacheLanes|=n),o=l),t.memoizedState={parent:r,cache:o},nl(t),vo(0,To,o)):(!!(e.lanes&n)&&(rl(e,t),cl(t,null,null,n),sl()),o=e.memoizedState,l=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),vo(0,To,r)):(r=l.cache,vo(0,To,r),r!==o.cache&&ko(t,[To],n,!0))),_i(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(a(156,t.tag))}function Gi(e){e.flags|=4}function Zi(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Wf(t)){if(null!==(t=ri.current)&&((4194048&os)===os?null!==oi:(62914560&os)!==os&&!(536870912&os)||t!==oi))throw Zo=Yo,qo;e.flags|=8192}}function Ji(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ke():536870912,e.lanes|=t,gs|=t)}function eu(e,t){if(!oo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function nu(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return tu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),Ao(To),q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(fo(t)?Gi(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,mo())),tu(t),null;case 26:return n=t.memoizedState,null===e?(Gi(t),null!==n?(tu(t),Zi(t,n)):(tu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Gi(t),tu(t),Zi(t,n)):(tu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Gi(t),tu(t),t.flags&=-16777217),null;case 27:Y(t),n=H.current;var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Gi(t);else{if(!r){if(null===t.stateNode)throw Error(a(166));return tu(t),null}e=W.current,fo(t)?so(t):(e=Af(o,r,n),t.stateNode=e,Gi(t))}return tu(t),null;case 5:if(Y(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Gi(t);else{if(!r){if(null===t.stateNode)throw Error(a(166));return tu(t),null}if(e=W.current,fo(t))so(t);else{switch(o=nf(H.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(n,{is:r.is}):o.createElement(n)}}e[Ie]=t,e[Te]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(Jc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Gi(t)}}return tu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Gi(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(e=H.current,fo(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(o=no))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[Ie]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Xc(e.nodeValue,n)))||uo(t)}else(e=nf(e).createTextNode(r))[Ie]=t,t.stateNode=e}return tu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(a(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(a(317));o[Ie]=t}else po(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;tu(t),o=!1}else o=mo(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&t.flags?(ui(t),t):(ui(t),null)}if(ui(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){o=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var l=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(l=r.memoizedState.cachePool.pool),l!==o&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Ji(t,t.updateQueue),tu(t),null;case 4:return q(),null===e&&jc(t.stateNode.containerInfo),tu(t),null;case 10:return Ao(t.type),tu(t),null;case 19:if(j(si),null===(o=t.memoizedState))return tu(t),null;if(r=!!(128&t.flags),null===(l=o.rendering))if(r)eu(o,!1);else{if(0!==fs||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ci(e))){for(t.flags|=128,eu(o,!1),e=l.updateQueue,t.updateQueue=e,Ji(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Fr(n,e),n=n.sibling;return M(si,1&si.current|2),t.child}e=e.sibling}null!==o.tail&&ee()>ws&&(t.flags|=128,r=!0,eu(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ci(l))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Ji(t,e),eu(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate&&!oo)return tu(t),null}else 2*ee()-o.renderingStartTime>ws&&536870912!==n&&(t.flags|=128,r=!0,eu(o,!1),t.lanes=4194304);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(e=o.last)?e.sibling=l:t.child=l,o.last=l)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=ee(),t.sibling=null,e=si.current,M(si,r?1&e|2:1&e),t):(tu(t),null);case 22:case 23:return ui(t),yl(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(tu(t),6&t.subtreeFlags&&(t.flags|=8192)):tu(t),null!==(n=t.updateQueue)&&Ji(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&j(Wo),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),Ao(To),tu(t),null;case 25:case 30:return null}throw Error(a(156,t.tag))}function ru(e,t){switch(to(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ao(To),q(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return Y(t),null;case 13:if(ui(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));po()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return j(si),null;case 4:return q(),null;case 10:return Ao(t.type),null;case 22:case 23:return ui(t),yl(),null!==e&&j(Wo),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return Ao(To),null;default:return null}}function ou(e,t){switch(to(t),t.tag){case 3:Ao(To),q();break;case 26:case 27:case 5:Y(t);break;case 4:q();break;case 13:ui(t);break;case 19:j(si);break;case 10:Ao(t.type);break;case 22:case 23:ui(t),yl(),null!==e&&j(Wo);break;case 24:Ao(To)}}function lu(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{if((n.tag&e)===e){r=void 0;var l=n.create,a=n.inst;r=l(),a.destroy=r}n=n.next}while(n!==o)}}catch(e){sc(t,t.return,e)}}function au(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var l=o.next;r=l;do{if((r.tag&e)===e){var a=r.inst,i=a.destroy;if(void 0!==i){a.destroy=void 0,o=t;var u=n,s=i;try{s()}catch(e){sc(o,u,e)}}}r=r.next}while(r!==l)}}catch(e){sc(t,t.return,e)}}function iu(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{dl(t,n)}catch(t){sc(e,e.return,t)}}}function uu(e,t,n){n.props=hi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){sc(e,t,n)}}function su(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){sc(e,t,n)}}function cu(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){sc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){sc(e,t,n)}else n.current=null}function fu(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){sc(e,e.return,t)}}function du(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,l=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||Gc(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":l=m;break;case"name":o=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(a(137,t));break;default:m!==d&&Gc(e,t,p,m,r,d)}}return void ht(e,i,u,s,c,f,l,o);case"select":for(l in m=i=u=p=null,n)if(s=n[l],n.hasOwnProperty(l)&&null!=s)switch(l){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(l)||Gc(e,t,l,null,r,s)}for(o in r)if(l=r[o],s=n[o],r.hasOwnProperty(o)&&(null!=l||null!=s))switch(o){case"value":p=l;break;case"defaultValue":u=l;break;case"multiple":i=l;default:l!==s&&Gc(e,t,o,l,r,s)}return t=u,n=i,r=m,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(o=n[u],n.hasOwnProperty(u)&&null!=o&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Gc(e,t,u,null,r,o)}for(i in r)if(o=r[i],l=n[i],r.hasOwnProperty(i)&&(null!=o||null!=l))switch(i){case"value":p=o;break;case"defaultValue":m=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(a(91));break;default:o!==l&&Gc(e,t,i,o,r,l)}return void vt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Gc(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Gc(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Gc(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(a(137,t));break;default:Gc(e,t,c,p,r,m)}return;default:if(Ct(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Zc(e,t,y,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Zc(e,t,f,p,r,m);return}}for(var b in n)p=n[b],n.hasOwnProperty(b)&&null!=p&&!r.hasOwnProperty(b)&&Gc(e,t,b,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||Gc(e,t,d,p,r,m)}(r,e.type,n,t),r[Te]=t}catch(t){sc(e,e.return,t)}}function pu(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&pf(e.type)||4===e.tag}function mu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||pu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&pf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function hu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Kc));else if(4!==r&&(27===r&&pf(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(hu(e,t,n),e=e.sibling;null!==e;)hu(e,t,n),e=e.sibling}function gu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&pf(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function yu(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,o=t.attributes;o.length;)t.removeAttributeNode(o[0]);Jc(t,r,n),t[Ie]=e,t[Te]=n}catch(t){sc(e,e.return,t)}}var bu=!1,vu=!1,Au=!1,wu="function"==typeof WeakSet?WeakSet:Set,ku=null;function xu(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Ru(e,n),4&r&&lu(5,n);break;case 1:if(Ru(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){sc(n,n.return,e)}else{var o=hi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){sc(n,n.return,e)}}64&r&&iu(n),512&r&&su(n,n.return);break;case 3:if(Ru(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{dl(e,t)}catch(e){sc(n,n.return,e)}}break;case 27:null===t&&4&r&&yu(n);case 26:case 5:Ru(e,n),null===t&&4&r&&fu(n),512&r&&su(n,n.return);break;case 12:Ru(e,n);break;case 13:Ru(e,n),4&r&&Nu(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=pc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||bu)){t=null!==t&&null!==t.memoizedState||vu,o=bu;var l=vu;bu=r,(vu=t)&&!l?Fu(e,n,!!(8772&n.subtreeFlags)):Ru(e,n),bu=o,vu=l}break;case 30:break;default:Ru(e,n)}}function Su(e){var t=e.alternate;null!==t&&(e.alternate=null,Su(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&je(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Cu=null,Eu=!1;function _u(e,t,n){for(n=n.child;null!==n;)Pu(e,t,n),n=n.sibling}function Pu(e,t,n){if(ce&&"function"==typeof ce.onCommitFiberUnmount)try{ce.onCommitFiberUnmount(se,n)}catch(e){}switch(n.tag){case 26:vu||cu(n,t),_u(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:vu||cu(n,t);var r=Cu,o=Eu;pf(n.type)&&(Cu=n.stateNode,Eu=!1),_u(e,t,n),wf(n.stateNode),Cu=r,Eu=o;break;case 5:vu||cu(n,t);case 6:if(r=Cu,o=Eu,Cu=null,_u(e,t,n),Eu=o,null!==(Cu=r))if(Eu)try{(9===Cu.nodeType?Cu.body:"HTML"===Cu.nodeName?Cu.ownerDocument.body:Cu).removeChild(n.stateNode)}catch(e){sc(n,t,e)}else try{Cu.removeChild(n.stateNode)}catch(e){sc(n,t,e)}break;case 18:null!==Cu&&(Eu?(mf(9===(e=Cu).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),Cd(e)):mf(Cu,n.stateNode));break;case 4:r=Cu,o=Eu,Cu=n.stateNode.containerInfo,Eu=!0,_u(e,t,n),Cu=r,Eu=o;break;case 0:case 11:case 14:case 15:vu||au(2,n,t),vu||au(4,n,t),_u(e,t,n);break;case 1:vu||(cu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&uu(n,t,r)),_u(e,t,n);break;case 21:_u(e,t,n);break;case 22:vu=(r=vu)||null!==n.memoizedState,_u(e,t,n),vu=r;break;default:_u(e,t,n)}}function Nu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Cd(e)}catch(e){sc(t,t.return,e)}}function Bu(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new wu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new wu),t;default:throw Error(a(435,e.tag))}}(e);t.forEach((function(t){var r=mc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function Iu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r],l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:if(pf(u.type)){Cu=u.stateNode,Eu=!1;break e}break;case 5:Cu=u.stateNode,Eu=!1;break e;case 3:case 4:Cu=u.stateNode.containerInfo,Eu=!0;break e}u=u.return}if(null===Cu)throw Error(a(160));Pu(l,i,o),Cu=null,Eu=!1,null!==(l=o.alternate)&&(l.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)zu(t,e),t=t.sibling}var Tu=null;function zu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Iu(t,e),Ou(e),4&r&&(au(3,e,e.return),lu(3,e),au(5,e,e.return));break;case 1:Iu(t,e),Ou(e),512&r&&(vu||null===n||cu(n,n.return)),64&r&&bu&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var o=Tu;if(Iu(t,e),Ou(e),512&r&&(vu||null===n||cu(n,n.return)),4&r){var l=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,o=o.ownerDocument||o;t:switch(r){case"title":(!(l=o.getElementsByTagName("title")[0])||l[Fe]||l[Ie]||"http://www.w3.org/2000/svg"===l.namespaceURI||l.hasAttribute("itemprop"))&&(l=o.createElement(r),o.head.insertBefore(l,o.querySelector("head > title"))),Jc(l,r,n),l[Ie]=e,$e(l),r=l;break e;case"link":var i=jf("link","href",o).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((l=i[u]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&l.getAttribute("rel")===(null==n.rel?null:n.rel)&&l.getAttribute("title")===(null==n.title?null:n.title)&&l.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}Jc(l=o.createElement(r),r,n),o.head.appendChild(l);break;case"meta":if(i=jf("meta","content",o).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((l=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&l.getAttribute("name")===(null==n.name?null:n.name)&&l.getAttribute("property")===(null==n.property?null:n.property)&&l.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&l.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}Jc(l=o.createElement(r),r,n),o.head.appendChild(l);break;default:throw Error(a(468,r))}l[Ie]=e,$e(l),r=l}e.stateNode=r}else Mf(o,e.type,e.stateNode);else e.stateNode=Of(o,r,e.memoizedProps);else l!==r?(null===l?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):l.count--,null===r?Mf(o,e.type,e.stateNode):Of(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&du(e,e.memoizedProps,n.memoizedProps)}break;case 27:Iu(t,e),Ou(e),512&r&&(vu||null===n||cu(n,n.return)),null!==n&&4&r&&du(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Iu(t,e),Ou(e),512&r&&(vu||null===n||cu(n,n.return)),32&e.flags){o=e.stateNode;try{wt(o,"")}catch(t){sc(e,e.return,t)}}4&r&&null!=e.stateNode&&du(e,o=e.memoizedProps,null!==n?n.memoizedProps:o),1024&r&&(Au=!0);break;case 6:if(Iu(t,e),Ou(e),4&r){if(null===e.stateNode)throw Error(a(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){sc(e,e.return,t)}}break;case 3:if(Ff=null,o=Tu,Tu=Sf(t.containerInfo),Iu(t,e),Tu=o,Ou(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Cd(t.containerInfo)}catch(t){sc(e,e.return,t)}Au&&(Au=!1,Lu(e));break;case 4:r=Tu,Tu=Sf(e.stateNode.containerInfo),Iu(t,e),Ou(e),Tu=r;break;case 12:default:Iu(t,e),Ou(e);break;case 13:Iu(t,e),Ou(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(As=ee()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Bu(e,r));break;case 22:o=null!==e.memoizedState;var s=null!==n&&null!==n.memoizedState,c=bu,f=vu;if(bu=c||o,vu=f||s,Iu(t,e),vu=f,bu=c,Ou(e),8192&r)e:for(t=e.stateNode,t._visibility=o?-2&t._visibility:1|t._visibility,o&&(null===n||s||bu||vu||Du(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){s=n=t;try{if(l=s.stateNode,o)"function"==typeof(i=l.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;u.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){sc(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=o?"":s.memoizedProps}catch(e){sc(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Bu(e,n));break;case 19:Iu(t,e),Ou(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Bu(e,r));case 30:case 21:}}function Ou(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(pu(r)){n=r;break}r=r.return}if(null==n)throw Error(a(160));switch(n.tag){case 27:var o=n.stateNode;gu(e,mu(e),o);break;case 5:var l=n.stateNode;32&n.flags&&(wt(l,""),n.flags&=-33),gu(e,mu(e),l);break;case 3:case 4:var i=n.stateNode.containerInfo;hu(e,mu(e),i);break;default:throw Error(a(161))}}catch(t){sc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Lu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Lu(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Ru(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)xu(e,t.alternate,t),t=t.sibling}function Du(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:au(4,t,t.return),Du(t);break;case 1:cu(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&uu(t,t.return,n),Du(t);break;case 27:wf(t.stateNode);case 26:case 5:cu(t,t.return),Du(t);break;case 22:null===t.memoizedState&&Du(t);break;default:Du(t)}e=e.sibling}}function Fu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,o=e,l=t,a=l.flags;switch(l.tag){case 0:case 11:case 15:Fu(o,l,n),lu(4,l);break;case 1:if(Fu(o,l,n),"function"==typeof(o=(r=l).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){sc(r,r.return,e)}if(null!==(o=(r=l).updateQueue)){var i=r.stateNode;try{var u=o.shared.hiddenCallbacks;if(null!==u)for(o.shared.hiddenCallbacks=null,o=0;o<u.length;o++)fl(u[o],i)}catch(e){sc(r,r.return,e)}}n&&64&a&&iu(l),su(l,l.return);break;case 27:yu(l);case 26:case 5:Fu(o,l,n),n&&null===r&&4&a&&fu(l),su(l,l.return);break;case 12:Fu(o,l,n);break;case 13:Fu(o,l,n),n&&4&a&&Nu(o,l);break;case 22:null===l.memoizedState&&Fu(o,l,n),su(l,l.return);break;case 30:break;default:Fu(o,l,n)}t=t.sibling}}function ju(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Oo(n))}function Mu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Oo(e))}function Wu(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Uu(e,t,n,r),t=t.sibling}function Uu(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:Wu(e,t,n,r),2048&o&&lu(9,t);break;case 1:case 13:default:Wu(e,t,n,r);break;case 3:Wu(e,t,n,r),2048&o&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Oo(e)));break;case 12:if(2048&o){Wu(e,t,n,r),e=t.stateNode;try{var l=t.memoizedProps,a=l.id,i=l.onPostCommit;"function"==typeof i&&i(a,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){sc(t,t.return,e)}}else Wu(e,t,n,r);break;case 23:break;case 22:l=t.stateNode,a=t.alternate,null!==t.memoizedState?2&l._visibility?Wu(e,t,n,r):$u(e,t):2&l._visibility?Wu(e,t,n,r):(l._visibility|=2,Hu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&ju(a,t);break;case 24:Wu(e,t,n,r),2048&o&&Mu(t.alternate,t)}}function Hu(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var l=e,a=t,i=n,u=r,s=a.flags;switch(a.tag){case 0:case 11:case 15:Hu(l,a,i,u,o),lu(8,a);break;case 23:break;case 22:var c=a.stateNode;null!==a.memoizedState?2&c._visibility?Hu(l,a,i,u,o):$u(l,a):(c._visibility|=2,Hu(l,a,i,u,o)),o&&2048&s&&ju(a.alternate,a);break;case 24:Hu(l,a,i,u,o),o&&2048&s&&Mu(a.alternate,a);break;default:Hu(l,a,i,u,o)}t=t.sibling}}function $u(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:$u(n,r),2048&o&&ju(r.alternate,r);break;case 24:$u(n,r),2048&o&&Mu(r.alternate,r);break;default:$u(n,r)}t=t.sibling}}var Vu=8192;function qu(e){if(e.subtreeFlags&Vu)for(e=e.child;null!==e;)Qu(e),e=e.sibling}function Qu(e){switch(e.tag){case 26:qu(e),e.flags&Vu&&null!==e.memoizedState&&function(e,t,n){if(null===Uf)throw Error(a(475));var r=Uf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var o=Nf(n.href),l=e.querySelector(Bf(o));if(l)return null!==(e=l._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=$f.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=l,void $e(l);l=e.ownerDocument||e,n=If(n),(o=kf.get(o))&&Rf(n,o),$e(l=l.createElement("link"));var i=l;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Jc(l,"link",n),t.instance=l}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=$f.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Tu,e.memoizedState,e.memoizedProps);break;case 5:default:qu(e);break;case 3:case 4:var t=Tu;Tu=Sf(e.stateNode.containerInfo),qu(e),Tu=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Vu,Vu=16777216,qu(e),Vu=t):qu(e))}}function Yu(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Xu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ku=r,Zu(r,e)}Yu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ku(e),e=e.sibling}function Ku(e){switch(e.tag){case 0:case 11:case 15:Xu(e),2048&e.flags&&au(9,e,e.return);break;case 3:case 12:default:Xu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Gu(e)):Xu(e)}}function Gu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ku=r,Zu(r,e)}Yu(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:au(8,t,t.return),Gu(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Gu(t));break;default:Gu(t)}e=e.sibling}}function Zu(e,t){for(;null!==ku;){var n=ku;switch(n.tag){case 0:case 11:case 15:au(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Oo(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ku=r;else e:for(n=e;null!==ku;){var o=(r=ku).sibling,l=r.return;if(Su(r),r===n){ku=null;break e}if(null!==o){o.return=l,ku=o;break e}ku=l}}}var Ju={getCacheForType:function(e){var t=Eo(To),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},es="function"==typeof WeakMap?WeakMap:Map,ts=0,ns=null,rs=null,os=0,ls=0,as=null,is=!1,us=!1,ss=!1,cs=0,fs=0,ds=0,ps=0,ms=0,hs=0,gs=0,ys=null,bs=null,vs=!1,As=0,ws=1/0,ks=null,xs=null,Ss=0,Cs=null,Es=null,_s=0,Ps=0,Ns=null,Bs=null,Is=0,Ts=null;function zs(){return 2&ts&&0!==os?os&-os:null!==z.T?0!==Do?Do:Pc():Ne()}function Os(){0===hs&&(hs=536870912&os&&!oo?536870912:we());var e=ri.current;return null!==e&&(e.flags|=32),hs}function Ls(e,t,n){(e!==ns||2!==ls&&9!==ls)&&null===e.cancelPendingCommit||(Us(e,0),js(e,os,hs,!1)),Se(e,n),2&ts&&e===ns||(e===ns&&(!(2&ts)&&(ps|=n),4===fs&&js(e,os,hs,!1)),wc(e))}function Rs(e,t,n){if(6&ts)throw Error(a(327));for(var r=!n&&!(124&t)&&!(t&e.expiredLanes)||ve(e,t),o=r?function(e,t){var n=ts;ts|=2;var r=$s(),o=Vs();ns!==e||os!==t?(ks=null,ws=ee()+500,Us(e,t)):us=ve(e,t);e:for(;;)try{if(0!==ls&&null!==rs){t=rs;var l=as;t:switch(ls){case 1:ls=0,as=null,Zs(e,t,l,1);break;case 2:case 9:if(Xo(l)){ls=0,as=null,Gs(t);break}t=function(){2!==ls&&9!==ls||ns!==e||(ls=7),wc(e)},l.then(t,t);break e;case 3:ls=7;break e;case 4:ls=5;break e;case 7:Xo(l)?(ls=0,as=null,Gs(t)):(ls=0,as=null,Zs(e,t,l,7));break;case 5:var i=null;switch(rs.tag){case 26:i=rs.memoizedState;case 5:case 27:var u=rs;if(!i||Wf(i)){ls=0,as=null;var s=u.sibling;if(null!==s)rs=s;else{var c=u.return;null!==c?(rs=c,Js(c)):rs=null}break t}}ls=0,as=null,Zs(e,t,l,5);break;case 6:ls=0,as=null,Zs(e,t,l,6);break;case 8:Ws(),fs=6;break e;default:throw Error(a(462))}}Xs();break}catch(t){Hs(e,t)}return bo=yo=null,z.H=r,z.A=o,ts=n,null!==rs?0:(ns=null,os=0,_r(),fs)}(e,t):Qs(e,t,!0),l=r;;){if(0===o){us&&!r&&js(e,t,0,!1);break}if(n=e.current.alternate,!l||Fs(n)){if(2===o){if(l=t,e.errorRecoveryDisabledLanes&l)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;o=ys;var s=u.current.memoizedState.isDehydrated;if(s&&(Us(u,i).flags|=256),2!==(i=Qs(u,i,!1))){if(ss&&!s){u.errorRecoveryDisabledLanes|=l,ps|=l,o=4;break e}l=bs,bs=o,null!==l&&(null===bs?bs=l:bs.push.apply(bs,l))}o=i}if(l=!1,2!==o)continue}}if(1===o){Us(e,0),js(e,t,0,!0);break}e:{switch(r=e,l=o){case 0:case 1:throw Error(a(345));case 4:if((4194048&t)!==t)break;case 6:js(r,t,hs,!is);break e;case 2:bs=null;break;case 3:case 5:break;default:throw Error(a(329))}if((62914560&t)===t&&10<(o=As+300-ee())){if(js(r,t,hs,!is),0!==be(r,0,!0))break e;r.timeoutHandle=uf(Ds.bind(null,r,n,bs,ks,vs,t,hs,ps,gs,is,l,2,-0,0),o)}else Ds(r,n,bs,ks,vs,t,hs,ps,gs,is,l,0,-0,0)}break}o=Qs(e,t,!1),l=!1}wc(e)}function Ds(e,t,n,r,o,l,i,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(Uf={stylesheets:null,count:0,unsuspend:Hf},Qu(t),null!==(d=function(){if(null===Uf)throw Error(a(475));var e=Uf;return e.stylesheets&&0===e.count&&qf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&qf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(tc.bind(null,e,t,l,n,r,o,i,u,s,f,1,p,m)),void js(e,l,i,!c);tc(e,t,l,n,r,o,i,u,s)}function Fs(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],l=o.getSnapshot;o=o.value;try{if(!Yn(l(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function js(e,t,n,r){t&=~ms,t&=~ps,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var l=31-de(o),a=1<<l;r[l]=-1,o&=~a}0!==n&&Ce(e,n,t)}function Ms(){return!!(6&ts)||(kc(0,!1),!1)}function Ws(){if(null!==rs){if(0===ls)var e=rs.return;else bo=yo=null,Dl(e=rs),Ya=null,Xa=0,e=rs;for(;null!==e;)ou(e.alternate,e),e=e.return;rs=null}}function Us(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,sf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Ws(),ns=e,rs=n=Dr(e.current,null),os=t,ls=0,as=null,is=!1,us=ve(e,t),ss=!1,gs=hs=ms=ps=ds=fs=0,bs=ys=null,vs=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-de(r),l=1<<o;t|=e[o],r&=~l}return cs=t,_r(),n}function Hs(e,t){vl=null,z.H=$a,t===Vo||t===Qo?(t=Jo(),ls=3):t===qo?(t=Jo(),ls=4):ls=t===Ci?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,as=t,null===rs&&(fs=1,Ai(e,xr(t,e.current)))}function $s(){var e=z.H;return z.H=$a,null===e?$a:e}function Vs(){var e=z.A;return z.A=Ju,e}function qs(){fs=4,is||(4194048&os)!==os&&null!==ri.current||(us=!0),!(134217727&ds)&&!(134217727&ps)||null===ns||js(ns,os,hs,!1)}function Qs(e,t,n){var r=ts;ts|=2;var o=$s(),l=Vs();ns===e&&os===t||(ks=null,Us(e,t)),t=!1;var a=fs;e:for(;;)try{if(0!==ls&&null!==rs){var i=rs,u=as;switch(ls){case 8:Ws(),a=6;break e;case 3:case 2:case 9:case 6:null===ri.current&&(t=!0);var s=ls;if(ls=0,as=null,Zs(e,i,u,s),n&&us){a=0;break e}break;default:s=ls,ls=0,as=null,Zs(e,i,u,s)}}Ys(),a=fs;break}catch(t){Hs(e,t)}return t&&e.shellSuspendCounter++,bo=yo=null,ts=r,z.H=o,z.A=l,null===rs&&(ns=null,os=0,_r()),a}function Ys(){for(;null!==rs;)Ks(rs)}function Xs(){for(;null!==rs&&!Z();)Ks(rs)}function Ks(e){var t=Ki(e.alternate,e,cs);e.memoizedProps=e.pendingProps,null===t?Js(e):rs=t}function Gs(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Li(n,t,t.pendingProps,t.type,void 0,os);break;case 11:t=Li(n,t,t.pendingProps,t.type.render,t.ref,os);break;case 5:Dl(t);default:ou(n,t),t=Ki(n,t=rs=Fr(t,cs),cs)}e.memoizedProps=e.pendingProps,null===t?Js(e):rs=t}function Zs(e,t,n,r){bo=yo=null,Dl(t),Ya=null,Xa=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&xo(t,n,o,!0),null!==(n=ri.current)){switch(n.tag){case 13:return null===oi?qs():null===n.alternate&&0===fs&&(fs=3),n.flags&=-257,n.flags|=65536,n.lanes=o,r===Yo?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),cc(e,r,o)),!1;case 22:return n.flags|=65536,r===Yo?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),cc(e,r,o)),!1}throw Error(a(435,n.tag))}return cc(e,r,o),qs(),!1}if(oo)return null!==(t=ri.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==io&&ho(xr(e=Error(a(422),{cause:r}),n))):(r!==io&&ho(xr(t=Error(a(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=xr(r,n),il(e,o=ki(e.stateNode,r,o)),4!==fs&&(fs=2)),!1;var l=Error(a(520),{cause:r});if(l=xr(l,n),null===ys?ys=[l]:ys.push(l),4!==fs&&(fs=2),null===t)return!0;r=xr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,il(n,e=ki(n.stateNode,r,e)),!1;case 1:if(t=n.type,l=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===l||"function"!=typeof l.componentDidCatch||null!==xs&&xs.has(l))))return n.flags|=65536,o&=-o,n.lanes|=o,Si(o=xi(o),e,n,r),il(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,os))return fs=1,Ai(e,xr(n,e.current)),void(rs=null)}catch(t){if(null!==o)throw rs=o,t;return fs=1,Ai(e,xr(n,e.current)),void(rs=null)}32768&t.flags?(oo||1===r?e=!0:us||536870912&os?e=!1:(is=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ri.current)&&13===r.tag&&(r.flags|=16384)),ec(t,e)):Js(t)}function Js(e){var t=e;do{if(32768&t.flags)return void ec(t,is);e=t.return;var n=nu(t.alternate,t,cs);if(null!==n)return void(rs=n);if(null!==(t=t.sibling))return void(rs=t);rs=t=e}while(null!==t);0===fs&&(fs=5)}function ec(e,t){do{var n=ru(e.alternate,e);if(null!==n)return n.flags&=32767,void(rs=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(rs=e);rs=e=n}while(null!==e);fs=6,rs=null}function tc(e,t,n,r,o,l,i,u,s){e.cancelPendingCommit=null;do{ac()}while(0!==Ss);if(6&ts)throw Error(a(327));if(null!==t){if(t===e.current)throw Error(a(177));if(l=t.lanes|t.childLanes,function(e,t,n,r,o,l){var a=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=a&~n;0<n;){var c=31-de(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Ce(e,r,0),0!==l&&0===o&&0!==e.tag&&(e.suspendedLanes|=l&~(a&~t))}(e,n,l|=Er,i,u,s),e===ns&&(rs=ns=null,os=0),Es=t,Cs=e,_s=n,Ps=l,Ns=o,Bs=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,K(oe,(function(){return ic(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=z.T,z.T=null,o=O.p,O.p=2,i=ts,ts|=4;try{!function(e,t){if(e=e.containerInfo,ef=ed,er(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==o&&3!==d.nodeType||(u=i+o),d!==l||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===o&&(u=i),p===l&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(tf={focusedElem:e,selectionRange:n},ed=!1,ku=t;null!==ku;)if(e=(t=ku).child,1024&t.subtreeFlags&&null!==e)e.return=t,ku=e;else for(;null!==ku;){switch(l=(t=ku).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==l){e=void 0,n=t,o=l.memoizedProps,l=l.memoizedState,r=n.stateNode;try{var h=hi(n.type,o,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,l),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){sc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))hf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":hf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(a(163))}if(null!==(e=t.sibling)){e.return=t.return,ku=e;break}ku=t.return}}(e,t)}finally{ts=i,O.p=o,z.T=r}}Ss=1,nc(),rc(),oc()}}function nc(){if(1===Ss){Ss=0;var e=Cs,t=Es,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=z.T,z.T=null;var r=O.p;O.p=2;var o=ts;ts|=4;try{zu(t,e);var l=tf,a=Jn(e.containerInfo),i=l.focusedElem,u=l.selectionRange;if(a!==i&&i&&i.ownerDocument&&Zn(i.ownerDocument.documentElement,i)){if(null!==u&&er(i)){var s=u.start,c=u.end;if(void 0===c&&(c=s),"selectionStart"in i)i.selectionStart=s,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=i.textContent.length,h=Math.min(u.start,m),g=void 0===u.end?h:Math.min(u.end,m);!p.extend&&h>g&&(a=g,g=h,h=a);var y=Gn(i,h),b=Gn(i,g);if(y&&b&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==b.node||p.focusOffset!==b.offset)){var v=f.createRange();v.setStart(y.node,y.offset),p.removeAllRanges(),h>g?(p.addRange(v),p.extend(b.node,b.offset)):(v.setEnd(b.node,b.offset),p.addRange(v))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var A=f[i];A.element.scrollLeft=A.left,A.element.scrollTop=A.top}}ed=!!ef,tf=ef=null}finally{ts=o,O.p=r,z.T=n}}e.current=t,Ss=2}}function rc(){if(2===Ss){Ss=0;var e=Cs,t=Es,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=z.T,z.T=null;var r=O.p;O.p=2;var o=ts;ts|=4;try{xu(e,t.alternate,t)}finally{ts=o,O.p=r,z.T=n}}Ss=3}}function oc(){if(4===Ss||3===Ss){Ss=0,J();var e=Cs,t=Es,n=_s,r=Bs;10256&t.subtreeFlags||10256&t.flags?Ss=5:(Ss=0,Es=Cs=null,lc(e,e.pendingLanes));var o=e.pendingLanes;if(0===o&&(xs=null),Pe(n),t=t.stateNode,ce&&"function"==typeof ce.onCommitFiberRoot)try{ce.onCommitFiberRoot(se,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=z.T,o=O.p,O.p=2,z.T=null;try{for(var l=e.onRecoverableError,a=0;a<r.length;a++){var i=r[a];l(i.value,{componentStack:i.stack})}}finally{z.T=t,O.p=o}}3&_s&&ac(),wc(e),o=e.pendingLanes,4194090&n&&42&o?e===Ts?Is++:(Is=0,Ts=e):Is=0,kc(0,!1)}}function lc(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Oo(t))}function ac(e){return nc(),rc(),oc(),ic()}function ic(){if(5!==Ss)return!1;var e=Cs,t=Ps;Ps=0;var n=Pe(_s),r=z.T,o=O.p;try{O.p=32>n?32:n,z.T=null,n=Ns,Ns=null;var l=Cs,i=_s;if(Ss=0,Es=Cs=null,_s=0,6&ts)throw Error(a(331));var u=ts;if(ts|=4,Ku(l.current),Uu(l,l.current,i,n),ts=u,kc(0,!1),ce&&"function"==typeof ce.onPostCommitFiberRoot)try{ce.onPostCommitFiberRoot(se,l)}catch(e){}return!0}finally{O.p=o,z.T=r,lc(e,t)}}function uc(e,t,n){t=xr(n,t),null!==(e=ll(e,t=ki(e.stateNode,t,2),2))&&(Se(e,2),wc(e))}function sc(e,t,n){if(3===e.tag)uc(e,e,n);else for(;null!==t;){if(3===t.tag){uc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===xs||!xs.has(r))){e=xr(n,e),null!==(r=ll(t,n=xi(2),2))&&(Si(n,r,t,e),Se(r,2),wc(r));break}}t=t.return}}function cc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new es;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(ss=!0,o.add(n),e=fc.bind(null,e,t,n),t.then(e,e))}function fc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ns===e&&(os&n)===n&&(4===fs||3===fs&&(62914560&os)===os&&300>ee()-As?!(2&ts)&&Us(e,0):ms|=n,gs===os&&(gs=0)),wc(e)}function dc(e,t){0===t&&(t=ke()),null!==(e=Br(e,t))&&(Se(e,t),wc(e))}function pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),dc(e,n)}function mc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(a(314))}null!==r&&r.delete(t),dc(e,n)}var hc=null,gc=null,yc=!1,bc=!1,vc=!1,Ac=0;function wc(e){e!==gc&&null===e.next&&(null===gc?hc=gc=e:gc=gc.next=e),bc=!0,yc||(yc=!0,ff((function(){6&ts?K(ne,xc):Sc()})))}function kc(e,t){if(!vc&&bc){vc=!0;do{for(var n=!1,r=hc;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var l=0;else{var a=r.suspendedLanes,i=r.pingedLanes;l=(1<<31-de(42|e)+1)-1,l=201326741&(l&=o&~(a&~i))?201326741&l|1:l?2|l:0}0!==l&&(n=!0,_c(r,l))}else l=os,!(3&(l=be(r,r===ns?l:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||ve(r,l)||(n=!0,_c(r,l));r=r.next}}while(n);vc=!1}}function xc(){Sc()}function Sc(){bc=yc=!1;var e,t=0;0!==Ac&&(((e=window.event)&&"popstate"===e.type?e!==af&&(af=e,!0):(af=null,!1))&&(t=Ac),Ac=0);for(var n=ee(),r=null,o=hc;null!==o;){var l=o.next,a=Cc(o,n);0===a?(o.next=null,null===r?hc=l:r.next=l,null===l&&(gc=r)):(r=o,(0!==t||3&a)&&(bc=!0)),o=l}kc(t,!1)}function Cc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,l=-62914561&e.pendingLanes;0<l;){var a=31-de(l),i=1<<a,u=o[a];-1===u?i&n&&!(i&r)||(o[a]=Ae(i,t)):u<=t&&(e.expiredLanes|=i),l&=~i}if(n=os,n=be(e,e===(t=ns)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===ls||9===ls)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&G(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||ve(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&G(r),Pe(n)){case 2:case 8:n=re;break;case 32:default:n=oe;break;case 268435456:n=ae}return r=Ec.bind(null,e),n=K(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&G(r),e.callbackPriority=2,e.callbackNode=null,2}function Ec(e,t){if(0!==Ss&&5!==Ss)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(ac()&&e.callbackNode!==n)return null;var r=os;return 0===(r=be(e,e===ns?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Rs(e,r,t),Cc(e,ee()),null!=e.callbackNode&&e.callbackNode===n?Ec.bind(null,e):null)}function _c(e,t){if(ac())return null;Rs(e,t,!0)}function Pc(){return 0===Ac&&(Ac=we()),Ac}function Nc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function Bc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ic=0;Ic<Ar.length;Ic++){var Tc=Ar[Ic];wr(Tc.toLowerCase(),"on"+(Tc[0].toUpperCase()+Tc.slice(1)))}wr(dr,"onAnimationEnd"),wr(pr,"onAnimationIteration"),wr(mr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(hr,"onTransitionRun"),wr(gr,"onTransitionStart"),wr(yr,"onTransitionCancel"),wr(br,"onTransitionEnd"),Ye("onMouseEnter",["mouseout","mouseover"]),Ye("onMouseLeave",["mouseout","mouseover"]),Ye("onPointerEnter",["pointerout","pointerover"]),Ye("onPointerLeave",["pointerout","pointerover"]),Qe("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Qe("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Qe("onBeforeInput",["compositionend","keypress","textInput","paste"]),Qe("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Qe("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Oc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(zc));function Lc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var a=r.length-1;0<=a;a--){var i=r[a],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==l&&o.isPropagationStopped())break e;l=i,o.currentTarget=s;try{l(o)}catch(e){gi(e)}o.currentTarget=null,l=u}else for(a=0;a<r.length;a++){if(u=(i=r[a]).instance,s=i.currentTarget,i=i.listener,u!==l&&o.isPropagationStopped())break e;l=i,o.currentTarget=s;try{l(o)}catch(e){gi(e)}o.currentTarget=null,l=u}}}}function Rc(e,t){var n=t[Oe];void 0===n&&(n=t[Oe]=new Set);var r=e+"__bubble";n.has(r)||(Mc(t,e,2,!1),n.add(r))}function Dc(e,t,n){var r=0;t&&(r|=4),Mc(n,e,r,t)}var Fc="_reactListening"+Math.random().toString(36).slice(2);function jc(e){if(!e[Fc]){e[Fc]=!0,Ve.forEach((function(t){"selectionchange"!==t&&(Oc.has(t)||Dc(t,!1,e),Dc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fc]||(t[Fc]=!0,Dc("selectionchange",!1,t))}}function Mc(e,t,n,r){switch(id(t)){case 2:var o=td;break;case 8:o=nd;break;default:o=rd}n=o.bind(null,t,n,e),o=void 0,!Ft||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Wc(e,t,n,r,o){var l=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&a.stateNode.containerInfo===o)return;a=a.return}for(;null!==u;){if(null===(a=Me(u)))return;if(5===(s=a.tag)||6===s||26===s||27===s){r=l=a;continue e}u=u.parentNode}}r=r.return}Lt((function(){var r=l,o=Bt(n),a=[];e:{var u=vr.get(e);if(void 0!==u){var s=Zt,c=e;switch(e){case"keypress":if(0===$t(n))break e;case"keydown":case"keyup":s=mn;break;case"focusin":c="focus",s=on;break;case"focusout":c="blur",s=on;break;case"beforeblur":case"afterblur":s=on;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=gn;break;case dr:case pr:case mr:s=ln;break;case br:s=yn;break;case"scroll":case"scrollend":s=en;break;case"wheel":s=bn;break;case"copy":case"cut":case"paste":s=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=hn;break;case"toggle":case"beforetoggle":s=vn}var f=!!(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==u?u+"Capture":null:u;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=Rt(h,p))&&f.push(Uc(h,g,m)),d)break;h=h.return}0<f.length&&(u=new s(u,c,null,n,o),a.push({event:u,listeners:f}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===Nt||!(c=n.relatedTarget||n.fromElement)||!Me(c)&&!c[ze])&&(s||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?Me(c):null)&&(d=i(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(s=null,c=r),s!==c)){if(f=nn,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(f=hn,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==s?u:Ue(s),m=null==c?u:Ue(c),(u=new f(g,h+"leave",s,n,o)).target=d,u.relatedTarget=m,g=null,Me(o)===r&&((f=new f(p,h+"enter",c,n,o)).target=m,f.relatedTarget=d,g=f),d=g,s&&c)e:{for(p=c,h=0,m=f=s;m;m=$c(m))h++;for(m=0,g=p;g;g=$c(g))m++;for(;0<h-m;)f=$c(f),h--;for(;0<m-h;)p=$c(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break e;f=$c(f),p=$c(p)}f=null}else f=null;null!==s&&Vc(a,u,s,f,!1),null!==c&&null!==d&&Vc(a,d,c,f,!0)}if("select"===(s=(u=r?Ue(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===s&&"file"===u.type)var y=Dn;else if(In(u))if(Fn)y=Qn;else{y=Vn;var b=$n}else!(s=u.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==u.type&&"radio"!==u.type?r&&Ct(r.elementType)&&(y=Dn):y=qn;switch(y&&(y=y(e,r))?Tn(a,y,n,o):(b&&b(e,u,r),"focusout"===e&&r&&"number"===u.type&&null!=r.memoizedProps.value&&yt(u,"number",u.value)),b=r?Ue(r):window,e){case"focusin":(In(b)||"true"===b.contentEditable)&&(nr=b,rr=r,or=null);break;case"focusout":or=rr=nr=null;break;case"mousedown":lr=!0;break;case"contextmenu":case"mouseup":case"dragend":lr=!1,ar(a,n,o);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":ar(a,n,o)}var v;if(wn)e:{switch(e){case"compositionstart":var A="onCompositionStart";break e;case"compositionend":A="onCompositionEnd";break e;case"compositionupdate":A="onCompositionUpdate";break e}A=void 0}else Nn?_n(e,n)&&(A="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(A="onCompositionStart");A&&(Sn&&"ko"!==n.locale&&(Nn||"onCompositionStart"!==A?"onCompositionEnd"===A&&Nn&&(v=Ht()):(Wt="value"in(Mt=o)?Mt.value:Mt.textContent,Nn=!0)),0<(b=Hc(r,A)).length&&(A=new un(A,e,null,n,o),a.push({event:A,listeners:b}),(v||null!==(v=Pn(n)))&&(A.data=v))),(v=xn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(En=!0,Cn);case"textInput":return(e=t.data)===Cn&&En?null:e;default:return null}}(e,n):function(e,t){if(Nn)return"compositionend"===e||!wn&&_n(e,t)?(e=Ht(),Ut=Wt=Mt=null,Nn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(A=Hc(r,"onBeforeInput")).length&&(b=new un("onBeforeInput","beforeinput",null,n,o),a.push({event:b,listeners:A}),b.data=v),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var l=Nc((o[Te]||null).action),a=r.submitter;a&&null!==(t=(t=a[Te]||null)?Nc(t.formAction):a.getAttribute("formAction"))&&(l=t,a=null);var i=new Zt("action","action",null,r,o);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==Ac){var e=a?Bc(o,a):new FormData(o);Ba(n,{pending:!0,data:e,method:o.method,action:l},null,e)}}else"function"==typeof l&&(i.preventDefault(),e=a?Bc(o,a):new FormData(o),Ba(n,{pending:!0,data:e,method:o.method,action:l},l,e))},currentTarget:o}]})}}(a,e,r,n,o)}Lc(a,t)}))}function Uc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hc(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,l=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===l||(null!=(o=Rt(e,n))&&r.unshift(Uc(e,o,l)),null!=(o=Rt(e,t))&&r.push(Uc(e,o,l))),3===e.tag)return r;e=e.return}return[]}function $c(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Vc(e,t,n,r,o){for(var l=t._reactName,a=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,o?null!=(s=Rt(n,l))&&a.unshift(Uc(n,s,u)):o||null!=(s=Rt(n,l))&&a.push(Uc(n,s,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var qc=/\r\n?/g,Qc=/\u0000|\uFFFD/g;function Yc(e){return("string"==typeof e?e:""+e).replace(qc,"\n").replace(Qc,"")}function Xc(e,t){return t=Yc(t),Yc(e)===t}function Kc(){}function Gc(e,t,n,r,o,l){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":tt(e,"class",r);break;case"tabIndex":tt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":tt(e,n,r);break;case"style":St(e,r,l);break;case"data":if("object"!==t){tt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof l&&("formAction"===n?("input"!==t&&Gc(e,t,"name",o.name,o,null),Gc(e,t,"formEncType",o.formEncType,o,null),Gc(e,t,"formMethod",o.formMethod,o,null),Gc(e,t,"formTarget",o.formTarget,o,null)):(Gc(e,t,"encType",o.encType,o,null),Gc(e,t,"method",o.method,o,null),Gc(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Kc);break;case"onScroll":null!=r&&Rc("scroll",e);break;case"onScrollEnd":null!=r&&Rc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(a(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(a(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Rc("beforetoggle",e),Rc("toggle",e),et(e,"popover",r);break;case"xlinkActuate":nt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":nt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":nt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":nt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":nt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":nt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":nt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":nt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":nt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":et(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&et(e,n=Et.get(n)||n,r)}}function Zc(e,t,n,r,o,l){switch(n){case"style":St(e,r,l);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(a(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(a(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Rc("scroll",e);break;case"onScrollEnd":null!=r&&Rc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Kc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:qe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(l=null!=(l=e[Te]||null)?l[n]:null)&&e.removeEventListener(t,l,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):et(e,n,r):("function"!=typeof l&&null!==l&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o)))}}function Jc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Rc("error",e),Rc("load",e);var r,o=!1,l=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":o=!0;break;case"srcSet":l=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(a(137,t));default:Gc(e,t,r,i,n,null)}}return l&&Gc(e,t,"srcSet",n.srcSet,n,null),void(o&&Gc(e,t,"src",n.src,n,null));case"input":Rc("invalid",e);var u=r=i=l=null,s=null,c=null;for(o in n)if(n.hasOwnProperty(o)){var f=n[o];if(null!=f)switch(o){case"name":l=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(a(137,t));break;default:Gc(e,t,o,f,n,null)}}return gt(e,r,u,s,c,i,l,!1),void ct(e);case"select":for(l in Rc("invalid",e),o=i=r=null,n)if(n.hasOwnProperty(l)&&null!=(u=n[l]))switch(l){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":o=u;default:Gc(e,t,l,u,n,null)}return t=r,n=i,e.multiple=!!o,void(null!=t?bt(e,!!o,t,!1):null!=n&&bt(e,!!o,n,!0));case"textarea":for(i in Rc("invalid",e),r=l=o=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":o=u;break;case"defaultValue":l=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(a(91));break;default:Gc(e,t,i,u,n,null)}return At(e,o,l,r),void ct(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(o=n[s])&&("selected"===s?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Gc(e,t,s,o,n,null));return;case"dialog":Rc("beforetoggle",e),Rc("toggle",e),Rc("cancel",e),Rc("close",e);break;case"iframe":case"object":Rc("load",e);break;case"video":case"audio":for(o=0;o<zc.length;o++)Rc(zc[o],e);break;case"image":Rc("error",e),Rc("load",e);break;case"details":Rc("toggle",e);break;case"embed":case"source":case"link":Rc("error",e),Rc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(o=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(a(137,t));default:Gc(e,t,c,o,n,null)}return;default:if(Ct(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(o=n[f])&&Zc(e,t,f,o,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(o=n[u])&&Gc(e,t,u,o,n,null)}var ef=null,tf=null;function nf(e){return 9===e.nodeType?e:e.ownerDocument}function rf(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function of(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function lf(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var af=null,uf="function"==typeof setTimeout?setTimeout:void 0,sf="function"==typeof clearTimeout?clearTimeout:void 0,cf="function"==typeof Promise?Promise:void 0,ff="function"==typeof queueMicrotask?queueMicrotask:void 0!==cf?function(e){return cf.resolve(null).then(e).catch(df)}:uf;function df(e){setTimeout((function(){throw e}))}function pf(e){return"head"===e}function mf(e,t){var n=t,r=0,o=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&8===l.nodeType)if("/$"===(n=l.data)){if(0<r&&8>r){n=r;var a=e.ownerDocument;if(1&n&&wf(a.documentElement),2&n&&wf(a.body),4&n)for(wf(n=a.head),a=n.firstChild;a;){var i=a.nextSibling,u=a.nodeName;a[Fe]||"SCRIPT"===u||"STYLE"===u||"LINK"===u&&"stylesheet"===a.rel.toLowerCase()||n.removeChild(a),a=i}}if(0===o)return e.removeChild(l),void Cd(t);o--}else"$"===n||"$?"===n||"$!"===n?o++:r=n.charCodeAt(0)-48;else r=0;n=l}while(n);Cd(t)}function hf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":hf(n),je(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function gf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function yf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var bf=null;function vf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function Af(e,t,n){switch(t=nf(n),e){case"html":if(!(e=t.documentElement))throw Error(a(452));return e;case"head":if(!(e=t.head))throw Error(a(453));return e;case"body":if(!(e=t.body))throw Error(a(454));return e;default:throw Error(a(451))}}function wf(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);je(e)}var kf=new Map,xf=new Set;function Sf(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Cf=O.d;O.d={f:function(){var e=Cf.f(),t=Ms();return e||t},r:function(e){var t=We(e);null!==t&&5===t.tag&&"form"===t.type?Ta(t):Cf.r(e)},D:function(e){Cf.D(e),_f("dns-prefetch",e,null)},C:function(e,t){Cf.C(e,t),_f("preconnect",e,t)},L:function(e,t,n){Cf.L(e,t,n);var r=Ef;if(r&&e&&t){var o='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+mt(n.imageSizes)+'"]')):o+='[href="'+mt(e)+'"]';var l=o;switch(t){case"style":l=Nf(e);break;case"script":l=Tf(e)}kf.has(l)||(e=f({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),kf.set(l,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(Bf(l))||"script"===t&&r.querySelector(zf(l))||(Jc(t=r.createElement("link"),"link",e),$e(t),r.head.appendChild(t)))}},m:function(e,t){Cf.m(e,t);var n=Ef;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',l=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":l=Tf(e)}if(!kf.has(l)&&(e=f({rel:"modulepreload",href:e},t),kf.set(l,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(zf(l)))return}Jc(r=n.createElement("link"),"link",e),$e(r),n.head.appendChild(r)}}},X:function(e,t){Cf.X(e,t);var n=Ef;if(n&&e){var r=He(n).hoistableScripts,o=Tf(e),l=r.get(o);l||((l=n.querySelector(zf(o)))||(e=f({src:e,async:!0},t),(t=kf.get(o))&&Df(e,t),$e(l=n.createElement("script")),Jc(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(o,l))}},S:function(e,t,n){Cf.S(e,t,n);var r=Ef;if(r&&e){var o=He(r).hoistableStyles,l=Nf(e);t=t||"default";var a=o.get(l);if(!a){var i={loading:0,preload:null};if(a=r.querySelector(Bf(l)))i.loading=5;else{e=f({rel:"stylesheet",href:e,"data-precedence":t},n),(n=kf.get(l))&&Rf(e,n);var u=a=r.createElement("link");$e(u),Jc(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Lf(a,t,r)}a={type:"stylesheet",instance:a,count:1,state:i},o.set(l,a)}}},M:function(e,t){Cf.M(e,t);var n=Ef;if(n&&e){var r=He(n).hoistableScripts,o=Tf(e),l=r.get(o);l||((l=n.querySelector(zf(o)))||(e=f({src:e,async:!0,type:"module"},t),(t=kf.get(o))&&Df(e,t),$e(l=n.createElement("script")),Jc(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(o,l))}}};var Ef="undefined"==typeof document?null:document;function _f(e,t,n){var r=Ef;if(r&&"string"==typeof t&&t){var o=mt(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),xf.has(o)||(xf.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(Jc(t=r.createElement("link"),"link",e),$e(t),r.head.appendChild(t)))}}function Pf(e,t,n,r){var o,l,i,u,s=(s=H.current)?Sf(s):null;if(!s)throw Error(a(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Nf(n.href),(r=(n=He(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Nf(n.href);var c=He(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(Bf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),kf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},kf.set(e,n),c||(o=s,l=e,i=n,u=f.state,o.querySelector('link[rel="preload"][as="style"]['+l+"]")?u.loading=1:(l=o.createElement("link"),u.preload=l,l.addEventListener("load",(function(){return u.loading|=1})),l.addEventListener("error",(function(){return u.loading|=2})),Jc(l,"link",i),$e(l),o.head.appendChild(l))))),t&&null===r)throw Error(a(528,""));return f}if(t&&null!==r)throw Error(a(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Tf(n),(r=(n=He(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(a(444,e))}}function Nf(e){return'href="'+mt(e)+'"'}function Bf(e){return'link[rel="stylesheet"]['+e+"]"}function If(e){return f({},e,{"data-precedence":e.precedence,precedence:null})}function Tf(e){return'[src="'+mt(e)+'"]'}function zf(e){return"script[async]"+e}function Of(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,$e(r),r;var o=f({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return $e(r=(e.ownerDocument||e).createElement("style")),Jc(r,"style",o),Lf(r,n.precedence,e),t.instance=r;case"stylesheet":o=Nf(n.href);var l=e.querySelector(Bf(o));if(l)return t.state.loading|=4,t.instance=l,$e(l),l;r=If(n),(o=kf.get(o))&&Rf(r,o),$e(l=(e.ownerDocument||e).createElement("link"));var i=l;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Jc(l,"link",r),t.state.loading|=4,Lf(l,n.precedence,e),t.instance=l;case"script":return l=Tf(n.src),(o=e.querySelector(zf(l)))?(t.instance=o,$e(o),o):(r=n,(o=kf.get(l))&&Df(r=f({},n),o),$e(o=(e=e.ownerDocument||e).createElement("script")),Jc(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error(a(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Lf(r,n.precedence,e));return t.instance}function Lf(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,l=o,a=0;a<r.length;a++){var i=r[a];if(i.dataset.precedence===t)l=i;else if(l!==o)break}l?l.parentNode.insertBefore(e,l.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Rf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Df(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Ff=null;function jf(e,t,n){if(null===Ff){var r=new Map,o=Ff=new Map;o.set(n,r)}else(r=(o=Ff).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var l=n[o];if(!(l[Fe]||l[Ie]||"link"===e&&"stylesheet"===l.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==l.namespaceURI){var a=l.getAttribute(t)||"";a=e+a;var i=r.get(a);i?i.push(l):r.set(a,[l])}}return r}function Mf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Wf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Uf=null;function Hf(){}function $f(){if(this.count--,0===this.count)if(this.stylesheets)qf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Vf=null;function qf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Vf=new Map,t.forEach(Qf,e),Vf=null,$f.call(e))}function Qf(e,t){if(!(4&t.state.loading)){var n=Vf.get(e);if(n)var r=n.get(null);else{n=new Map,Vf.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),l=0;l<o.length;l++){var a=o[l];"LINK"!==a.nodeName&&"not all"===a.getAttribute("media")||(n.set(a.dataset.precedence,a),r=a)}r&&n.set(null,r)}a=(o=t.instance).getAttribute("data-precedence"),(l=n.get(a)||r)===r&&n.set(null,o),n.set(a,o),this.count++,r=$f.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),l?l.parentNode.insertBefore(o,l.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=4}}var Yf={$$typeof:A,Provider:null,Consumer:null,_currentValue:L,_currentValue2:L,_threadCount:0};function Xf(e,t,n,r,o,l,a,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=xe(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=xe(0),this.hiddenUpdates=xe(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=l,this.onRecoverableError=a,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Kf(e,t,n,r,o,l){o=function(e){return e?e=zr:zr}(o),null===r.context?r.context=o:r.pendingContext=o,(r=ol(t)).payload={element:n},null!==(l=void 0===l?null:l)&&(r.callback=l),null!==(n=ll(e,r,t))&&(Ls(n,0,t),al(n,e,t))}function Gf(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Zf(e,t){Gf(e,t),(e=e.alternate)&&Gf(e,t)}function Jf(e){if(13===e.tag){var t=Br(e,67108864);null!==t&&Ls(t,0,67108864),Zf(e,67108864)}}var ed=!0;function td(e,t,n,r){var o=z.T;z.T=null;var l=O.p;try{O.p=2,rd(e,t,n,r)}finally{O.p=l,z.T=o}}function nd(e,t,n,r){var o=z.T;z.T=null;var l=O.p;try{O.p=8,rd(e,t,n,r)}finally{O.p=l,z.T=o}}function rd(e,t,n,r){if(ed){var o=od(r);if(null===o)Wc(e,t,r,ld,n),gd(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return sd=yd(sd,e,t,n,r,o),!0;case"dragenter":return cd=yd(cd,e,t,n,r,o),!0;case"mouseover":return fd=yd(fd,e,t,n,r,o),!0;case"pointerover":var l=o.pointerId;return dd.set(l,yd(dd.get(l)||null,e,t,n,r,o)),!0;case"gotpointercapture":return l=o.pointerId,pd.set(l,yd(pd.get(l)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(gd(e,r),4&t&&-1<hd.indexOf(e)){for(;null!==o;){var l=We(o);if(null!==l)switch(l.tag){case 3:if((l=l.stateNode).current.memoizedState.isDehydrated){var a=ye(l.pendingLanes);if(0!==a){var i=l;for(i.pendingLanes|=2,i.entangledLanes|=2;a;){var u=1<<31-de(a);i.entanglements[1]|=u,a&=~u}wc(l),!(6&ts)&&(ws=ee()+500,kc(0,!1))}}break;case 13:null!==(i=Br(l,2))&&Ls(i,0,2),Ms(),Zf(l,2)}if(null===(l=od(r))&&Wc(e,t,r,ld,n),l===o)break;o=l}null!==o&&r.stopPropagation()}else Wc(e,t,r,null,n)}}function od(e){return ad(e=Bt(e))}var ld=null;function ad(e){if(ld=null,null!==(e=Me(e))){var t=i(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=u(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return ld=e,null}function id(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(te()){case ne:return 2;case re:return 8;case oe:case le:return 32;case ae:return 268435456;default:return 32}default:return 32}}var ud=!1,sd=null,cd=null,fd=null,dd=new Map,pd=new Map,md=[],hd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function gd(e,t){switch(e){case"focusin":case"focusout":sd=null;break;case"dragenter":case"dragleave":cd=null;break;case"mouseover":case"mouseout":fd=null;break;case"pointerover":case"pointerout":dd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":pd.delete(t.pointerId)}}function yd(e,t,n,r,o,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[o]},null!==t&&null!==(t=We(t))&&Jf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function bd(e){var t=Me(e.target);if(null!==t){var n=i(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=u(n)))return e.blockedOn=t,void function(e){var t=O.p;try{return O.p=e,function(){if(13===n.tag){var e=zs();e=_e(e);var t=Br(n,e);null!==t&&Ls(t,0,e),Zf(n,e)}}()}finally{O.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=od(e.nativeEvent);if(null!==n)return null!==(t=We(n))&&Jf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Nt=r,n.target.dispatchEvent(r),Nt=null,t.shift()}return!0}function Ad(e,t,n){vd(e)&&n.delete(t)}function wd(){ud=!1,null!==sd&&vd(sd)&&(sd=null),null!==cd&&vd(cd)&&(cd=null),null!==fd&&vd(fd)&&(fd=null),dd.forEach(Ad),pd.forEach(Ad)}function kd(e,t){e.blockedOn===t&&(e.blockedOn=null,ud||(ud=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,wd)))}var xd=null;function Sd(e){xd!==e&&(xd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){xd===e&&(xd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===ad(r||n))continue;break}var l=We(n);null!==l&&(e.splice(t,3),t-=3,Ba(l,{pending:!0,data:o,method:n.method,action:r},r,o))}})))}function Cd(e){function t(t){return kd(t,e)}null!==sd&&kd(sd,e),null!==cd&&kd(cd,e),null!==fd&&kd(fd,e),dd.forEach(t),pd.forEach(t);for(var n=0;n<md.length;n++){var r=md[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<md.length&&null===(n=md[0]).blockedOn;)bd(n),null===n.blockedOn&&md.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],l=n[r+1],a=o[Te]||null;if("function"==typeof l)a||Sd(n);else if(a){var i=null;if(l&&l.hasAttribute("formAction")){if(o=l,a=l[Te]||null)i=a.formAction;else if(null!==ad(o))continue}else i=a.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),Sd(n)}}}function Ed(e){this._internalRoot=e}function _d(e){this._internalRoot=e}_d.prototype.render=Ed.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Kf(t.current,zs(),e,t,null,null)},_d.prototype.unmount=Ed.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Kf(e.current,2,null,e,null,null),Ms(),t[ze]=null}},_d.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ne();e={blockedOn:null,target:e,priority:t};for(var n=0;n<md.length&&0!==t&&t<md[n].priority;n++);md.splice(n,0,e),0===n&&bd(e)}};var Pd=o.version;if("19.1.0"!==Pd)throw Error(a(527,Pd,"19.1.0"));O.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=i(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var l=o.alternate;if(null===l){if(null!==(r=o.return)){n=r;continue}break}if(o.child===l.child){for(l=o.child;l;){if(l===n)return s(o),e;if(l===r)return s(o),t;l=l.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=l;else{for(var u=!1,c=o.child;c;){if(c===n){u=!0,n=o,r=l;break}if(c===r){u=!0,r=o,n=l;break}c=c.sibling}if(!u){for(c=l.child;c;){if(c===n){u=!0,n=l,r=o;break}if(c===r){u=!0,r=l,n=o;break}c=c.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?c(e):null)?null:e.stateNode};var Nd={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:z,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Bd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Bd.isDisabled&&Bd.supportsFiber)try{se=Bd.inject(Nd),ce=Bd}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(a(299));var n,r=!1,o="",l=yi,i=bi,u=vi;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(o=t.identifierPrefix),void 0!==t.onUncaughtError&&(l=t.onUncaughtError),void 0!==t.onCaughtError&&(i=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,o,l,a,i,u,s,c,f){return e=new Xf(e,t,n,a,i,u,s,f),t=1,!0===l&&(t|=24),l=Lr(3,null,null,t),e.current=l,l.stateNode=e,(t=zo()).refCount++,e.pooledCache=t,t.refCount++,l.memoizedState={element:r,isDehydrated:n,cache:t},nl(l),e}(e,1,!1,null,0,r,o,l,i,u,0,null),e[ze]=t.current,jc(e),new Ed(t)}},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,l){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(a[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==l&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=l),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(o," */");return[t].concat([l]).join("\n")}return[t].join("\n")}},415:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(354),o=n.n(r),l=n(314),a=n.n(l)()(o());a.push([e.id,"/* Card styles */\n.fc-card {\n    border-radius: 0.5rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n/* CardHeader styles */\n.fc-card-header {\n    display: flex;\n    flex-direction: column;\n    gap: 0.375rem;\n    padding: 1.5rem;\n}\n\n/* CardTitle styles */\n.fc-card-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n    line-height: 1;\n    letter-spacing: -0.025em;\n}\n\n/* CardDescription styles */\n.fc-card-description {\n    font-size: 0.875rem;\n    color: #50575e; /* WordPress medium gray */\n}\n\n/* CardContent styles */\n.fc-card-content {\n    padding: 0.5rem;\n}\n\n/* CardFooter styles */\n.fc-card-footer {\n    display: flex;\n    align-items: center;\n    padding: 1.5rem;\n    padding-top: 0;\n}\n","",{version:3,sources:["webpack://./assets-src/js/components/ui/Card.css"],names:[],mappings:"AAAA,gBAAgB;AAChB;IACI,qBAAqB;IACrB,yBAAyB,EAAE,0BAA0B;IACrD,yBAAyB;IACzB,cAAc;IACd,2CAA2C;AAC/C;;AAEA,sBAAsB;AACtB;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,eAAe;AACnB;;AAEA,qBAAqB;AACrB;IACI,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;IACd,wBAAwB;AAC5B;;AAEA,2BAA2B;AAC3B;IACI,mBAAmB;IACnB,cAAc,EAAE,0BAA0B;AAC9C;;AAEA,uBAAuB;AACvB;IACI,eAAe;AACnB;;AAEA,sBAAsB;AACtB;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,cAAc;AAClB",sourcesContent:["/* Card styles */\n.fc-card {\n    border-radius: 0.5rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n/* CardHeader styles */\n.fc-card-header {\n    display: flex;\n    flex-direction: column;\n    gap: 0.375rem;\n    padding: 1.5rem;\n}\n\n/* CardTitle styles */\n.fc-card-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n    line-height: 1;\n    letter-spacing: -0.025em;\n}\n\n/* CardDescription styles */\n.fc-card-description {\n    font-size: 0.875rem;\n    color: #50575e; /* WordPress medium gray */\n}\n\n/* CardContent styles */\n.fc-card-content {\n    padding: 0.5rem;\n}\n\n/* CardFooter styles */\n.fc-card-footer {\n    display: flex;\n    align-items: center;\n    padding: 1.5rem;\n    padding-top: 0;\n}\n"],sourceRoot:""}]);const i=a},477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<l(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>l(u,n))s<o&&0>l(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<o&&0>l(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y=!1,b="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,A="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!h)if(null!==r(s))h=!0,S||(S=!0,x());else{var t=r(c);null!==t&&T(k,t.startTime-e)}}var x,S=!1,C=-1,E=5,_=-1;function P(){return!(!y&&t.unstable_now()-_<E)}function N(){if(y=!1,S){var e=t.unstable_now();_=e;var n=!0;try{e:{h=!1,g&&(g=!1,v(C),C=-1),m=!0;var l=p;try{t:{for(w(e),d=r(s);null!==d&&!(d.expirationTime>e&&P());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var i=a(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,w(e),n=!0;break t}d===r(s)&&o(s),w(e)}else o(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&T(k,u.startTime-e),n=!1}}break e}finally{d=null,p=l,m=!1}n=void 0}}finally{n?x():S=!1}}}if("function"==typeof A)x=function(){A(N)};else if("undefined"!=typeof MessageChannel){var B=new MessageChannel,I=B.port2;B.port1.onmessage=N,x=function(){I.postMessage(null)}}else x=function(){b(N,0)};function T(e,n){C=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){y=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,l){var a=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?a+l:a,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>a?(e.sortIndex=l,n(c,e),null===r(s)&&e===r(c)&&(g?(v(C),C=-1):g=!0,T(k,l-a))):(e.sortIndex=i,n(s,e),h||m||(h=!0,S||(S=!0,x()))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{"use strict";e.exports=n(869)},563:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(354),o=n.n(r),l=n(314),a=n.n(l)()(o());a.push([e.id,'/* General styles for the FileUpload component */\n.fc-file-upload-container {\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;\n}\n\n.fc-file-upload-header {\n    margin-bottom: 1.5rem;\n}\n\n.fc-file-upload-controls {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-label {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #2271b1;\n    color: #ffffff;\n    border-radius: 0.25rem;\n    cursor: pointer;\n    font-size: 0.8125rem;\n    font-weight: 400;\n    line-height: 1.5;\n    transition: background-color 0.15s ease-in-out;\n}\n\n.fc-file-upload-label:hover {\n    background-color: #135e96;\n}\n\n.fc-file-upload-label svg {\n    width: 1rem;\n    height: 1rem;\n}\n\n.fc-file-upload-disabled {\n    opacity: 0.7;\n    pointer-events: none;\n}\n\n.fc-file-upload-input-hidden {\n    display: none;\n}\n\n.fc-file-upload-info-text {\n    color: #50575e;\n    font-size: 0.875rem;\n}\n\n.fc-file-upload-table-container {\n    border: 1px solid #c3c4c7;\n    border-radius: 0.25rem;\n    overflow-x: auto;\n}\n\n.fc-file-upload-table {\n    width: 100%;\n    font-size: 0.875rem;\n    border-collapse: collapse;\n}\n\n.fc-file-upload-table th,\n.fc-file-upload-table td {\n    text-align: left;\n    padding: 0.75rem 1rem;\n    border-bottom: 1px solid #c3c4c7;\n}\n\n.fc-file-upload-table th {\n    background-color: #f0f0f1;\n    font-weight: 500;\n    color: #1d2327;\n}\n\n.fc-file-upload-table tbody tr:hover {\n    background-color: #f6f7f7;\n}\n\n.fc-file-upload-table td.text-center {\n    text-align: center;\n}\n\n.fc-file-upload-table .file-name-cell {\n    color: #1d2327;\n}\n\n.fc-file-upload-table .upload-date-cell {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-table .records-used-text {\n    font-weight: 500;\n}\n\n.fc-file-upload-table .records-used-text-full {\n    color: #d63638;\n}\n\n.fc-file-upload-table .records-used-text-partial {\n    color: #2271b1;\n}\n\n.fc-file-upload-table .records-used-text-none {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-badge {\n    font-size: 0.75rem;\n    background-color: #d63638;\n    color: #ffffff;\n    padding: 0.125rem 0.375rem;\n    border-radius: 0.25rem;\n}\n\n.fc-file-upload-table .actions-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n/* Specific button styling within the table if needed, otherwise .fc-button-ghost should cover it */\n\n.fc-file-upload-table .action-button svg {\n    margin-right: 0.25rem;\n}\n\n.fc-file-upload-tooltip-content p {\n    font-size: 0.75rem;\n    max-width: 20rem;\n}\n',"",{version:3,sources:["webpack://./assets-src/js/components/FileUpload.css"],names:[],mappings:"AAAA,gDAAgD;AAChD;IACI,gIAAgI;AACpI;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;IACnB,WAAW;IACX,oBAAoB;IACpB,yBAAyB;IACzB,cAAc;IACd,sBAAsB;IACtB,eAAe;IACf,oBAAoB;IACpB,gBAAgB;IAChB,gBAAgB;IAChB,8CAA8C;AAClD;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,yBAAyB;AAC7B;;AAEA;;IAEI,gBAAgB;IAChB,qBAAqB;IACrB,gCAAgC;AACpC;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,0BAA0B;IAC1B,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA,mGAAmG;;AAEnG;IACI,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB",sourcesContent:['/* General styles for the FileUpload component */\n.fc-file-upload-container {\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;\n}\n\n.fc-file-upload-header {\n    margin-bottom: 1.5rem;\n}\n\n.fc-file-upload-controls {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-label {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #2271b1;\n    color: #ffffff;\n    border-radius: 0.25rem;\n    cursor: pointer;\n    font-size: 0.8125rem;\n    font-weight: 400;\n    line-height: 1.5;\n    transition: background-color 0.15s ease-in-out;\n}\n\n.fc-file-upload-label:hover {\n    background-color: #135e96;\n}\n\n.fc-file-upload-label svg {\n    width: 1rem;\n    height: 1rem;\n}\n\n.fc-file-upload-disabled {\n    opacity: 0.7;\n    pointer-events: none;\n}\n\n.fc-file-upload-input-hidden {\n    display: none;\n}\n\n.fc-file-upload-info-text {\n    color: #50575e;\n    font-size: 0.875rem;\n}\n\n.fc-file-upload-table-container {\n    border: 1px solid #c3c4c7;\n    border-radius: 0.25rem;\n    overflow-x: auto;\n}\n\n.fc-file-upload-table {\n    width: 100%;\n    font-size: 0.875rem;\n    border-collapse: collapse;\n}\n\n.fc-file-upload-table th,\n.fc-file-upload-table td {\n    text-align: left;\n    padding: 0.75rem 1rem;\n    border-bottom: 1px solid #c3c4c7;\n}\n\n.fc-file-upload-table th {\n    background-color: #f0f0f1;\n    font-weight: 500;\n    color: #1d2327;\n}\n\n.fc-file-upload-table tbody tr:hover {\n    background-color: #f6f7f7;\n}\n\n.fc-file-upload-table td.text-center {\n    text-align: center;\n}\n\n.fc-file-upload-table .file-name-cell {\n    color: #1d2327;\n}\n\n.fc-file-upload-table .upload-date-cell {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-table .records-used-text {\n    font-weight: 500;\n}\n\n.fc-file-upload-table .records-used-text-full {\n    color: #d63638;\n}\n\n.fc-file-upload-table .records-used-text-partial {\n    color: #2271b1;\n}\n\n.fc-file-upload-table .records-used-text-none {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-badge {\n    font-size: 0.75rem;\n    background-color: #d63638;\n    color: #ffffff;\n    padding: 0.125rem 0.375rem;\n    border-radius: 0.25rem;\n}\n\n.fc-file-upload-table .actions-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n/* Specific button styling within the table if needed, otherwise .fc-button-ghost should cover it */\n\n.fc-file-upload-table .action-button svg {\n    margin-right: 0.25rem;\n}\n\n.fc-file-upload-tooltip-content p {\n    font-size: 0.75rem;\n    max-width: 20rem;\n}\n'],sourceRoot:""}]);const i=a},604:(e,t,n)=>{var r;!function(){"use strict";var o={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function l(e){return function(e,t){var n,r,a,i,u,s,c,f,d,p=1,m=e.length,h="";for(r=0;r<m;r++)if("string"==typeof e[r])h+=e[r];else if("object"==typeof e[r]){if((i=e[r]).keys)for(n=t[p],a=0;a<i.keys.length;a++){if(null==n)throw new Error(l('[sprintf] Cannot access property "%s" of undefined value "%s"',i.keys[a],i.keys[a-1]));n=n[i.keys[a]]}else n=i.param_no?t[i.param_no]:t[p++];if(o.not_type.test(i.type)&&o.not_primitive.test(i.type)&&n instanceof Function&&(n=n()),o.numeric_arg.test(i.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(l("[sprintf] expecting number but found %T",n));switch(o.number.test(i.type)&&(f=n>=0),i.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,i.width?parseInt(i.width):0);break;case"e":n=i.precision?parseFloat(n).toExponential(i.precision):parseFloat(n).toExponential();break;case"f":n=i.precision?parseFloat(n).toFixed(i.precision):parseFloat(n);break;case"g":n=i.precision?String(Number(n.toPrecision(i.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=i.precision?n.substring(0,i.precision):n;break;case"t":n=String(!!n),n=i.precision?n.substring(0,i.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=i.precision?n.substring(0,i.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=i.precision?n.substring(0,i.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}o.json.test(i.type)?h+=n:(!o.number.test(i.type)||f&&!i.sign?d="":(d=f?"+":"-",n=n.toString().replace(o.sign,"")),s=i.pad_char?"0"===i.pad_char?"0":i.pad_char.charAt(1):" ",c=i.width-(d+n).length,u=i.width&&c>0?s.repeat(c):"",h+=i.align?d+n+u:"0"===s?d+u+n:u+d+n)}return h}(function(e){if(i[e])return i[e];for(var t,n=e,r=[],l=0;n;){if(null!==(t=o.text.exec(n)))r.push(t[0]);else if(null!==(t=o.modulo.exec(n)))r.push("%");else{if(null===(t=o.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){l|=1;var a=[],u=t[2],s=[];if(null===(s=o.key.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(a.push(s[1]);""!==(u=u.substring(s[0].length));)if(null!==(s=o.key_access.exec(u)))a.push(s[1]);else{if(null===(s=o.index_access.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");a.push(s[1])}t[2]=a}else l|=2;if(3===l)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return i[e]=r}(e),arguments)}function a(e,t){return l.apply(null,[e].concat(t||[]))}var i=Object.create(null);"undefined"!=typeof window&&(window.sprintf=l,window.vsprintf=a,void 0===(r=function(){return{sprintf:l,vsprintf:a}}.call(t,n,t,e))||(e.exports=r))}()},659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},698:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function o(e,t,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==t.key&&(o=""+t.key),"key"in t)for(var l in r={},t)"key"!==l&&(r[l]=t[l]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:o,ref:void 0!==t?t:null,props:r}}t.Fragment=r,t.jsx=o,t.jsxs=o},781:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(354),o=n.n(r),l=n(314),a=n.n(l)()(o());a.push([e.id,"/* General button styles */\n.fc-button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    white-space: nowrap;\n    border-radius: 0.375rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n    cursor: pointer;\n    border: 1px solid transparent;\n}\n\n.fc-button:focus-visible {\n    outline: 2px solid #2271b1; /* WordPress blue */\n    outline-offset: 2px;\n}\n\n.fc-button:disabled {\n    pointer-events: none;\n    opacity: 0.5;\n}\n\n.fc-button svg {\n    pointer-events: none;\n    width: 1rem;\n    height: 1rem;\n    flex-shrink: 0;\n}\n\n/* Variants */\n.fc-button-default {\n    background-color: #2271b1; /* WordPress primary blue */\n    color: #ffffff;\n}\n\n.fc-button-default:hover {\n    background-color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-destructive {\n    background-color: #d63638; /* WordPress red */\n    color: #ffffff;\n}\n\n.fc-button-destructive:hover {\n    background-color: #b22222; /* Darker WordPress red */\n}\n\n.fc-button-outline {\n    border-color: #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-outline:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327;\n}\n\n.fc-button-secondary {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-secondary:hover {\n    background-color: #e0e0e0; /* Darker light gray */\n}\n\n.fc-button-ghost {\n    background-color: transparent;\n    color: #2271b1; /* WordPress blue */\n}\n\n.fc-button-ghost:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-link {\n    color: #2271b1; /* WordPress blue */\n    text-decoration: underline;\n    text-underline-offset: 4px;\n}\n\n.fc-button-link:hover {\n    text-decoration: none;\n}\n\n/* Sizes */\n.fc-button-size-default {\n    height: 2.5rem;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n}\n\n.fc-button-size-sm {\n    height: 2.25rem;\n    border-radius: 0.375rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n}\n\n.fc-button-size-lg {\n    height: 2.75rem;\n    border-radius: 0.375rem;\n    padding-left: 2rem;\n    padding-right: 2rem;\n}\n\n.fc-button-size-icon {\n    height: 2.5rem;\n    width: 2.5rem;\n}\n","",{version:3,sources:["webpack://./assets-src/js/components/ui/Button.css"],names:[],mappings:"AAAA,0BAA0B;AAC1B;IACI,oBAAoB;IACpB,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;IAChB,wJAAwJ;IACxJ,wDAAwD;IACxD,0BAA0B;IAC1B,eAAe;IACf,6BAA6B;AACjC;;AAEA;IACI,0BAA0B,EAAE,mBAAmB;IAC/C,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,YAAY;AAChB;;AAEA;IACI,oBAAoB;IACpB,WAAW;IACX,YAAY;IACZ,cAAc;AAClB;;AAEA,aAAa;AACb;IACI,yBAAyB,EAAE,2BAA2B;IACtD,cAAc;AAClB;;AAEA;IACI,yBAAyB,EAAE,0BAA0B;AACzD;;AAEA;IACI,yBAAyB,EAAE,kBAAkB;IAC7C,cAAc;AAClB;;AAEA;IACI,yBAAyB,EAAE,yBAAyB;AACxD;;AAEA;IACI,qBAAqB,EAAE,0BAA0B;IACjD,yBAAyB;IACzB,cAAc,EAAE,6BAA6B;AACjD;;AAEA;IACI,yBAAyB,EAAE,oCAAoC;IAC/D,cAAc;AAClB;;AAEA;IACI,yBAAyB,EAAE,oCAAoC;IAC/D,cAAc,EAAE,6BAA6B;AACjD;;AAEA;IACI,yBAAyB,EAAE,sBAAsB;AACrD;;AAEA;IACI,6BAA6B;IAC7B,cAAc,EAAE,mBAAmB;AACvC;;AAEA;IACI,yBAAyB,EAAE,oCAAoC;IAC/D,cAAc,EAAE,0BAA0B;AAC9C;;AAEA;IACI,cAAc,EAAE,mBAAmB;IACnC,0BAA0B;IAC1B,0BAA0B;AAC9B;;AAEA;IACI,qBAAqB;AACzB;;AAEA,UAAU;AACV;IACI,cAAc;IACd,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,uBAAuB;IACvB,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,aAAa;AACjB",sourcesContent:["/* General button styles */\n.fc-button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    white-space: nowrap;\n    border-radius: 0.375rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n    cursor: pointer;\n    border: 1px solid transparent;\n}\n\n.fc-button:focus-visible {\n    outline: 2px solid #2271b1; /* WordPress blue */\n    outline-offset: 2px;\n}\n\n.fc-button:disabled {\n    pointer-events: none;\n    opacity: 0.5;\n}\n\n.fc-button svg {\n    pointer-events: none;\n    width: 1rem;\n    height: 1rem;\n    flex-shrink: 0;\n}\n\n/* Variants */\n.fc-button-default {\n    background-color: #2271b1; /* WordPress primary blue */\n    color: #ffffff;\n}\n\n.fc-button-default:hover {\n    background-color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-destructive {\n    background-color: #d63638; /* WordPress red */\n    color: #ffffff;\n}\n\n.fc-button-destructive:hover {\n    background-color: #b22222; /* Darker WordPress red */\n}\n\n.fc-button-outline {\n    border-color: #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-outline:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327;\n}\n\n.fc-button-secondary {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-secondary:hover {\n    background-color: #e0e0e0; /* Darker light gray */\n}\n\n.fc-button-ghost {\n    background-color: transparent;\n    color: #2271b1; /* WordPress blue */\n}\n\n.fc-button-ghost:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-link {\n    color: #2271b1; /* WordPress blue */\n    text-decoration: underline;\n    text-underline-offset: 4px;\n}\n\n.fc-button-link:hover {\n    text-decoration: none;\n}\n\n/* Sizes */\n.fc-button-size-default {\n    height: 2.5rem;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n}\n\n.fc-button-size-sm {\n    height: 2.25rem;\n    border-radius: 0.375rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n}\n\n.fc-button-size-lg {\n    height: 2.75rem;\n    border-radius: 0.375rem;\n    padding-left: 2rem;\n    padding-right: 2rem;\n}\n\n.fc-button-size-icon {\n    height: 2.5rem;\n    width: 2.5rem;\n}\n"],sourceRoot:""}]);const i=a},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var l=n.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},848:(e,t,n)=>{"use strict";e.exports=n(698)},869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function b(){}function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var A=v.prototype=new b;A.constructor=v,h(A,y.prototype),A.isPureReactComponent=!0;var w=Array.isArray,k={H:null,A:null,T:null,S:null,V:null},x=Object.prototype.hasOwnProperty;function S(e,t,r,o,l,a){return r=a.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:a}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var E=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function P(){}function N(e,t,o,l,a){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return N((c=e._init)(e._payload),t,o,l,a)}}if(c)return a=a(e),c=""===l?"."+_(e,0):l,w(a)?(o="",null!=c&&(o=c.replace(E,"$&/")+"/"),N(a,t,o,"",(function(e){return e}))):null!=a&&(C(a)&&(u=a,s=o+(null==a.key||e&&e.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+c,a=S(u.type,s,void 0,0,0,u.props)),t.push(a)),1;c=0;var f,m=""===l?".":l+":";if(w(e))for(var h=0;h<e.length;h++)c+=N(l=e[h],t,o,i=m+_(l,h),a);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(l=e.next()).done;)c+=N(l=l.value,t,o,i=m+_(l,h++),a);else if("object"===i){if("function"==typeof e.then)return N(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(P,P):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,o,l,a);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function B(e,t,n){if(null==e)return e;var r=[],o=0;return N(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function I(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var T="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function z(){}t.Children={map:B,forEach:function(e,t,n){B(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return B(e,(function(){t++})),t},toArray:function(e){return B(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=a,t.PureComponent=v,t.StrictMode=l,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=k,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return k.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),o=e.key;if(null!=t)for(l in t.ref,void 0!==t.key&&(o=""+t.key),t)!x.call(t,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===t.ref||(r[l]=t[l]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var a=Array(l),i=0;i<l;i++)a[i]=arguments[i+2];r.children=a}return S(e.type,o,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,o={},l=null;if(null!=t)for(r in void 0!==t.key&&(l=""+t.key),t)x.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=t[r]);var a=arguments.length-2;if(1===a)o.children=n;else if(1<a){for(var i=Array(a),u=0;u<a;u++)i[u]=arguments[u+2];o.children=i}if(e&&e.defaultProps)for(r in a=e.defaultProps)void 0===o[r]&&(o[r]=a[r]);return S(e,l,void 0,0,0,o)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=k.T,n={};k.T=n;try{var r=e(),o=k.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(z,T)}catch(e){T(e)}finally{k.T=t}},t.unstable_useCacheRefresh=function(){return k.H.useCacheRefresh()},t.use=function(e){return k.H.use(e)},t.useActionState=function(e,t,n){return k.H.useActionState(e,t,n)},t.useCallback=function(e,t){return k.H.useCallback(e,t)},t.useContext=function(e){return k.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return k.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=k.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return k.H.useId()},t.useImperativeHandle=function(e,t,n){return k.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return k.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return k.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return k.H.useMemo(e,t)},t.useOptimistic=function(e,t){return k.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return k.H.useReducer(e,t,n)},t.useRef=function(e){return k.H.useRef(e)},t.useState=function(e){return k.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return k.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return k.H.useTransition()},t.version="19.1.0"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{"use strict";e.exports=n(477)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var l=r[e]={id:e,exports:{}};return n[e](l,l.exports,o),l.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var l=Object.create(null);o.r(l);var a={};e=e||[null,t({}),t([]),t(t)];for(var i=2&r&&n;"object"==typeof i&&!~e.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,o.d(l,a),l},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0,(()=>{"use strict";var e,t,n,r,l=o(848),a=o(540),i=o.t(a,2),u=o(338);o(604),function(e,t){t=t||{}}(console.error),e={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},t=["(","?"],n={")":["("],":":["?","?:"]},r=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/;var s={"!":function(e){return!e},"*":function(e,t){return e*t},"/":function(e,t){return e/t},"%":function(e,t){return e%t},"+":function(e,t){return e+t},"-":function(e,t){return e-t},"<":function(e,t){return e<t},"<=":function(e,t){return e<=t},">":function(e,t){return e>t},">=":function(e,t){return e>=t},"==":function(e,t){return e===t},"!=":function(e,t){return e!==t},"&&":function(e,t){return e&&t},"||":function(e,t){return e||t},"?:":function(e,t,n){if(e)throw t;return n}};var c={contextDelimiter:"",onMissingKey:null};function f(e,t){var n;for(n in this.data=e,this.pluralForms={},this.options={},c)this.options[n]=void 0!==t&&n in t?t[n]:c[n]}f.prototype.getPluralForm=function(o,l){var a,i,u,c,f=this.pluralForms[o];return f||("function"!=typeof(u=(a=this.data[o][""])["Plural-Forms"]||a["plural-forms"]||a.plural_forms)&&(i=function(e){var t,n,r;for(t=e.split(";"),n=0;n<t.length;n++)if(0===(r=t[n].trim()).indexOf("plural="))return r.substr(7)}(a["Plural-Forms"]||a["plural-forms"]||a.plural_forms),c=function(o){var l=function(o){for(var l,a,i,u,s=[],c=[];l=o.match(r);){for(a=l[0],(i=o.substr(0,l.index).trim())&&s.push(i);u=c.pop();){if(n[a]){if(n[a][0]===u){a=n[a][1]||a;break}}else if(t.indexOf(u)>=0||e[u]<e[a]){c.push(u);break}s.push(u)}n[a]||c.push(a),o=o.substr(l.index+a.length)}return(o=o.trim())&&s.push(o),s.concat(c.reverse())}(o);return function(e){return function(e,t){var n,r,o,l,a,i,u=[];for(n=0;n<e.length;n++){if(a=e[n],l=s[a]){for(r=l.length,o=Array(r);r--;)o[r]=u.pop();try{i=l.apply(null,o)}catch(e){return e}}else i=t.hasOwnProperty(a)?t[a]:+a;u.push(i)}return u[0]}(l,e)}}(i),u=function(e){return+c({n:e})}),f=this.pluralForms[o]=u),f(l)},f.prototype.dcnpgettext=function(e,t,n,r,o){var l,a,i;return l=void 0===o?0:this.getPluralForm(e,o),a=n,t&&(a=t+this.options.contextDelimiter+n),(i=this.data[e][a])&&i[l]?i[l]:(this.options.onMissingKey&&this.options.onMissingKey(n,e),0===l?n:r)};const d={plural_forms:e=>1===e?0:1},p=/^i18n\.(n?gettext|has_translation)(_|$)/,m=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)},h=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)},g=function(e,t){return function(n,r,o,l=10){const a=e[t];if(!h(n))return;if(!m(r))return;if("function"!=typeof o)return void console.error("The hook callback must be a function.");if("number"!=typeof l)return void console.error("If specified, the hook priority must be a number.");const i={callback:o,priority:l,namespace:r};if(a[n]){const e=a[n].handlers;let t;for(t=e.length;t>0&&!(l>=e[t-1].priority);t--);t===e.length?e[t]=i:e.splice(t,0,i),a.__current.forEach((e=>{e.name===n&&e.currentIndex>=t&&e.currentIndex++}))}else a[n]={handlers:[i],runs:0};"hookAdded"!==n&&e.doAction("hookAdded",n,r,o,l)}},y=function(e,t,n=!1){return function(r,o){const l=e[t];if(!h(r))return;if(!n&&!m(o))return;if(!l[r])return 0;let a=0;if(n)a=l[r].handlers.length,l[r]={runs:l[r].runs,handlers:[]};else{const e=l[r].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===o&&(e.splice(t,1),a++,l.__current.forEach((e=>{e.name===r&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==r&&e.doAction("hookRemoved",r,o),a}},b=function(e,t){return function(n,r){const o=e[t];return void 0!==r?n in o&&o[n].handlers.some((e=>e.namespace===r)):n in o}},v=function(e,t,n,r){return function(o,...l){const a=e[t];a[o]||(a[o]={handlers:[],runs:0}),a[o].runs++;const i=a[o].handlers;if(!i||!i.length)return n?l[0]:void 0;const u={name:o,currentIndex:0};return(r?async function(){try{a.__current.add(u);let e=n?l[0]:void 0;for(;u.currentIndex<i.length;){const t=i[u.currentIndex];e=await t.callback.apply(null,l),n&&(l[0]=e),u.currentIndex++}return n?e:void 0}finally{a.__current.delete(u)}}:function(){try{a.__current.add(u);let e=n?l[0]:void 0;for(;u.currentIndex<i.length;)e=i[u.currentIndex].callback.apply(null,l),n&&(l[0]=e),u.currentIndex++;return n?e:void 0}finally{a.__current.delete(u)}})()}},A=function(e,t){return function(){var n;const r=e[t],o=Array.from(r.__current);return null!==(n=o.at(-1)?.name)&&void 0!==n?n:null}},w=function(e,t){return function(n){const r=e[t];return void 0===n?r.__current.size>0:Array.from(r.__current).some((e=>e.name===n))}},k=function(e,t){return function(n){const r=e[t];if(h(n))return r[n]&&r[n].runs?r[n].runs:0}};class x{constructor(){this.actions=Object.create(null),this.actions.__current=new Set,this.filters=Object.create(null),this.filters.__current=new Set,this.addAction=g(this,"actions"),this.addFilter=g(this,"filters"),this.removeAction=y(this,"actions"),this.removeFilter=y(this,"filters"),this.hasAction=b(this,"actions"),this.hasFilter=b(this,"filters"),this.removeAllActions=y(this,"actions",!0),this.removeAllFilters=y(this,"filters",!0),this.doAction=v(this,"actions",!1,!1),this.doActionAsync=v(this,"actions",!1,!0),this.applyFilters=v(this,"filters",!0,!1),this.applyFiltersAsync=v(this,"filters",!0,!0),this.currentAction=A(this,"actions"),this.currentFilter=A(this,"filters"),this.doingAction=w(this,"actions"),this.doingFilter=w(this,"filters"),this.didAction=k(this,"actions"),this.didFilter=k(this,"filters")}}const S=new x,{addAction:C,addFilter:E,removeAction:_,removeFilter:P,hasAction:N,hasFilter:B,removeAllActions:I,removeAllFilters:T,doAction:z,doActionAsync:O,applyFilters:L,applyFiltersAsync:R,currentAction:D,currentFilter:F,doingAction:j,doingFilter:M,didAction:W,didFilter:U,actions:H,filters:$}=S,V=((e,t,n)=>{const r=new f({}),o=new Set,l=()=>{o.forEach((e=>e()))},a=(e,t="default")=>{r.data[t]={...r.data[t],...e},r.data[t][""]={...d,...r.data[t]?.[""]},delete r.pluralForms[t]},i=(e,t)=>{a(e,t),l()},u=(e="default",t,n,o,l)=>(r.data[e]||a(void 0,e),r.dcnpgettext(e,t,n,o,l)),s=(e="default")=>e,c=(e,t,r)=>{let o=u(r,t,e);return n?(o=n.applyFilters("i18n.gettext_with_context",o,e,t,r),n.applyFilters("i18n.gettext_with_context_"+s(r),o,e,t,r)):o};if(n){const e=e=>{p.test(e)&&l()};n.addAction("hookAdded","core/i18n",e),n.addAction("hookRemoved","core/i18n",e)}return{getLocaleData:(e="default")=>r.data[e],setLocaleData:i,addLocaleData:(e,t="default")=>{r.data[t]={...r.data[t],...e,"":{...d,...r.data[t]?.[""],...e?.[""]}},delete r.pluralForms[t],l()},resetLocaleData:(e,t)=>{r.data={},r.pluralForms={},i(e,t)},subscribe:e=>(o.add(e),()=>o.delete(e)),__:(e,t)=>{let r=u(t,void 0,e);return n?(r=n.applyFilters("i18n.gettext",r,e,t),n.applyFilters("i18n.gettext_"+s(t),r,e,t)):r},_x:c,_n:(e,t,r,o)=>{let l=u(o,void 0,e,t,r);return n?(l=n.applyFilters("i18n.ngettext",l,e,t,r,o),n.applyFilters("i18n.ngettext_"+s(o),l,e,t,r,o)):l},_nx:(e,t,r,o,l)=>{let a=u(l,o,e,t,r);return n?(a=n.applyFilters("i18n.ngettext_with_context",a,e,t,r,o,l),n.applyFilters("i18n.ngettext_with_context_"+s(l),a,e,t,r,o,l)):a},isRTL:()=>"rtl"===c("ltr","text direction"),hasTranslation:(e,t,o)=>{const l=t?t+""+e:e;let a=!!r.data?.[null!=o?o:"default"]?.[l];return n&&(a=n.applyFilters("i18n.has_translation",a,e,t,o),a=n.applyFilters("i18n.has_translation_"+s(o),a,e,t,o)),a}}})(0,0,S),q=(V.getLocaleData.bind(V),V.setLocaleData.bind(V),V.resetLocaleData.bind(V),V.subscribe.bind(V),V.__.bind(V)),Q=(V._x.bind(V),V._n.bind(V),V._nx.bind(V),V.isRTL.bind(V),V.hasTranslation.bind(V),e=>{const t=(e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,((e,t,n)=>n?n.toUpperCase():t.toLowerCase())))(e);return t.charAt(0).toUpperCase()+t.slice(1)}),Y=(...e)=>e.filter(((e,t,n)=>Boolean(e)&&""!==e.trim()&&n.indexOf(e)===t)).join(" ").trim(),X=e=>{for(const t in e)if(t.startsWith("aria-")||"role"===t||"title"===t)return!0};var K={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const G=(0,a.forwardRef)((({color:e="currentColor",size:t=24,strokeWidth:n=2,absoluteStrokeWidth:r,className:o="",children:l,iconNode:i,...u},s)=>(0,a.createElement)("svg",{ref:s,...K,width:t,height:t,stroke:e,strokeWidth:r?24*Number(n)/Number(t):n,className:Y("lucide",o),...!l&&!X(u)&&{"aria-hidden":"true"},...u},[...i.map((([e,t])=>(0,a.createElement)(e,t))),...Array.isArray(l)?l:[l]]))),Z=(e,t)=>{const n=(0,a.forwardRef)((({className:n,...r},o)=>{return(0,a.createElement)(G,{ref:o,iconNode:t,className:Y(`lucide-${l=Q(e),l.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${e}`,n),...r});var l}));return n.displayName=Q(e),n},J=Z("upload",[["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["polyline",{points:"17 8 12 3 7 8",key:"t8dd8p"}],["line",{x1:"12",x2:"12",y1:"3",y2:"15",key:"widbto"}]]),ee=Z("refresh-cw",[["path",{d:"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",key:"v9h5vc"}],["path",{d:"M21 3v5h-5",key:"1q7to0"}],["path",{d:"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",key:"3uifl3"}],["path",{d:"M8 16H3v5",key:"1cv678"}]]),te=Z("trash-2",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}],["line",{x1:"10",x2:"10",y1:"11",y2:"17",key:"1uufr5"}],["line",{x1:"14",x2:"14",y1:"11",y2:"17",key:"xtxkd"}]]);function ne(e,t){if("function"==typeof e)return e(t);null!=e&&(e.current=t)}function re(...e){return t=>{let n=!1;const r=e.map((e=>{const r=ne(e,t);return n||"function"!=typeof r||(n=!0),r}));if(n)return()=>{for(let t=0;t<r.length;t++){const n=r[t];"function"==typeof n?n():ne(e[t],null)}}}}function oe(...e){return a.useCallback(re(...e),e)}function le(e){const t=ie(e),n=a.forwardRef(((e,n)=>{const{children:r,...o}=e,i=a.Children.toArray(r),u=i.find(se);if(u){const e=u.props.children,r=i.map((t=>t===u?a.Children.count(e)>1?a.Children.only(null):a.isValidElement(e)?e.props.children:null:t));return(0,l.jsx)(t,{...o,ref:n,children:a.isValidElement(e)?a.cloneElement(e,void 0,r):null})}return(0,l.jsx)(t,{...o,ref:n,children:r})}));return n.displayName=`${e}.Slot`,n}var ae=le("Slot");function ie(e){const t=a.forwardRef(((e,t)=>{const{children:n,...r}=e;if(a.isValidElement(n)){const e=function(e){let t=Object.getOwnPropertyDescriptor(e.props,"ref")?.get,n=t&&"isReactWarning"in t&&t.isReactWarning;return n?e.ref:(t=Object.getOwnPropertyDescriptor(e,"ref")?.get,n=t&&"isReactWarning"in t&&t.isReactWarning,n?e.props.ref:e.props.ref||e.ref)}(n),o=function(e,t){const n={...t};for(const r in t){const o=e[r],l=t[r];/^on[A-Z]/.test(r)?o&&l?n[r]=(...e)=>{l(...e),o(...e)}:o&&(n[r]=o):"style"===r?n[r]={...o,...l}:"className"===r&&(n[r]=[o,l].filter(Boolean).join(" "))}return{...e,...n}}(r,n.props);return n.type!==a.Fragment&&(o.ref=t?re(t,e):e),a.cloneElement(n,o)}return a.Children.count(n)>1?a.Children.only(null):null}));return t.displayName=`${e}.SlotClone`,t}var ue=Symbol("radix.slottable");function se(e){return a.isValidElement(e)&&"function"==typeof e.type&&"__radixId"in e.type&&e.type.__radixId===ue}var ce=o(72),fe=o.n(ce),de=o(825),pe=o.n(de),me=o(659),he=o.n(me),ge=o(56),ye=o.n(ge),be=o(159),ve=o.n(be),Ae=o(113),we=o.n(Ae),ke=o(781),xe={};xe.styleTagTransform=we(),xe.setAttributes=ye(),xe.insert=he().bind(null,"head"),xe.domAPI=pe(),xe.insertStyleElement=ve(),fe()(ke.A,xe),ke.A&&ke.A.locals&&ke.A.locals;const Se=({variant:e,size:t,className:n})=>{const r=["fc-button"];return e?r.push(`fc-button-${e}`):r.push("fc-button-default"),t?r.push(`fc-button-size-${t}`):r.push("fc-button-size-default"),n&&r.push(n),r.join(" ")},Ce=a.forwardRef(((e,t)=>{var{className:n,variant:r,size:o,asChild:a=!1}=e,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["className","variant","size","asChild"]);const u=a?ae:"button";return(0,l.jsx)(u,Object.assign({className:Se({variant:r,size:o,className:n}),ref:t},i))}));var Ee=o(415),_e={};_e.styleTagTransform=we(),_e.setAttributes=ye(),_e.insert=he().bind(null,"head"),_e.domAPI=pe(),_e.insertStyleElement=ve(),fe()(Ee.A,_e),Ee.A&&Ee.A.locals&&Ee.A.locals;var Pe=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};const Ne=(e,t)=>t?`${e} ${t}`:e,Be=a.forwardRef(((e,t)=>{var{className:n}=e,r=Pe(e,["className"]);return(0,l.jsx)("div",Object.assign({ref:t,className:Ne("fc-card",n)},r))})),Ie=(a.forwardRef(((e,t)=>{var{className:n}=e,r=Pe(e,["className"]);return(0,l.jsx)("div",Object.assign({ref:t,className:Ne("fc-card-header",n)},r))})),a.forwardRef(((e,t)=>{var{className:n}=e,r=Pe(e,["className"]);return(0,l.jsx)("div",Object.assign({ref:t,className:Ne("fc-card-title",n)},r))})),a.forwardRef(((e,t)=>{var{className:n}=e,r=Pe(e,["className"]);return(0,l.jsx)("div",Object.assign({ref:t,className:Ne("fc-card-description",n)},r))})),a.forwardRef(((e,t)=>{var{className:n}=e,r=Pe(e,["className"]);return(0,l.jsx)("div",Object.assign({ref:t,className:Ne("fc-card-content",n)},r))})));function Te(e,t,{checkForDefaultPrevented:n=!0}={}){return function(r){if(e?.(r),!1===n||!r.defaultPrevented)return t?.(r)}}function ze(e,t=[]){let n=[];const r=()=>{const t=n.map((e=>a.createContext(e)));return function(n){const r=n?.[e]||t;return a.useMemo((()=>({[`__scope${e}`]:{...n,[e]:r}})),[n,r])}};return r.scopeName=e,[function(t,r){const o=a.createContext(r),i=n.length;n=[...n,r];const u=t=>{const{scope:n,children:r,...u}=t,s=n?.[e]?.[i]||o,c=a.useMemo((()=>u),Object.values(u));return(0,l.jsx)(s.Provider,{value:c,children:r})};return u.displayName=t+"Provider",[u,function(n,l){const u=l?.[e]?.[i]||o,s=a.useContext(u);if(s)return s;if(void 0!==r)return r;throw new Error(`\`${n}\` must be used within \`${t}\``)}]},Oe(r,...t)]}function Oe(...e){const t=e[0];if(1===e.length)return t;const n=()=>{const n=e.map((e=>({useScope:e(),scopeName:e.scopeName})));return function(e){const r=n.reduce(((t,{useScope:n,scopeName:r})=>({...t,...n(e)[`__scope${r}`]})),{});return a.useMemo((()=>({[`__scope${t.scopeName}`]:r})),[r])}};return n.scopeName=t.scopeName,n}a.forwardRef(((e,t)=>{var{className:n}=e,r=Pe(e,["className"]);return(0,l.jsx)("div",Object.assign({ref:t,className:Ne("fc-card-footer",n)},r))}));var Le=o(961),Re=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","select","span","svg","ul"].reduce(((e,t)=>{const n=le(`Primitive.${t}`),r=a.forwardRef(((e,r)=>{const{asChild:o,...a}=e,i=o?n:t;return"undefined"!=typeof window&&(window[Symbol.for("radix-ui")]=!0),(0,l.jsx)(i,{...a,ref:r})}));return r.displayName=`Primitive.${t}`,{...e,[t]:r}}),{});function De(e){const t=a.useRef(e);return a.useEffect((()=>{t.current=e})),a.useMemo((()=>(...e)=>t.current?.(...e)),[])}var Fe,je="dismissableLayer.update",Me=a.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),We=a.forwardRef(((e,t)=>{const{disableOutsidePointerEvents:n=!1,onEscapeKeyDown:r,onPointerDownOutside:o,onFocusOutside:i,onInteractOutside:u,onDismiss:s,...c}=e,f=a.useContext(Me),[d,p]=a.useState(null),m=d?.ownerDocument??globalThis?.document,[,h]=a.useState({}),g=oe(t,(e=>p(e))),y=Array.from(f.layers),[b]=[...f.layersWithOutsidePointerEventsDisabled].slice(-1),v=y.indexOf(b),A=d?y.indexOf(d):-1,w=f.layersWithOutsidePointerEventsDisabled.size>0,k=A>=v,x=function(e,t=globalThis?.document){const n=De(e),r=a.useRef(!1),o=a.useRef((()=>{}));return a.useEffect((()=>{const e=e=>{if(e.target&&!r.current){let r=function(){He("dismissableLayer.pointerDownOutside",n,l,{discrete:!0})};const l={originalEvent:e};"touch"===e.pointerType?(t.removeEventListener("click",o.current),o.current=r,t.addEventListener("click",o.current,{once:!0})):r()}else t.removeEventListener("click",o.current);r.current=!1},l=window.setTimeout((()=>{t.addEventListener("pointerdown",e)}),0);return()=>{window.clearTimeout(l),t.removeEventListener("pointerdown",e),t.removeEventListener("click",o.current)}}),[t,n]),{onPointerDownCapture:()=>r.current=!0}}((e=>{const t=e.target,n=[...f.branches].some((e=>e.contains(t)));k&&!n&&(o?.(e),u?.(e),e.defaultPrevented||s?.())}),m),S=function(e,t=globalThis?.document){const n=De(e),r=a.useRef(!1);return a.useEffect((()=>{const e=e=>{e.target&&!r.current&&He("dismissableLayer.focusOutside",n,{originalEvent:e},{discrete:!1})};return t.addEventListener("focusin",e),()=>t.removeEventListener("focusin",e)}),[t,n]),{onFocusCapture:()=>r.current=!0,onBlurCapture:()=>r.current=!1}}((e=>{const t=e.target;[...f.branches].some((e=>e.contains(t)))||(i?.(e),u?.(e),e.defaultPrevented||s?.())}),m);return function(e,t=globalThis?.document){const n=De(e);a.useEffect((()=>{const e=e=>{"Escape"===e.key&&n(e)};return t.addEventListener("keydown",e,{capture:!0}),()=>t.removeEventListener("keydown",e,{capture:!0})}),[n,t])}((e=>{A===f.layers.size-1&&(r?.(e),!e.defaultPrevented&&s&&(e.preventDefault(),s()))}),m),a.useEffect((()=>{if(d)return n&&(0===f.layersWithOutsidePointerEventsDisabled.size&&(Fe=m.body.style.pointerEvents,m.body.style.pointerEvents="none"),f.layersWithOutsidePointerEventsDisabled.add(d)),f.layers.add(d),Ue(),()=>{n&&1===f.layersWithOutsidePointerEventsDisabled.size&&(m.body.style.pointerEvents=Fe)}}),[d,m,n,f]),a.useEffect((()=>()=>{d&&(f.layers.delete(d),f.layersWithOutsidePointerEventsDisabled.delete(d),Ue())}),[d,f]),a.useEffect((()=>{const e=()=>h({});return document.addEventListener(je,e),()=>document.removeEventListener(je,e)}),[]),(0,l.jsx)(Re.div,{...c,ref:g,style:{pointerEvents:w?k?"auto":"none":void 0,...e.style},onFocusCapture:Te(e.onFocusCapture,S.onFocusCapture),onBlurCapture:Te(e.onBlurCapture,S.onBlurCapture),onPointerDownCapture:Te(e.onPointerDownCapture,x.onPointerDownCapture)})}));function Ue(){const e=new CustomEvent(je);document.dispatchEvent(e)}function He(e,t,n,{discrete:r}){const o=n.originalEvent.target,l=new CustomEvent(e,{bubbles:!1,cancelable:!0,detail:n});t&&o.addEventListener(e,t,{once:!0}),r?function(e,t){e&&Le.flushSync((()=>e.dispatchEvent(t)))}(o,l):o.dispatchEvent(l)}We.displayName="DismissableLayer",a.forwardRef(((e,t)=>{const n=a.useContext(Me),r=a.useRef(null),o=oe(t,r);return a.useEffect((()=>{const e=r.current;if(e)return n.branches.add(e),()=>{n.branches.delete(e)}}),[n.branches]),(0,l.jsx)(Re.div,{...e,ref:o})})).displayName="DismissableLayerBranch";var $e=globalThis?.document?a.useLayoutEffect:()=>{},Ve=i[" useId ".trim().toString()]||(()=>{}),qe=0;const Qe=["top","right","bottom","left"],Ye=Math.min,Xe=Math.max,Ke=Math.round,Ge=Math.floor,Ze=e=>({x:e,y:e}),Je={left:"right",right:"left",bottom:"top",top:"bottom"},et={start:"end",end:"start"};function tt(e,t,n){return Xe(e,Ye(t,n))}function nt(e,t){return"function"==typeof e?e(t):e}function rt(e){return e.split("-")[0]}function ot(e){return e.split("-")[1]}function lt(e){return"x"===e?"y":"x"}function at(e){return"y"===e?"height":"width"}function it(e){return["top","bottom"].includes(rt(e))?"y":"x"}function ut(e){return lt(it(e))}function st(e){return e.replace(/start|end/g,(e=>et[e]))}function ct(e){return e.replace(/left|right|bottom|top/g,(e=>Je[e]))}function ft(e){return"number"!=typeof e?function(e){return{top:0,right:0,bottom:0,left:0,...e}}(e):{top:e,right:e,bottom:e,left:e}}function dt(e){const{x:t,y:n,width:r,height:o}=e;return{width:r,height:o,top:n,left:t,right:t+r,bottom:n+o,x:t,y:n}}function pt(e,t,n){let{reference:r,floating:o}=e;const l=it(t),a=ut(t),i=at(a),u=rt(t),s="y"===l,c=r.x+r.width/2-o.width/2,f=r.y+r.height/2-o.height/2,d=r[i]/2-o[i]/2;let p;switch(u){case"top":p={x:c,y:r.y-o.height};break;case"bottom":p={x:c,y:r.y+r.height};break;case"right":p={x:r.x+r.width,y:f};break;case"left":p={x:r.x-o.width,y:f};break;default:p={x:r.x,y:r.y}}switch(ot(t)){case"start":p[a]-=d*(n&&s?-1:1);break;case"end":p[a]+=d*(n&&s?-1:1)}return p}async function mt(e,t){var n;void 0===t&&(t={});const{x:r,y:o,platform:l,rects:a,elements:i,strategy:u}=e,{boundary:s="clippingAncestors",rootBoundary:c="viewport",elementContext:f="floating",altBoundary:d=!1,padding:p=0}=nt(t,e),m=ft(p),h=i[d?"floating"===f?"reference":"floating":f],g=dt(await l.getClippingRect({element:null==(n=await(null==l.isElement?void 0:l.isElement(h)))||n?h:h.contextElement||await(null==l.getDocumentElement?void 0:l.getDocumentElement(i.floating)),boundary:s,rootBoundary:c,strategy:u})),y="floating"===f?{x:r,y:o,width:a.floating.width,height:a.floating.height}:a.reference,b=await(null==l.getOffsetParent?void 0:l.getOffsetParent(i.floating)),v=await(null==l.isElement?void 0:l.isElement(b))&&await(null==l.getScale?void 0:l.getScale(b))||{x:1,y:1},A=dt(l.convertOffsetParentRelativeRectToViewportRelativeRect?await l.convertOffsetParentRelativeRectToViewportRelativeRect({elements:i,rect:y,offsetParent:b,strategy:u}):y);return{top:(g.top-A.top+m.top)/v.y,bottom:(A.bottom-g.bottom+m.bottom)/v.y,left:(g.left-A.left+m.left)/v.x,right:(A.right-g.right+m.right)/v.x}}function ht(e,t){return{top:e.top-t.height,right:e.right-t.width,bottom:e.bottom-t.height,left:e.left-t.width}}function gt(e){return Qe.some((t=>e[t]>=0))}function yt(){return"undefined"!=typeof window}function bt(e){return wt(e)?(e.nodeName||"").toLowerCase():"#document"}function vt(e){var t;return(null==e||null==(t=e.ownerDocument)?void 0:t.defaultView)||window}function At(e){var t;return null==(t=(wt(e)?e.ownerDocument:e.document)||window.document)?void 0:t.documentElement}function wt(e){return!!yt()&&(e instanceof Node||e instanceof vt(e).Node)}function kt(e){return!!yt()&&(e instanceof Element||e instanceof vt(e).Element)}function xt(e){return!!yt()&&(e instanceof HTMLElement||e instanceof vt(e).HTMLElement)}function St(e){return!(!yt()||"undefined"==typeof ShadowRoot)&&(e instanceof ShadowRoot||e instanceof vt(e).ShadowRoot)}function Ct(e){const{overflow:t,overflowX:n,overflowY:r,display:o}=It(e);return/auto|scroll|overlay|hidden|clip/.test(t+r+n)&&!["inline","contents"].includes(o)}function Et(e){return["table","td","th"].includes(bt(e))}function _t(e){return[":popover-open",":modal"].some((t=>{try{return e.matches(t)}catch(e){return!1}}))}function Pt(e){const t=Nt(),n=kt(e)?It(e):e;return["transform","translate","scale","rotate","perspective"].some((e=>!!n[e]&&"none"!==n[e]))||!!n.containerType&&"normal"!==n.containerType||!t&&!!n.backdropFilter&&"none"!==n.backdropFilter||!t&&!!n.filter&&"none"!==n.filter||["transform","translate","scale","rotate","perspective","filter"].some((e=>(n.willChange||"").includes(e)))||["paint","layout","strict","content"].some((e=>(n.contain||"").includes(e)))}function Nt(){return!("undefined"==typeof CSS||!CSS.supports)&&CSS.supports("-webkit-backdrop-filter","none")}function Bt(e){return["html","body","#document"].includes(bt(e))}function It(e){return vt(e).getComputedStyle(e)}function Tt(e){return kt(e)?{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}:{scrollLeft:e.scrollX,scrollTop:e.scrollY}}function zt(e){if("html"===bt(e))return e;const t=e.assignedSlot||e.parentNode||St(e)&&e.host||At(e);return St(t)?t.host:t}function Ot(e){const t=zt(e);return Bt(t)?e.ownerDocument?e.ownerDocument.body:e.body:xt(t)&&Ct(t)?t:Ot(t)}function Lt(e,t,n){var r;void 0===t&&(t=[]),void 0===n&&(n=!0);const o=Ot(e),l=o===(null==(r=e.ownerDocument)?void 0:r.body),a=vt(o);if(l){const e=Rt(a);return t.concat(a,a.visualViewport||[],Ct(o)?o:[],e&&n?Lt(e):[])}return t.concat(o,Lt(o,[],n))}function Rt(e){return e.parent&&Object.getPrototypeOf(e.parent)?e.frameElement:null}function Dt(e){const t=It(e);let n=parseFloat(t.width)||0,r=parseFloat(t.height)||0;const o=xt(e),l=o?e.offsetWidth:n,a=o?e.offsetHeight:r,i=Ke(n)!==l||Ke(r)!==a;return i&&(n=l,r=a),{width:n,height:r,$:i}}function Ft(e){return kt(e)?e:e.contextElement}function jt(e){const t=Ft(e);if(!xt(t))return Ze(1);const n=t.getBoundingClientRect(),{width:r,height:o,$:l}=Dt(t);let a=(l?Ke(n.width):n.width)/r,i=(l?Ke(n.height):n.height)/o;return a&&Number.isFinite(a)||(a=1),i&&Number.isFinite(i)||(i=1),{x:a,y:i}}const Mt=Ze(0);function Wt(e){const t=vt(e);return Nt()&&t.visualViewport?{x:t.visualViewport.offsetLeft,y:t.visualViewport.offsetTop}:Mt}function Ut(e,t,n,r){void 0===t&&(t=!1),void 0===n&&(n=!1);const o=e.getBoundingClientRect(),l=Ft(e);let a=Ze(1);t&&(r?kt(r)&&(a=jt(r)):a=jt(e));const i=function(e,t,n){return void 0===t&&(t=!1),!(!n||t&&n!==vt(e))&&t}(l,n,r)?Wt(l):Ze(0);let u=(o.left+i.x)/a.x,s=(o.top+i.y)/a.y,c=o.width/a.x,f=o.height/a.y;if(l){const e=vt(l),t=r&&kt(r)?vt(r):r;let n=e,o=Rt(n);for(;o&&r&&t!==n;){const e=jt(o),t=o.getBoundingClientRect(),r=It(o),l=t.left+(o.clientLeft+parseFloat(r.paddingLeft))*e.x,a=t.top+(o.clientTop+parseFloat(r.paddingTop))*e.y;u*=e.x,s*=e.y,c*=e.x,f*=e.y,u+=l,s+=a,n=vt(o),o=Rt(n)}}return dt({width:c,height:f,x:u,y:s})}function Ht(e,t){const n=Tt(e).scrollLeft;return t?t.left+n:Ut(At(e)).left+n}function $t(e,t,n){void 0===n&&(n=!1);const r=e.getBoundingClientRect();return{x:r.left+t.scrollLeft-(n?0:Ht(e,r)),y:r.top+t.scrollTop}}function Vt(e,t,n){let r;if("viewport"===t)r=function(e,t){const n=vt(e),r=At(e),o=n.visualViewport;let l=r.clientWidth,a=r.clientHeight,i=0,u=0;if(o){l=o.width,a=o.height;const e=Nt();(!e||e&&"fixed"===t)&&(i=o.offsetLeft,u=o.offsetTop)}return{width:l,height:a,x:i,y:u}}(e,n);else if("document"===t)r=function(e){const t=At(e),n=Tt(e),r=e.ownerDocument.body,o=Xe(t.scrollWidth,t.clientWidth,r.scrollWidth,r.clientWidth),l=Xe(t.scrollHeight,t.clientHeight,r.scrollHeight,r.clientHeight);let a=-n.scrollLeft+Ht(e);const i=-n.scrollTop;return"rtl"===It(r).direction&&(a+=Xe(t.clientWidth,r.clientWidth)-o),{width:o,height:l,x:a,y:i}}(At(e));else if(kt(t))r=function(e,t){const n=Ut(e,!0,"fixed"===t),r=n.top+e.clientTop,o=n.left+e.clientLeft,l=xt(e)?jt(e):Ze(1);return{width:e.clientWidth*l.x,height:e.clientHeight*l.y,x:o*l.x,y:r*l.y}}(t,n);else{const n=Wt(e);r={x:t.x-n.x,y:t.y-n.y,width:t.width,height:t.height}}return dt(r)}function qt(e,t){const n=zt(e);return!(n===t||!kt(n)||Bt(n))&&("fixed"===It(n).position||qt(n,t))}function Qt(e,t,n){const r=xt(t),o=At(t),l="fixed"===n,a=Ut(e,!0,l,t);let i={scrollLeft:0,scrollTop:0};const u=Ze(0);if(r||!r&&!l)if(("body"!==bt(t)||Ct(o))&&(i=Tt(t)),r){const e=Ut(t,!0,l,t);u.x=e.x+t.clientLeft,u.y=e.y+t.clientTop}else o&&(u.x=Ht(o));const s=!o||r||l?Ze(0):$t(o,i);return{x:a.left+i.scrollLeft-u.x-s.x,y:a.top+i.scrollTop-u.y-s.y,width:a.width,height:a.height}}function Yt(e){return"static"===It(e).position}function Xt(e,t){if(!xt(e)||"fixed"===It(e).position)return null;if(t)return t(e);let n=e.offsetParent;return At(e)===n&&(n=n.ownerDocument.body),n}function Kt(e,t){const n=vt(e);if(_t(e))return n;if(!xt(e)){let t=zt(e);for(;t&&!Bt(t);){if(kt(t)&&!Yt(t))return t;t=zt(t)}return n}let r=Xt(e,t);for(;r&&Et(r)&&Yt(r);)r=Xt(r,t);return r&&Bt(r)&&Yt(r)&&!Pt(r)?n:r||function(e){let t=zt(e);for(;xt(t)&&!Bt(t);){if(Pt(t))return t;if(_t(t))return null;t=zt(t)}return null}(e)||n}const Gt={convertOffsetParentRelativeRectToViewportRelativeRect:function(e){let{elements:t,rect:n,offsetParent:r,strategy:o}=e;const l="fixed"===o,a=At(r),i=!!t&&_t(t.floating);if(r===a||i&&l)return n;let u={scrollLeft:0,scrollTop:0},s=Ze(1);const c=Ze(0),f=xt(r);if((f||!f&&!l)&&(("body"!==bt(r)||Ct(a))&&(u=Tt(r)),xt(r))){const e=Ut(r);s=jt(r),c.x=e.x+r.clientLeft,c.y=e.y+r.clientTop}const d=!a||f||l?Ze(0):$t(a,u,!0);return{width:n.width*s.x,height:n.height*s.y,x:n.x*s.x-u.scrollLeft*s.x+c.x+d.x,y:n.y*s.y-u.scrollTop*s.y+c.y+d.y}},getDocumentElement:At,getClippingRect:function(e){let{element:t,boundary:n,rootBoundary:r,strategy:o}=e;const l=[..."clippingAncestors"===n?_t(t)?[]:function(e,t){const n=t.get(e);if(n)return n;let r=Lt(e,[],!1).filter((e=>kt(e)&&"body"!==bt(e))),o=null;const l="fixed"===It(e).position;let a=l?zt(e):e;for(;kt(a)&&!Bt(a);){const t=It(a),n=Pt(a);n||"fixed"!==t.position||(o=null),(l?!n&&!o:!n&&"static"===t.position&&o&&["absolute","fixed"].includes(o.position)||Ct(a)&&!n&&qt(e,a))?r=r.filter((e=>e!==a)):o=t,a=zt(a)}return t.set(e,r),r}(t,this._c):[].concat(n),r],a=l[0],i=l.reduce(((e,n)=>{const r=Vt(t,n,o);return e.top=Xe(r.top,e.top),e.right=Ye(r.right,e.right),e.bottom=Ye(r.bottom,e.bottom),e.left=Xe(r.left,e.left),e}),Vt(t,a,o));return{width:i.right-i.left,height:i.bottom-i.top,x:i.left,y:i.top}},getOffsetParent:Kt,getElementRects:async function(e){const t=this.getOffsetParent||Kt,n=this.getDimensions,r=await n(e.floating);return{reference:Qt(e.reference,await t(e.floating),e.strategy),floating:{x:0,y:0,width:r.width,height:r.height}}},getClientRects:function(e){return Array.from(e.getClientRects())},getDimensions:function(e){const{width:t,height:n}=Dt(e);return{width:t,height:n}},getScale:jt,isElement:kt,isRTL:function(e){return"rtl"===It(e).direction}};function Zt(e,t){return e.x===t.x&&e.y===t.y&&e.width===t.width&&e.height===t.height}const Jt=function(e){return void 0===e&&(e=0),{name:"offset",options:e,async fn(t){var n,r;const{x:o,y:l,placement:a,middlewareData:i}=t,u=await async function(e,t){const{placement:n,platform:r,elements:o}=e,l=await(null==r.isRTL?void 0:r.isRTL(o.floating)),a=rt(n),i=ot(n),u="y"===it(n),s=["left","top"].includes(a)?-1:1,c=l&&u?-1:1,f=nt(t,e);let{mainAxis:d,crossAxis:p,alignmentAxis:m}="number"==typeof f?{mainAxis:f,crossAxis:0,alignmentAxis:null}:{mainAxis:f.mainAxis||0,crossAxis:f.crossAxis||0,alignmentAxis:f.alignmentAxis};return i&&"number"==typeof m&&(p="end"===i?-1*m:m),u?{x:p*c,y:d*s}:{x:d*s,y:p*c}}(t,e);return a===(null==(n=i.offset)?void 0:n.placement)&&null!=(r=i.arrow)&&r.alignmentOffset?{}:{x:o+u.x,y:l+u.y,data:{...u,placement:a}}}}},en=function(e){return void 0===e&&(e={}),{name:"shift",options:e,async fn(t){const{x:n,y:r,placement:o}=t,{mainAxis:l=!0,crossAxis:a=!1,limiter:i={fn:e=>{let{x:t,y:n}=e;return{x:t,y:n}}},...u}=nt(e,t),s={x:n,y:r},c=await mt(t,u),f=it(rt(o)),d=lt(f);let p=s[d],m=s[f];if(l){const e="y"===d?"bottom":"right";p=tt(p+c["y"===d?"top":"left"],p,p-c[e])}if(a){const e="y"===f?"bottom":"right";m=tt(m+c["y"===f?"top":"left"],m,m-c[e])}const h=i.fn({...t,[d]:p,[f]:m});return{...h,data:{x:h.x-n,y:h.y-r,enabled:{[d]:l,[f]:a}}}}}},tn=function(e){return void 0===e&&(e={}),{name:"flip",options:e,async fn(t){var n,r;const{placement:o,middlewareData:l,rects:a,initialPlacement:i,platform:u,elements:s}=t,{mainAxis:c=!0,crossAxis:f=!0,fallbackPlacements:d,fallbackStrategy:p="bestFit",fallbackAxisSideDirection:m="none",flipAlignment:h=!0,...g}=nt(e,t);if(null!=(n=l.arrow)&&n.alignmentOffset)return{};const y=rt(o),b=it(i),v=rt(i)===i,A=await(null==u.isRTL?void 0:u.isRTL(s.floating)),w=d||(v||!h?[ct(i)]:function(e){const t=ct(e);return[st(e),t,st(t)]}(i)),k="none"!==m;!d&&k&&w.push(...function(e,t,n,r){const o=ot(e);let l=function(e,t,n){const r=["left","right"],o=["right","left"],l=["top","bottom"],a=["bottom","top"];switch(e){case"top":case"bottom":return n?t?o:r:t?r:o;case"left":case"right":return t?l:a;default:return[]}}(rt(e),"start"===n,r);return o&&(l=l.map((e=>e+"-"+o)),t&&(l=l.concat(l.map(st)))),l}(i,h,m,A));const x=[i,...w],S=await mt(t,g),C=[];let E=(null==(r=l.flip)?void 0:r.overflows)||[];if(c&&C.push(S[y]),f){const e=function(e,t,n){void 0===n&&(n=!1);const r=ot(e),o=ut(e),l=at(o);let a="x"===o?r===(n?"end":"start")?"right":"left":"start"===r?"bottom":"top";return t.reference[l]>t.floating[l]&&(a=ct(a)),[a,ct(a)]}(o,a,A);C.push(S[e[0]],S[e[1]])}if(E=[...E,{placement:o,overflows:C}],!C.every((e=>e<=0))){var _,P;const e=((null==(_=l.flip)?void 0:_.index)||0)+1,t=x[e];if(t)return{data:{index:e,overflows:E},reset:{placement:t}};let n=null==(P=E.filter((e=>e.overflows[0]<=0)).sort(((e,t)=>e.overflows[1]-t.overflows[1]))[0])?void 0:P.placement;if(!n)switch(p){case"bestFit":{var N;const e=null==(N=E.filter((e=>{if(k){const t=it(e.placement);return t===b||"y"===t}return!0})).map((e=>[e.placement,e.overflows.filter((e=>e>0)).reduce(((e,t)=>e+t),0)])).sort(((e,t)=>e[1]-t[1]))[0])?void 0:N[0];e&&(n=e);break}case"initialPlacement":n=i}if(o!==n)return{reset:{placement:n}}}return{}}}},nn=function(e){return void 0===e&&(e={}),{name:"size",options:e,async fn(t){var n,r;const{placement:o,rects:l,platform:a,elements:i}=t,{apply:u=()=>{},...s}=nt(e,t),c=await mt(t,s),f=rt(o),d=ot(o),p="y"===it(o),{width:m,height:h}=l.floating;let g,y;"top"===f||"bottom"===f?(g=f,y=d===(await(null==a.isRTL?void 0:a.isRTL(i.floating))?"start":"end")?"left":"right"):(y=f,g="end"===d?"top":"bottom");const b=h-c.top-c.bottom,v=m-c.left-c.right,A=Ye(h-c[g],b),w=Ye(m-c[y],v),k=!t.middlewareData.shift;let x=A,S=w;if(null!=(n=t.middlewareData.shift)&&n.enabled.x&&(S=v),null!=(r=t.middlewareData.shift)&&r.enabled.y&&(x=b),k&&!d){const e=Xe(c.left,0),t=Xe(c.right,0),n=Xe(c.top,0),r=Xe(c.bottom,0);p?S=m-2*(0!==e||0!==t?e+t:Xe(c.left,c.right)):x=h-2*(0!==n||0!==r?n+r:Xe(c.top,c.bottom))}await u({...t,availableWidth:S,availableHeight:x});const C=await a.getDimensions(i.floating);return m!==C.width||h!==C.height?{reset:{rects:!0}}:{}}}},rn=function(e){return void 0===e&&(e={}),{name:"hide",options:e,async fn(t){const{rects:n}=t,{strategy:r="referenceHidden",...o}=nt(e,t);switch(r){case"referenceHidden":{const e=ht(await mt(t,{...o,elementContext:"reference"}),n.reference);return{data:{referenceHiddenOffsets:e,referenceHidden:gt(e)}}}case"escaped":{const e=ht(await mt(t,{...o,altBoundary:!0}),n.floating);return{data:{escapedOffsets:e,escaped:gt(e)}}}default:return{}}}}},on=e=>({name:"arrow",options:e,async fn(t){const{x:n,y:r,placement:o,rects:l,platform:a,elements:i,middlewareData:u}=t,{element:s,padding:c=0}=nt(e,t)||{};if(null==s)return{};const f=ft(c),d={x:n,y:r},p=ut(o),m=at(p),h=await a.getDimensions(s),g="y"===p,y=g?"top":"left",b=g?"bottom":"right",v=g?"clientHeight":"clientWidth",A=l.reference[m]+l.reference[p]-d[p]-l.floating[m],w=d[p]-l.reference[p],k=await(null==a.getOffsetParent?void 0:a.getOffsetParent(s));let x=k?k[v]:0;x&&await(null==a.isElement?void 0:a.isElement(k))||(x=i.floating[v]||l.floating[m]);const S=A/2-w/2,C=x/2-h[m]/2-1,E=Ye(f[y],C),_=Ye(f[b],C),P=E,N=x-h[m]-_,B=x/2-h[m]/2+S,I=tt(P,B,N),T=!u.arrow&&null!=ot(o)&&B!==I&&l.reference[m]/2-(B<P?E:_)-h[m]/2<0,z=T?B<P?B-P:B-N:0;return{[p]:d[p]+z,data:{[p]:I,centerOffset:B-I-z,...T&&{alignmentOffset:z}},reset:T}}}),ln=function(e){return void 0===e&&(e={}),{options:e,fn(t){const{x:n,y:r,placement:o,rects:l,middlewareData:a}=t,{offset:i=0,mainAxis:u=!0,crossAxis:s=!0}=nt(e,t),c={x:n,y:r},f=it(o),d=lt(f);let p=c[d],m=c[f];const h=nt(i,t),g="number"==typeof h?{mainAxis:h,crossAxis:0}:{mainAxis:0,crossAxis:0,...h};if(u){const e="y"===d?"height":"width",t=l.reference[d]-l.floating[e]+g.mainAxis,n=l.reference[d]+l.reference[e]-g.mainAxis;p<t?p=t:p>n&&(p=n)}if(s){var y,b;const e="y"===d?"width":"height",t=["top","left"].includes(rt(o)),n=l.reference[f]-l.floating[e]+(t&&(null==(y=a.offset)?void 0:y[f])||0)+(t?0:g.crossAxis),r=l.reference[f]+l.reference[e]+(t?0:(null==(b=a.offset)?void 0:b[f])||0)-(t?g.crossAxis:0);m<n?m=n:m>r&&(m=r)}return{[d]:p,[f]:m}}}},an=(e,t,n)=>{const r=new Map,o={platform:Gt,...n},l={...o.platform,_c:r};return(async(e,t,n)=>{const{placement:r="bottom",strategy:o="absolute",middleware:l=[],platform:a}=n,i=l.filter(Boolean),u=await(null==a.isRTL?void 0:a.isRTL(t));let s=await a.getElementRects({reference:e,floating:t,strategy:o}),{x:c,y:f}=pt(s,r,u),d=r,p={},m=0;for(let n=0;n<i.length;n++){const{name:l,fn:h}=i[n],{x:g,y,data:b,reset:v}=await h({x:c,y:f,initialPlacement:r,placement:d,strategy:o,middlewareData:p,rects:s,platform:a,elements:{reference:e,floating:t}});c=null!=g?g:c,f=null!=y?y:f,p={...p,[l]:{...p[l],...b}},v&&m<=50&&(m++,"object"==typeof v&&(v.placement&&(d=v.placement),v.rects&&(s=!0===v.rects?await a.getElementRects({reference:e,floating:t,strategy:o}):v.rects),({x:c,y:f}=pt(s,d,u))),n=-1)}return{x:c,y:f,placement:d,strategy:o,middlewareData:p}})(e,t,{...o,platform:l})};var un="undefined"!=typeof document?a.useLayoutEffect:a.useEffect;function sn(e,t){if(e===t)return!0;if(typeof e!=typeof t)return!1;if("function"==typeof e&&e.toString()===t.toString())return!0;let n,r,o;if(e&&t&&"object"==typeof e){if(Array.isArray(e)){if(n=e.length,n!==t.length)return!1;for(r=n;0!=r--;)if(!sn(e[r],t[r]))return!1;return!0}if(o=Object.keys(e),n=o.length,n!==Object.keys(t).length)return!1;for(r=n;0!=r--;)if(!{}.hasOwnProperty.call(t,o[r]))return!1;for(r=n;0!=r--;){const n=o[r];if(!("_owner"===n&&e.$$typeof||sn(e[n],t[n])))return!1}return!0}return e!=e&&t!=t}function cn(e){return"undefined"==typeof window?1:(e.ownerDocument.defaultView||window).devicePixelRatio||1}function fn(e,t){const n=cn(e);return Math.round(t*n)/n}function dn(e){const t=a.useRef(e);return un((()=>{t.current=e})),t}const pn=e=>({name:"arrow",options:e,fn(t){const{element:n,padding:r}="function"==typeof e?e(t):e;return n&&(o=n,{}.hasOwnProperty.call(o,"current"))?null!=n.current?on({element:n.current,padding:r}).fn(t):{}:n?on({element:n,padding:r}).fn(t):{};var o}}),mn=(e,t)=>({...Jt(e),options:[e,t]}),hn=(e,t)=>({...en(e),options:[e,t]}),gn=(e,t)=>({...ln(e),options:[e,t]}),yn=(e,t)=>({...tn(e),options:[e,t]}),bn=(e,t)=>({...nn(e),options:[e,t]}),vn=(e,t)=>({...rn(e),options:[e,t]}),An=(e,t)=>({...pn(e),options:[e,t]});var wn=a.forwardRef(((e,t)=>{const{children:n,width:r=10,height:o=5,...a}=e;return(0,l.jsx)(Re.svg,{...a,ref:t,width:r,height:o,viewBox:"0 0 30 10",preserveAspectRatio:"none",children:e.asChild?n:(0,l.jsx)("polygon",{points:"0,0 30,0 15,10"})})}));wn.displayName="Arrow";var kn=wn,xn="Popper",[Sn,Cn]=ze(xn),[En,_n]=Sn(xn),Pn=e=>{const{__scopePopper:t,children:n}=e,[r,o]=a.useState(null);return(0,l.jsx)(En,{scope:t,anchor:r,onAnchorChange:o,children:n})};Pn.displayName=xn;var Nn="PopperAnchor",Bn=a.forwardRef(((e,t)=>{const{__scopePopper:n,virtualRef:r,...o}=e,i=_n(Nn,n),u=a.useRef(null),s=oe(t,u);return a.useEffect((()=>{i.onAnchorChange(r?.current||u.current)})),r?null:(0,l.jsx)(Re.div,{...o,ref:s})}));Bn.displayName=Nn;var In="PopperContent",[Tn,zn]=Sn(In),On=a.forwardRef(((e,t)=>{const{__scopePopper:n,side:r="bottom",sideOffset:o=0,align:i="center",alignOffset:u=0,arrowPadding:s=0,avoidCollisions:c=!0,collisionBoundary:f=[],collisionPadding:d=0,sticky:p="partial",hideWhenDetached:m=!1,updatePositionStrategy:h="optimized",onPlaced:g,...y}=e,b=_n(In,n),[v,A]=a.useState(null),w=oe(t,(e=>A(e))),[k,x]=a.useState(null),S=function(e){const[t,n]=a.useState(void 0);return $e((()=>{if(e){n({width:e.offsetWidth,height:e.offsetHeight});const t=new ResizeObserver((t=>{if(!Array.isArray(t))return;if(!t.length)return;const r=t[0];let o,l;if("borderBoxSize"in r){const e=r.borderBoxSize,t=Array.isArray(e)?e[0]:e;o=t.inlineSize,l=t.blockSize}else o=e.offsetWidth,l=e.offsetHeight;n({width:o,height:l})}));return t.observe(e,{box:"border-box"}),()=>t.unobserve(e)}n(void 0)}),[e]),t}(k),C=S?.width??0,E=S?.height??0,_=r+("center"!==i?"-"+i:""),P="number"==typeof d?d:{top:0,right:0,bottom:0,left:0,...d},N=Array.isArray(f)?f:[f],B=N.length>0,I={padding:P,boundary:N.filter(Fn),altBoundary:B},{refs:T,floatingStyles:z,placement:O,isPositioned:L,middlewareData:R}=function(e){void 0===e&&(e={});const{placement:t="bottom",strategy:n="absolute",middleware:r=[],platform:o,elements:{reference:l,floating:i}={},transform:u=!0,whileElementsMounted:s,open:c}=e,[f,d]=a.useState({x:0,y:0,strategy:n,placement:t,middlewareData:{},isPositioned:!1}),[p,m]=a.useState(r);sn(p,r)||m(r);const[h,g]=a.useState(null),[y,b]=a.useState(null),v=a.useCallback((e=>{e!==x.current&&(x.current=e,g(e))}),[]),A=a.useCallback((e=>{e!==S.current&&(S.current=e,b(e))}),[]),w=l||h,k=i||y,x=a.useRef(null),S=a.useRef(null),C=a.useRef(f),E=null!=s,_=dn(s),P=dn(o),N=dn(c),B=a.useCallback((()=>{if(!x.current||!S.current)return;const e={placement:t,strategy:n,middleware:p};P.current&&(e.platform=P.current),an(x.current,S.current,e).then((e=>{const t={...e,isPositioned:!1!==N.current};I.current&&!sn(C.current,t)&&(C.current=t,Le.flushSync((()=>{d(t)})))}))}),[p,t,n,P,N]);un((()=>{!1===c&&C.current.isPositioned&&(C.current.isPositioned=!1,d((e=>({...e,isPositioned:!1}))))}),[c]);const I=a.useRef(!1);un((()=>(I.current=!0,()=>{I.current=!1})),[]),un((()=>{if(w&&(x.current=w),k&&(S.current=k),w&&k){if(_.current)return _.current(w,k,B);B()}}),[w,k,B,_,E]);const T=a.useMemo((()=>({reference:x,floating:S,setReference:v,setFloating:A})),[v,A]),z=a.useMemo((()=>({reference:w,floating:k})),[w,k]),O=a.useMemo((()=>{const e={position:n,left:0,top:0};if(!z.floating)return e;const t=fn(z.floating,f.x),r=fn(z.floating,f.y);return u?{...e,transform:"translate("+t+"px, "+r+"px)",...cn(z.floating)>=1.5&&{willChange:"transform"}}:{position:n,left:t,top:r}}),[n,u,z.floating,f.x,f.y]);return a.useMemo((()=>({...f,update:B,refs:T,elements:z,floatingStyles:O})),[f,B,T,z,O])}({strategy:"fixed",placement:_,whileElementsMounted:(...e)=>function(e,t,n,r){void 0===r&&(r={});const{ancestorScroll:o=!0,ancestorResize:l=!0,elementResize:a="function"==typeof ResizeObserver,layoutShift:i="function"==typeof IntersectionObserver,animationFrame:u=!1}=r,s=Ft(e),c=o||l?[...s?Lt(s):[],...Lt(t)]:[];c.forEach((e=>{o&&e.addEventListener("scroll",n,{passive:!0}),l&&e.addEventListener("resize",n)}));const f=s&&i?function(e,t){let n,r=null;const o=At(e);function l(){var e;clearTimeout(n),null==(e=r)||e.disconnect(),r=null}return function a(i,u){void 0===i&&(i=!1),void 0===u&&(u=1),l();const s=e.getBoundingClientRect(),{left:c,top:f,width:d,height:p}=s;if(i||t(),!d||!p)return;const m={rootMargin:-Ge(f)+"px "+-Ge(o.clientWidth-(c+d))+"px "+-Ge(o.clientHeight-(f+p))+"px "+-Ge(c)+"px",threshold:Xe(0,Ye(1,u))||1};let h=!0;function g(t){const r=t[0].intersectionRatio;if(r!==u){if(!h)return a();r?a(!1,r):n=setTimeout((()=>{a(!1,1e-7)}),1e3)}1!==r||Zt(s,e.getBoundingClientRect())||a(),h=!1}try{r=new IntersectionObserver(g,{...m,root:o.ownerDocument})}catch(e){r=new IntersectionObserver(g,m)}r.observe(e)}(!0),l}(s,n):null;let d,p=-1,m=null;a&&(m=new ResizeObserver((e=>{let[r]=e;r&&r.target===s&&m&&(m.unobserve(t),cancelAnimationFrame(p),p=requestAnimationFrame((()=>{var e;null==(e=m)||e.observe(t)}))),n()})),s&&!u&&m.observe(s),m.observe(t));let h=u?Ut(e):null;return u&&function t(){const r=Ut(e);h&&!Zt(h,r)&&n(),h=r,d=requestAnimationFrame(t)}(),n(),()=>{var e;c.forEach((e=>{o&&e.removeEventListener("scroll",n),l&&e.removeEventListener("resize",n)})),null==f||f(),null==(e=m)||e.disconnect(),m=null,u&&cancelAnimationFrame(d)}}(...e,{animationFrame:"always"===h}),elements:{reference:b.anchor},middleware:[mn({mainAxis:o+E,alignmentAxis:u}),c&&hn({mainAxis:!0,crossAxis:!1,limiter:"partial"===p?gn():void 0,...I}),c&&yn({...I}),bn({...I,apply:({elements:e,rects:t,availableWidth:n,availableHeight:r})=>{const{width:o,height:l}=t.reference,a=e.floating.style;a.setProperty("--radix-popper-available-width",`${n}px`),a.setProperty("--radix-popper-available-height",`${r}px`),a.setProperty("--radix-popper-anchor-width",`${o}px`),a.setProperty("--radix-popper-anchor-height",`${l}px`)}}),k&&An({element:k,padding:s}),jn({arrowWidth:C,arrowHeight:E}),m&&vn({strategy:"referenceHidden",...I})]}),[D,F]=Mn(O),j=De(g);$e((()=>{L&&j?.()}),[L,j]);const M=R.arrow?.x,W=R.arrow?.y,U=0!==R.arrow?.centerOffset,[H,$]=a.useState();return $e((()=>{v&&$(window.getComputedStyle(v).zIndex)}),[v]),(0,l.jsx)("div",{ref:T.setFloating,"data-radix-popper-content-wrapper":"",style:{...z,transform:L?z.transform:"translate(0, -200%)",minWidth:"max-content",zIndex:H,"--radix-popper-transform-origin":[R.transformOrigin?.x,R.transformOrigin?.y].join(" "),...R.hide?.referenceHidden&&{visibility:"hidden",pointerEvents:"none"}},dir:e.dir,children:(0,l.jsx)(Tn,{scope:n,placedSide:D,onArrowChange:x,arrowX:M,arrowY:W,shouldHideArrow:U,children:(0,l.jsx)(Re.div,{"data-side":D,"data-align":F,...y,ref:w,style:{...y.style,animation:L?void 0:"none"}})})})}));On.displayName=In;var Ln="PopperArrow",Rn={top:"bottom",right:"left",bottom:"top",left:"right"},Dn=a.forwardRef((function(e,t){const{__scopePopper:n,...r}=e,o=zn(Ln,n),a=Rn[o.placedSide];return(0,l.jsx)("span",{ref:o.onArrowChange,style:{position:"absolute",left:o.arrowX,top:o.arrowY,[a]:0,transformOrigin:{top:"",right:"0 0",bottom:"center 0",left:"100% 0"}[o.placedSide],transform:{top:"translateY(100%)",right:"translateY(50%) rotate(90deg) translateX(-50%)",bottom:"rotate(180deg)",left:"translateY(50%) rotate(-90deg) translateX(50%)"}[o.placedSide],visibility:o.shouldHideArrow?"hidden":void 0},children:(0,l.jsx)(kn,{...r,ref:t,style:{...r.style,display:"block"}})})}));function Fn(e){return null!==e}Dn.displayName=Ln;var jn=e=>({name:"transformOrigin",options:e,fn(t){const{placement:n,rects:r,middlewareData:o}=t,l=0!==o.arrow?.centerOffset,a=l?0:e.arrowWidth,i=l?0:e.arrowHeight,[u,s]=Mn(n),c={start:"0%",center:"50%",end:"100%"}[s],f=(o.arrow?.x??0)+a/2,d=(o.arrow?.y??0)+i/2;let p="",m="";return"bottom"===u?(p=l?c:`${f}px`,m=-i+"px"):"top"===u?(p=l?c:`${f}px`,m=`${r.floating.height+i}px`):"right"===u?(p=-i+"px",m=l?c:`${d}px`):"left"===u&&(p=`${r.floating.width+i}px`,m=l?c:`${d}px`),{data:{x:p,y:m}}}});function Mn(e){const[t,n="center"]=e.split("-");return[t,n]}var Wn=Pn,Un=Bn,Hn=On,$n=Dn,Vn=a.forwardRef(((e,t)=>{const{container:n,...r}=e,[o,i]=a.useState(!1);$e((()=>i(!0)),[]);const u=n||o&&globalThis?.document?.body;return u?Le.createPortal((0,l.jsx)(Re.div,{...r,ref:t}),u):null}));Vn.displayName="Portal";var qn=e=>{const{present:t,children:n}=e,r=function(e){const[t,n]=a.useState(),r=a.useRef(null),o=a.useRef(e),l=a.useRef("none"),i=e?"mounted":"unmounted",[u,s]=function(e,t){return a.useReducer(((e,n)=>t[e][n]??e),e)}(i,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return a.useEffect((()=>{const e=Qn(r.current);l.current="mounted"===u?e:"none"}),[u]),$e((()=>{const t=r.current,n=o.current;if(n!==e){const r=l.current,a=Qn(t);s(e?"MOUNT":"none"===a||"none"===t?.display?"UNMOUNT":n&&r!==a?"ANIMATION_OUT":"UNMOUNT"),o.current=e}}),[e,s]),$e((()=>{if(t){let e;const n=t.ownerDocument.defaultView??window,a=l=>{const a=Qn(r.current).includes(l.animationName);if(l.target===t&&a&&(s("ANIMATION_END"),!o.current)){const r=t.style.animationFillMode;t.style.animationFillMode="forwards",e=n.setTimeout((()=>{"forwards"===t.style.animationFillMode&&(t.style.animationFillMode=r)}))}},i=e=>{e.target===t&&(l.current=Qn(r.current))};return t.addEventListener("animationstart",i),t.addEventListener("animationcancel",a),t.addEventListener("animationend",a),()=>{n.clearTimeout(e),t.removeEventListener("animationstart",i),t.removeEventListener("animationcancel",a),t.removeEventListener("animationend",a)}}s("ANIMATION_END")}),[t,s]),{isPresent:["mounted","unmountSuspended"].includes(u),ref:a.useCallback((e=>{r.current=e?getComputedStyle(e):null,n(e)}),[])}}(t),o="function"==typeof n?n({present:r.isPresent}):a.Children.only(n),l=oe(r.ref,function(e){let t=Object.getOwnPropertyDescriptor(e.props,"ref")?.get,n=t&&"isReactWarning"in t&&t.isReactWarning;return n?e.ref:(t=Object.getOwnPropertyDescriptor(e,"ref")?.get,n=t&&"isReactWarning"in t&&t.isReactWarning,n?e.props.ref:e.props.ref||e.ref)}(o));return"function"==typeof n||r.isPresent?a.cloneElement(o,{ref:l}):null};function Qn(e){return e?.animationName||"none"}qn.displayName="Presence";var Yn=i[" useInsertionEffect ".trim().toString()]||$e;Symbol("RADIX:SYNC_STATE");var Xn=Object.freeze({position:"absolute",border:0,width:1,height:1,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",wordWrap:"normal"}),Kn=a.forwardRef(((e,t)=>(0,l.jsx)(Re.span,{...e,ref:t,style:{...Xn,...e.style}})));Kn.displayName="VisuallyHidden";var Gn=Kn,[Zn,Jn]=ze("Tooltip",[Cn]),er=Cn(),tr="TooltipProvider",nr=700,rr="tooltip.open",[or,lr]=Zn(tr),ar=e=>{const{__scopeTooltip:t,delayDuration:n=nr,skipDelayDuration:r=300,disableHoverableContent:o=!1,children:i}=e,u=a.useRef(!0),s=a.useRef(!1),c=a.useRef(0);return a.useEffect((()=>{const e=c.current;return()=>window.clearTimeout(e)}),[]),(0,l.jsx)(or,{scope:t,isOpenDelayedRef:u,delayDuration:n,onOpen:a.useCallback((()=>{window.clearTimeout(c.current),u.current=!1}),[]),onClose:a.useCallback((()=>{window.clearTimeout(c.current),c.current=window.setTimeout((()=>u.current=!0),r)}),[r]),isPointerInTransitRef:s,onPointerInTransitChange:a.useCallback((e=>{s.current=e}),[]),disableHoverableContent:o,children:i})};ar.displayName=tr;var ir="Tooltip",[ur,sr]=Zn(ir),cr=e=>{const{__scopeTooltip:t,children:n,open:r,defaultOpen:o,onOpenChange:i,disableHoverableContent:u,delayDuration:s}=e,c=lr(ir,e.__scopeTooltip),f=er(t),[d,p]=a.useState(null),m=function(e){const[t,n]=a.useState(Ve());return $e((()=>{n((e=>e??String(qe++)))}),[e]),t?`radix-${t}`:""}(),h=a.useRef(0),g=u??c.disableHoverableContent,y=s??c.delayDuration,b=a.useRef(!1),[v,A]=function({prop:e,defaultProp:t,onChange:n=()=>{},caller:r}){const[o,l,i]=function({defaultProp:e,onChange:t}){const[n,r]=a.useState(e),o=a.useRef(n),l=a.useRef(t);return Yn((()=>{l.current=t}),[t]),a.useEffect((()=>{o.current!==n&&(l.current?.(n),o.current=n)}),[n,o]),[n,r,l]}({defaultProp:t,onChange:n}),u=void 0!==e,s=u?e:o;{const t=a.useRef(void 0!==e);a.useEffect((()=>{const e=t.current;if(e!==u){const t=e?"controlled":"uncontrolled",n=u?"controlled":"uncontrolled";console.warn(`${r} is changing from ${t} to ${n}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`)}t.current=u}),[u,r])}const c=a.useCallback((t=>{if(u){const n=function(e){return"function"==typeof e}(t)?t(e):t;n!==e&&i.current?.(n)}else l(t)}),[u,e,l,i]);return[s,c]}({prop:r,defaultProp:o??!1,onChange:e=>{e?(c.onOpen(),document.dispatchEvent(new CustomEvent(rr))):c.onClose(),i?.(e)},caller:ir}),w=a.useMemo((()=>v?b.current?"delayed-open":"instant-open":"closed"),[v]),k=a.useCallback((()=>{window.clearTimeout(h.current),h.current=0,b.current=!1,A(!0)}),[A]),x=a.useCallback((()=>{window.clearTimeout(h.current),h.current=0,A(!1)}),[A]),S=a.useCallback((()=>{window.clearTimeout(h.current),h.current=window.setTimeout((()=>{b.current=!0,A(!0),h.current=0}),y)}),[y,A]);return a.useEffect((()=>()=>{h.current&&(window.clearTimeout(h.current),h.current=0)}),[]),(0,l.jsx)(Wn,{...f,children:(0,l.jsx)(ur,{scope:t,contentId:m,open:v,stateAttribute:w,trigger:d,onTriggerChange:p,onTriggerEnter:a.useCallback((()=>{c.isOpenDelayedRef.current?S():k()}),[c.isOpenDelayedRef,S,k]),onTriggerLeave:a.useCallback((()=>{g?x():(window.clearTimeout(h.current),h.current=0)}),[x,g]),onOpen:k,onClose:x,disableHoverableContent:g,children:n})})};cr.displayName=ir;var fr="TooltipTrigger",dr=a.forwardRef(((e,t)=>{const{__scopeTooltip:n,...r}=e,o=sr(fr,n),i=lr(fr,n),u=er(n),s=oe(t,a.useRef(null),o.onTriggerChange),c=a.useRef(!1),f=a.useRef(!1),d=a.useCallback((()=>c.current=!1),[]);return a.useEffect((()=>()=>document.removeEventListener("pointerup",d)),[d]),(0,l.jsx)(Un,{asChild:!0,...u,children:(0,l.jsx)(Re.button,{"aria-describedby":o.open?o.contentId:void 0,"data-state":o.stateAttribute,...r,ref:s,onPointerMove:Te(e.onPointerMove,(e=>{"touch"!==e.pointerType&&(f.current||i.isPointerInTransitRef.current||(o.onTriggerEnter(),f.current=!0))})),onPointerLeave:Te(e.onPointerLeave,(()=>{o.onTriggerLeave(),f.current=!1})),onPointerDown:Te(e.onPointerDown,(()=>{o.open&&o.onClose(),c.current=!0,document.addEventListener("pointerup",d,{once:!0})})),onFocus:Te(e.onFocus,(()=>{c.current||o.onOpen()})),onBlur:Te(e.onBlur,o.onClose),onClick:Te(e.onClick,o.onClose)})})}));dr.displayName=fr;var pr="TooltipPortal",[mr,hr]=Zn(pr,{forceMount:void 0}),gr="TooltipContent",yr=a.forwardRef(((e,t)=>{const n=hr(gr,e.__scopeTooltip),{forceMount:r=n.forceMount,side:o="top",...a}=e,i=sr(gr,e.__scopeTooltip);return(0,l.jsx)(qn,{present:r||i.open,children:i.disableHoverableContent?(0,l.jsx)(kr,{side:o,...a,ref:t}):(0,l.jsx)(br,{side:o,...a,ref:t})})})),br=a.forwardRef(((e,t)=>{const n=sr(gr,e.__scopeTooltip),r=lr(gr,e.__scopeTooltip),o=a.useRef(null),i=oe(t,o),[u,s]=a.useState(null),{trigger:c,onClose:f}=n,d=o.current,{onPointerInTransitChange:p}=r,m=a.useCallback((()=>{s(null),p(!1)}),[p]),h=a.useCallback(((e,t)=>{const n=e.currentTarget,r={x:e.clientX,y:e.clientY},o=function(e,t,n=5){const r=[];switch(t){case"top":r.push({x:e.x-n,y:e.y+n},{x:e.x+n,y:e.y+n});break;case"bottom":r.push({x:e.x-n,y:e.y-n},{x:e.x+n,y:e.y-n});break;case"left":r.push({x:e.x+n,y:e.y-n},{x:e.x+n,y:e.y+n});break;case"right":r.push({x:e.x-n,y:e.y-n},{x:e.x-n,y:e.y+n})}return r}(r,function(e,t){const n=Math.abs(t.top-e.y),r=Math.abs(t.bottom-e.y),o=Math.abs(t.right-e.x),l=Math.abs(t.left-e.x);switch(Math.min(n,r,o,l)){case l:return"left";case o:return"right";case n:return"top";case r:return"bottom";default:throw new Error("unreachable")}}(r,n.getBoundingClientRect())),l=function(e){const t=e.slice();return t.sort(((e,t)=>e.x<t.x?-1:e.x>t.x?1:e.y<t.y?-1:e.y>t.y?1:0)),function(e){if(e.length<=1)return e.slice();const t=[];for(let n=0;n<e.length;n++){const r=e[n];for(;t.length>=2;){const e=t[t.length-1],n=t[t.length-2];if(!((e.x-n.x)*(r.y-n.y)>=(e.y-n.y)*(r.x-n.x)))break;t.pop()}t.push(r)}t.pop();const n=[];for(let t=e.length-1;t>=0;t--){const r=e[t];for(;n.length>=2;){const e=n[n.length-1],t=n[n.length-2];if(!((e.x-t.x)*(r.y-t.y)>=(e.y-t.y)*(r.x-t.x)))break;n.pop()}n.push(r)}return n.pop(),1===t.length&&1===n.length&&t[0].x===n[0].x&&t[0].y===n[0].y?t:t.concat(n)}(t)}([...o,...function(e){const{top:t,right:n,bottom:r,left:o}=e;return[{x:o,y:t},{x:n,y:t},{x:n,y:r},{x:o,y:r}]}(t.getBoundingClientRect())]);s(l),p(!0)}),[p]);return a.useEffect((()=>()=>m()),[m]),a.useEffect((()=>{if(c&&d){const e=e=>h(e,d),t=e=>h(e,c);return c.addEventListener("pointerleave",e),d.addEventListener("pointerleave",t),()=>{c.removeEventListener("pointerleave",e),d.removeEventListener("pointerleave",t)}}}),[c,d,h,m]),a.useEffect((()=>{if(u){const e=e=>{const t=e.target,n={x:e.clientX,y:e.clientY},r=c?.contains(t)||d?.contains(t),o=!function(e,t){const{x:n,y:r}=e;let o=!1;for(let e=0,l=t.length-1;e<t.length;l=e++){const a=t[e],i=t[l],u=a.x,s=a.y,c=i.x,f=i.y;s>r!=f>r&&n<(c-u)*(r-s)/(f-s)+u&&(o=!o)}return o}(n,u);r?m():o&&(m(),f())};return document.addEventListener("pointermove",e),()=>document.removeEventListener("pointermove",e)}}),[c,d,u,f,m]),(0,l.jsx)(kr,{...e,ref:i})})),[vr,Ar]=Zn(ir,{isInside:!1}),wr=function(e){const t=({children:e})=>(0,l.jsx)(l.Fragment,{children:e});return t.displayName=`${e}.Slottable`,t.__radixId=ue,t}("TooltipContent"),kr=a.forwardRef(((e,t)=>{const{__scopeTooltip:n,children:r,"aria-label":o,onEscapeKeyDown:i,onPointerDownOutside:u,...s}=e,c=sr(gr,n),f=er(n),{onClose:d}=c;return a.useEffect((()=>(document.addEventListener(rr,d),()=>document.removeEventListener(rr,d))),[d]),a.useEffect((()=>{if(c.trigger){const e=e=>{const t=e.target;t?.contains(c.trigger)&&d()};return window.addEventListener("scroll",e,{capture:!0}),()=>window.removeEventListener("scroll",e,{capture:!0})}}),[c.trigger,d]),(0,l.jsx)(We,{asChild:!0,disableOutsidePointerEvents:!1,onEscapeKeyDown:i,onPointerDownOutside:u,onFocusOutside:e=>e.preventDefault(),onDismiss:d,children:(0,l.jsxs)(Hn,{"data-state":c.stateAttribute,...f,...s,ref:t,style:{...s.style,"--radix-tooltip-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-tooltip-content-available-width":"var(--radix-popper-available-width)","--radix-tooltip-content-available-height":"var(--radix-popper-available-height)","--radix-tooltip-trigger-width":"var(--radix-popper-anchor-width)","--radix-tooltip-trigger-height":"var(--radix-popper-anchor-height)"},children:[(0,l.jsx)(wr,{children:r}),(0,l.jsx)(vr,{scope:n,isInside:!0,children:(0,l.jsx)(Gn,{id:c.contentId,role:"tooltip",children:o||r})})]})})}));yr.displayName=gr;var xr="TooltipArrow";a.forwardRef(((e,t)=>{const{__scopeTooltip:n,...r}=e,o=er(n);return Ar(xr,n).isInside?null:(0,l.jsx)($n,{...o,...r,ref:t})})).displayName=xr;var Sr=ar,Cr=cr,Er=dr,_r=yr,Pr=o(244),Nr={};Nr.styleTagTransform=we(),Nr.setAttributes=ye(),Nr.insert=he().bind(null,"head"),Nr.domAPI=pe(),Nr.insertStyleElement=ve(),fe()(Pr.A,Nr),Pr.A&&Pr.A.locals&&Pr.A.locals;const Br=Sr,Ir=Cr,Tr=Er,zr=a.forwardRef(((e,t)=>{var n,r,{className:o,sideOffset:a=4}=e,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["className","sideOffset"]);return(0,l.jsx)(_r,Object.assign({ref:t,sideOffset:a,className:(n="fc-tooltip-content",r=o,r?`${n} ${r}`:n)},i))}));var Or=o(563),Lr={};Lr.styleTagTransform=we(),Lr.setAttributes=ye(),Lr.insert=he().bind(null,"head"),Lr.domAPI=pe(),Lr.insertStyleElement=ve(),fe()(Or.A,Lr),Or.A&&Or.A.locals&&Or.A.locals;var Rr=function(e,t,n,r){return new(n||(n=Promise))((function(o,l){function a(e){try{u(r.next(e))}catch(e){l(e)}}function i(e){try{u(r.throw(e))}catch(e){l(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,i)}u((r=r.apply(e,t||[])).next())}))};const Dr=document.getElementById("coupon_code_list");Dr?u.createRoot(Dr).render((0,l.jsx)(a.StrictMode,{children:(0,l.jsx)((function(){const[e,t]=(0,a.useState)([]),[n,r]=(0,a.useState)(!0),[o,i]=(0,a.useState)(null),[u,s]=(0,a.useState)(null),c=(0,a.useRef)(null);(0,a.useEffect)((()=>{(()=>{Rr(this,void 0,void 0,(function*(){if(fcCodeImport.enabled)try{const e=new FormData;e.append("action","fcci_fetch_files"),e.append("nonce",fcCodeImport.nonce);const n=yield fetch(fcCodeImport.ajaxurl,{method:"POST",body:e}),r=yield n.json();if(r.success){const e=r.data.map((e=>Object.assign(Object.assign({},e),{uploadDate:new Date(e.uploadDate)})));t(e)}else i(r.data||"Failed to fetch files.")}catch(e){i(e.message||"An error occurred while fetching files.")}finally{r(!1)}else r(!1)}))})()}),[]);const f=n=>Rr(this,void 0,void 0,(function*(){try{const r=new FormData;r.append("action","fcci_delete_file"),r.append("nonce",fcCodeImport.nonce),r.append("id",n);const o=yield fetch(fcCodeImport.ajaxurl,{method:"POST",body:r}),l=yield o.json();l.success?t(e.filter((e=>e.id!==n))):console.error("File deletion failed:",l.data)}catch(e){console.error("Error deleting file:",e)}}));return(0,l.jsx)("div",{className:"fc-file-upload-container",children:(0,l.jsx)(Be,{className:"fc-file-upload-card",children:(0,l.jsxs)(Ie,{className:"fc-file-upload-card-content "+(fcCodeImport.enabled?"":"fc-file-upload-disabled"),children:[(0,l.jsx)("div",{className:"fc-file-upload-header",children:(0,l.jsxs)("div",{className:"fc-file-upload-controls",children:[(0,l.jsxs)("label",{htmlFor:"file-upload",className:"fc-file-upload-label",children:[(0,l.jsx)(J,{}),q("Add New File","wp-coupons-core")]}),(0,l.jsx)("input",{id:"file-upload",type:"file",className:"fc-file-upload-input-hidden",onChange:e=>{e.target.files&&e.target.files.length>0&&Array.from(e.target.files).forEach((e=>{const n=new FileReader;n.onload=n=>{var r;if(null===(r=n.target)||void 0===r?void 0:r.result){const n=new FormData;n.append("action","fcci_upload_file"),n.append("nonce",fcCodeImport.nonce),n.append("file",e),fetch(fcCodeImport.ajaxurl,{method:"POST",body:n}).then((e=>e.json())).then((n=>{if(n.success){const r={id:n.data.id,name:e.name,uploadDate:new Date,totalRecords:n.data.totalRecords,usedRecords:n.data.usedRecords};t((e=>[...e,r]))}else console.error("File upload failed:",n.data)})).catch((e=>{console.error("Error uploading file:",e)}))}},n.onerror=e=>{var t;console.error("Error reading file:",null===(t=e.target)||void 0===t?void 0:t.error)},n.readAsDataURL(e)}))},multiple:!0,disabled:!fcCodeImport.enabled}),(0,l.jsx)("input",{ref:c,type:"file",className:"fc-file-upload-input-hidden",onChange:e=>Rr(this,void 0,void 0,(function*(){if(e.target.files&&e.target.files.length>0&&u){const n=e.target.files[0],r=new FormData;r.append("action","fcci_overwrite_file"),r.append("nonce",fcCodeImport.nonce),r.append("id",u.id),r.append("file",n);try{const e=yield fetch(fcCodeImport.ajaxurl,{method:"POST",body:r}),n=yield e.json();n.success?t((e=>e.map((e=>e.id===u.id?Object.assign(Object.assign({},e),{uploadDate:new Date(n.data.uploadDate),totalRecords:n.data.totalRecords,usedRecords:n.data.usedRecords}):e)))):console.error("File overwrite failed:",n.data)}catch(e){console.error("Error overwriting file:",e)}finally{s(null),e.target.value=""}}}))}),(0,l.jsx)("span",{className:"fc-file-upload-info-text",children:q("Upload files to your dashboard","wp-coupons-core")})]})}),(0,l.jsx)("div",{className:"fc-file-upload-table-container",children:(0,l.jsxs)("table",{className:"fc-file-upload-table",children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:q("File Name","wp-coupons-core")}),(0,l.jsx)("th",{children:q("Upload Date","wp-coupons-core")}),(0,l.jsx)("th",{children:q("Records Used","wp-coupons-core")}),(0,l.jsx)("th",{children:q("Actions","wp-coupons-core")})]})}),(0,l.jsxs)("tbody",{children:[n&&(0,l.jsx)("tr",{children:(0,l.jsx)("td",{colSpan:4,className:"text-center",children:q("Loading files…","wp-coupons-core")})}),o&&(0,l.jsx)("tr",{children:(0,l.jsx)("td",{colSpan:4,className:"text-center",style:{color:"red"},children:o})}),n||o||0!==e.length?e.map((e=>{const t=e.usedRecords===e.totalRecords;return(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{className:"file-name-cell",children:e.name}),(0,l.jsx)("td",{className:"upload-date-cell",children:e.uploadDate.toLocaleDateString()}),(0,l.jsx)("td",{className:"records-used-cell",children:(0,l.jsxs)("div",{className:"records-used-content",children:[(0,l.jsxs)("span",{className:"records-used-text "+(t?"records-used-text-full":e.usedRecords>0?"records-used-text-partial":"records-used-text-none"),children:[e.usedRecords,"/",e.totalRecords]}),t&&(0,l.jsx)("span",{className:"records-used-badge",children:q("Used","wp-coupons-core")})]})}),(0,l.jsx)("td",{className:"actions-cell",children:(0,l.jsxs)("div",{className:"actions-content",children:[(0,l.jsx)(Br,{children:(0,l.jsxs)(Ir,{children:[(0,l.jsx)(Tr,{asChild:!0,children:(0,l.jsxs)(Ce,{variant:"ghost",size:"sm",onClick:t=>((e,t)=>{var n;e.preventDefault(),s(t),null===(n=c.current)||void 0===n||n.click()})(t,e),className:"action-button",disabled:t,children:[(0,l.jsx)(ee,{}),q("Overwrite","wp-coupons-core")]})}),(0,l.jsx)(zr,{className:"fc-file-upload-tooltip-content",children:(0,l.jsx)("p",{children:q("Replace this file with a new version. This will add any new records to the existing ones in database.","wp-coupons-core")})})]})}),(0,l.jsxs)(Ce,{variant:"ghost",size:"sm",onClick:t=>{t.preventDefault(),f(e.id)},className:"action-button",children:[(0,l.jsx)(te,{}),q("Delete","wp-coupons-core")]})]})})]},e.id)})):(0,l.jsx)("tr",{children:(0,l.jsx)("td",{colSpan:4,className:"text-center",children:q("No files uploaded yet.","wp-coupons-core")})})]})]})})]})})})}),{})})):console.error("Coupon code list element not found")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,