/*! For license information please see index.js.LICENSE.txt */
(()=>{var e,n,t={26:(e,n,t)=>{"use strict";t.d(n,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),l=t.n(a)()(o());l.push([e.id,".fc-tooltip-content {\n    z-index: 50;\n    overflow: hidden;\n    border-radius: 0.375rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    padding-top: 0.375rem;\n    padding-bottom: 0.375rem;\n    font-size: 0.875rem;\n    color: #1d2327;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* adjusted for WordPress style */\n}\n","",{version:3,sources:["webpack://./assets-src/js/components/code-import/Tooltip.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,gBAAgB;IAChB,uBAAuB;IACvB,yBAAyB,EAAE,0BAA0B;IACrD,yBAAyB;IACzB,qBAAqB;IACrB,sBAAsB;IACtB,qBAAqB;IACrB,wBAAwB;IACxB,mBAAmB;IACnB,cAAc;IACd,wCAAwC,EAAE,iCAAiC;AAC/E",sourcesContent:[".fc-tooltip-content {\n    z-index: 50;\n    overflow: hidden;\n    border-radius: 0.375rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    padding-top: 0.375rem;\n    padding-bottom: 0.375rem;\n    font-size: 0.875rem;\n    color: #1d2327;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* adjusted for WordPress style */\n}\n"],sourceRoot:""}]);const i=l},56:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},l=[],i=0;i<e.length;i++){var s=e[i],c=r.base?s[0]+r.base:s[0],u=a[c]||0,d="".concat(c," ").concat(u);a[c]=u+1;var f=t(d),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)n[f].references++,n[f].updater(A);else{var p=o(A,r);r.byIndex=i,n.splice(i,0,{identifier:d,updater:p,references:1})}l.push(d)}return l}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var i=t(a[l]);n[i].references--}for(var s=r(e,o),c=0;c<a.length;c++){var u=t(a[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=s}}},113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},141:(e,n,t)=>{"use strict";t.d(n,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),l=t.n(a)()(o());l.push([e.id,'/* General styles for the FileUpload component */\n.fc-file-upload-container {\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;\n}\n\n.fc-file-upload-header {\n    margin-bottom: 1.5rem;\n}\n\n.fc-file-upload-controls {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-label {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #2271b1;\n    color: #ffffff;\n    border-radius: 0.25rem;\n    cursor: pointer;\n    font-size: 0.8125rem;\n    font-weight: 400;\n    line-height: 1.5;\n    transition: background-color 0.15s ease-in-out;\n}\n\n.fc-file-upload-label:hover {\n    background-color: #135e96;\n}\n\n.fc-file-upload-label svg {\n    width: 1rem;\n    height: 1rem;\n}\n\n.fc-file-upload-disabled {\n    opacity: 0.7;\n    pointer-events: none;\n}\n\n.fc-file-upload-input-hidden {\n    display: none;\n}\n\n.fc-file-upload-info-text {\n    color: #50575e;\n    font-size: 0.875rem;\n}\n\n.fc-file-upload-table-container {\n    border: 1px solid #c3c4c7;\n    border-radius: 0.25rem;\n    overflow-x: auto;\n}\n\n.fc-file-upload-table {\n    width: 100%;\n    font-size: 0.875rem;\n    border-collapse: collapse;\n}\n\n.fc-file-upload-table th,\n.fc-file-upload-table td {\n    text-align: left;\n    padding: 0.75rem 1rem;\n    border-bottom: 1px solid #c3c4c7;\n}\n\n.fc-file-upload-table th {\n    background-color: #f0f0f1;\n    font-weight: 500;\n    color: #1d2327;\n}\n\n.fc-file-upload-table tbody tr:hover {\n    background-color: #f6f7f7;\n}\n\n.fc-file-upload-table td.text-center {\n    text-align: center;\n}\n\n.fc-file-upload-table .file-name-cell {\n    color: #1d2327;\n}\n\n.fc-file-upload-table .upload-date-cell {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-table .records-used-text {\n    font-weight: 500;\n}\n\n.fc-file-upload-table .records-used-text-full {\n    color: #d63638;\n}\n\n.fc-file-upload-table .records-used-text-partial {\n    color: #2271b1;\n}\n\n.fc-file-upload-table .records-used-text-none {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-badge {\n    font-size: 0.75rem;\n    background-color: #d63638;\n    color: #ffffff;\n    padding: 0.125rem 0.375rem;\n    border-radius: 0.25rem;\n}\n\n.fc-file-upload-table .actions-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n/* Specific button styling within the table if needed, otherwise .fc-button-ghost should cover it */\n\n.fc-file-upload-table .action-button svg {\n    margin-right: 0.25rem;\n}\n\n.fc-file-upload-tooltip-content p {\n    font-size: 0.75rem;\n    max-width: 20rem;\n}\n',"",{version:3,sources:["webpack://./assets-src/js/components/code-import-list.css"],names:[],mappings:"AAAA,gDAAgD;AAChD;IACI,gIAAgI;AACpI;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;IACnB,WAAW;IACX,oBAAoB;IACpB,yBAAyB;IACzB,cAAc;IACd,sBAAsB;IACtB,eAAe;IACf,oBAAoB;IACpB,gBAAgB;IAChB,gBAAgB;IAChB,8CAA8C;AAClD;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,oBAAoB;AACxB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,yBAAyB;AAC7B;;AAEA;;IAEI,gBAAgB;IAChB,qBAAqB;IACrB,gCAAgC;AACpC;;AAEA;IACI,yBAAyB;IACzB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,0BAA0B;IAC1B,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA,mGAAmG;;AAEnG;IACI,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB",sourcesContent:['/* General styles for the FileUpload component */\n.fc-file-upload-container {\n    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;\n}\n\n.fc-file-upload-header {\n    margin-bottom: 1.5rem;\n}\n\n.fc-file-upload-controls {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-label {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #2271b1;\n    color: #ffffff;\n    border-radius: 0.25rem;\n    cursor: pointer;\n    font-size: 0.8125rem;\n    font-weight: 400;\n    line-height: 1.5;\n    transition: background-color 0.15s ease-in-out;\n}\n\n.fc-file-upload-label:hover {\n    background-color: #135e96;\n}\n\n.fc-file-upload-label svg {\n    width: 1rem;\n    height: 1rem;\n}\n\n.fc-file-upload-disabled {\n    opacity: 0.7;\n    pointer-events: none;\n}\n\n.fc-file-upload-input-hidden {\n    display: none;\n}\n\n.fc-file-upload-info-text {\n    color: #50575e;\n    font-size: 0.875rem;\n}\n\n.fc-file-upload-table-container {\n    border: 1px solid #c3c4c7;\n    border-radius: 0.25rem;\n    overflow-x: auto;\n}\n\n.fc-file-upload-table {\n    width: 100%;\n    font-size: 0.875rem;\n    border-collapse: collapse;\n}\n\n.fc-file-upload-table th,\n.fc-file-upload-table td {\n    text-align: left;\n    padding: 0.75rem 1rem;\n    border-bottom: 1px solid #c3c4c7;\n}\n\n.fc-file-upload-table th {\n    background-color: #f0f0f1;\n    font-weight: 500;\n    color: #1d2327;\n}\n\n.fc-file-upload-table tbody tr:hover {\n    background-color: #f6f7f7;\n}\n\n.fc-file-upload-table td.text-center {\n    text-align: center;\n}\n\n.fc-file-upload-table .file-name-cell {\n    color: #1d2327;\n}\n\n.fc-file-upload-table .upload-date-cell {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.fc-file-upload-table .records-used-text {\n    font-weight: 500;\n}\n\n.fc-file-upload-table .records-used-text-full {\n    color: #d63638;\n}\n\n.fc-file-upload-table .records-used-text-partial {\n    color: #2271b1;\n}\n\n.fc-file-upload-table .records-used-text-none {\n    color: #50575e;\n}\n\n.fc-file-upload-table .records-used-badge {\n    font-size: 0.75rem;\n    background-color: #d63638;\n    color: #ffffff;\n    padding: 0.125rem 0.375rem;\n    border-radius: 0.25rem;\n}\n\n.fc-file-upload-table .actions-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n/* Specific button styling within the table if needed, otherwise .fc-button-ghost should cover it */\n\n.fc-file-upload-table .action-button svg {\n    margin-right: 0.25rem;\n}\n\n.fc-file-upload-tooltip-content p {\n    font-size: 0.75rem;\n    max-width: 20rem;\n}\n'],sourceRoot:""}]);const i=l},159:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},218:(e,n,t)=>{"use strict";t.d(n,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),l=t.n(a)()(o());l.push([e.id,'*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n  --tw-contain-size:  ;\n  --tw-contain-layout:  ;\n  --tw-contain-paint:  ;\n  --tw-contain-style:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-gradient-from-position:  ;\n  --tw-gradient-via-position:  ;\n  --tw-gradient-to-position:  ;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n  --tw-contain-size:  ;\n  --tw-contain-layout:  ;\n  --tw-contain-paint:  ;\n  --tw-contain-style:  ;\n}/*\n! tailwindcss v3.4.17 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \'\';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user\'s configured `sans` font-family by default.\n5. Use the user\'s configured `sans` font-feature-settings by default.\n6. Use the user\'s configured `sans` font-variation-settings by default.\n7. Disable tap highlights on iOS\n*/\n\nhtml,\n:host {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 4 */\n  font-feature-settings: normal; /* 5 */\n  font-variation-settings: normal; /* 6 */\n  -webkit-tap-highlight-color: transparent; /* 7 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user\'s configured `mono` font-family by default.\n2. Use the user\'s configured `mono` font-feature-settings by default.\n3. Use the user\'s configured `mono` font-variation-settings by default.\n4. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; /* 1 */\n  font-feature-settings: normal; /* 2 */\n  font-variation-settings: normal; /* 3 */\n  font-size: 1em; /* 4 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-feature-settings: inherit; /* 1 */\n  font-variation-settings: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  font-weight: inherit; /* 1 */\n  line-height: inherit; /* 1 */\n  letter-spacing: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\ninput:where([type=\'button\']),\ninput:where([type=\'reset\']),\ninput:where([type=\'submit\']) {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type=\'search\'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nReset default styling for dialogs.\n*/\ndialog {\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user\'s configured gray 400 color.\n*/\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role="button"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don\'t get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n[hidden]:where(:not([hidden="until-found"])) {\n  display: none;\n}\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-size: revert;\n    font-weight: revert;\n  }\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n.visible {\n  visibility: visible;\n}\n.fixed {\n  position: fixed;\n}\n.absolute {\n  position: absolute;\n}\n.relative {\n  position: relative;\n}\n.inset-0 {\n  inset: 0px;\n}\n.left-2 {\n  left: 0.5rem;\n}\n.left-\\[50\\%\\] {\n  left: 50%;\n}\n.right-2 {\n  right: 0.5rem;\n}\n.right-4 {\n  right: 1rem;\n}\n.top-1 {\n  top: 0.25rem;\n}\n.top-2\\.5 {\n  top: 0.625rem;\n}\n.top-4 {\n  top: 1rem;\n}\n.top-\\[50\\%\\] {\n  top: 50%;\n}\n.z-50 {\n  z-index: 50;\n}\n.-mx-1 {\n  margin-left: -0.25rem;\n  margin-right: -0.25rem;\n}\n.my-1 {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}\n.my-3 {\n  margin-top: 0.75rem;\n  margin-bottom: 0.75rem;\n}\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\n.mr-1 {\n  margin-right: 0.25rem;\n}\n.mr-2 {\n  margin-right: 0.5rem;\n}\n.mt-1 {\n  margin-top: 0.25rem;\n}\n.mt-2 {\n  margin-top: 0.5rem;\n}\n.mt-4 {\n  margin-top: 1rem;\n}\n.flex {\n  display: flex;\n}\n.inline-flex {\n  display: inline-flex;\n}\n.table {\n  display: table;\n}\n.grid {\n  display: grid;\n}\n.h-10 {\n  height: 2.5rem;\n}\n.h-11 {\n  height: 2.75rem;\n}\n.h-12 {\n  height: 3rem;\n}\n.h-3\\.5 {\n  height: 0.875rem;\n}\n.h-4 {\n  height: 1rem;\n}\n.h-5 {\n  height: 1.25rem;\n}\n.h-8 {\n  height: 2rem;\n}\n.h-9 {\n  height: 2.25rem;\n}\n.h-\\[var\\(--radix-select-trigger-height\\)\\] {\n  height: var(--radix-select-trigger-height);\n}\n.h-full {\n  height: 100%;\n}\n.h-px {\n  height: 1px;\n}\n.max-h-\\[--radix-select-content-available-height\\] {\n  max-height: var(--radix-select-content-available-height);\n}\n.min-h-\\[80px\\] {\n  min-height: 80px;\n}\n.w-10 {\n  width: 2.5rem;\n}\n.w-16 {\n  width: 4rem;\n}\n.w-3\\.5 {\n  width: 0.875rem;\n}\n.w-4 {\n  width: 1rem;\n}\n.w-5 {\n  width: 1.25rem;\n}\n.w-64 {\n  width: 16rem;\n}\n.w-full {\n  width: 100%;\n}\n.min-w-\\[8rem\\] {\n  min-width: 8rem;\n}\n.min-w-\\[var\\(--radix-select-trigger-width\\)\\] {\n  min-width: var(--radix-select-trigger-width);\n}\n.max-w-lg {\n  max-width: 32rem;\n}\n.shrink-0 {\n  flex-shrink: 0;\n}\n.caption-bottom {\n  caption-side: bottom;\n}\n.origin-\\[--radix-select-content-transform-origin\\] {\n  transform-origin: var(--radix-select-content-transform-origin);\n}\n.translate-x-\\[-50\\%\\] {\n  --tw-translate-x: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.translate-y-\\[-50\\%\\] {\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.cursor-default {\n  cursor: default;\n}\n.select-none {\n  user-select: none;\n}\n.flex-col {\n  flex-direction: column;\n}\n.flex-col-reverse {\n  flex-direction: column-reverse;\n}\n.items-start {\n  align-items: flex-start;\n}\n.items-center {\n  align-items: center;\n}\n.justify-end {\n  justify-content: flex-end;\n}\n.justify-center {\n  justify-content: center;\n}\n.justify-between {\n  justify-content: space-between;\n}\n.gap-2 {\n  gap: 0.5rem;\n}\n.gap-4 {\n  gap: 1rem;\n}\n.space-x-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n.space-y-1 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.25rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.25rem * var(--tw-space-y-reverse));\n}\n.space-y-1\\.5 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.375rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.375rem * var(--tw-space-y-reverse));\n}\n.space-y-2 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\n}\n.space-y-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1rem * var(--tw-space-y-reverse));\n}\n.space-y-6 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));\n}\n.overflow-auto {\n  overflow: auto;\n}\n.overflow-y-auto {\n  overflow-y: auto;\n}\n.overflow-x-hidden {\n  overflow-x: hidden;\n}\n.whitespace-nowrap {\n  white-space: nowrap;\n}\n.rounded-lg {\n  border-radius: var(--radius);\n}\n.rounded-md {\n  border-radius: calc(var(--radius) - 2px);\n}\n.rounded-sm {\n  border-radius: calc(var(--radius) - 4px);\n}\n.border {\n  border-width: 1px;\n}\n.border-b {\n  border-bottom-width: 1px;\n}\n.border-t {\n  border-top-width: 1px;\n}\n.border-\\[\\#8c8f94\\] {\n  --tw-border-opacity: 1;\n  border-color: rgb(140 143 148 / var(--tw-border-opacity, 1));\n}\n.border-\\[\\#c3c4c7\\] {\n  --tw-border-opacity: 1;\n  border-color: rgb(195 196 199 / var(--tw-border-opacity, 1));\n}\n.border-green-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(134 239 172 / var(--tw-border-opacity, 1));\n}\n.border-input {\n  border-color: hsl(var(--input));\n}\n.border-primary {\n  border-color: hsl(var(--primary));\n}\n.border-red-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(252 165 165 / var(--tw-border-opacity, 1));\n}\n.bg-\\[\\#2271b1\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 113 177 / var(--tw-bg-opacity, 1));\n}\n.bg-\\[\\#d63638\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(214 54 56 / var(--tw-bg-opacity, 1));\n}\n.bg-\\[\\#f0f0f1\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(240 240 241 / var(--tw-bg-opacity, 1));\n}\n.bg-\\[\\#f6f7f7\\] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(246 247 247 / var(--tw-bg-opacity, 1));\n}\n.bg-background {\n  background-color: hsl(var(--background));\n}\n.bg-black\\/80 {\n  background-color: rgb(0 0 0 / 0.8);\n}\n.bg-card {\n  background-color: hsl(var(--card));\n}\n.bg-destructive {\n  background-color: hsl(var(--destructive));\n}\n.bg-green-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(240 253 244 / var(--tw-bg-opacity, 1));\n}\n.bg-muted {\n  background-color: hsl(var(--muted));\n}\n.bg-muted\\/50 {\n  background-color: hsl(var(--muted) / 0.5);\n}\n.bg-popover {\n  background-color: hsl(var(--popover));\n}\n.bg-primary {\n  background-color: hsl(var(--primary));\n}\n.bg-red-50 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 242 242 / var(--tw-bg-opacity, 1));\n}\n.bg-secondary {\n  background-color: hsl(var(--secondary));\n}\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity, 1));\n}\n.fill-\\[\\#ffb900\\] {\n  fill: #ffb900;\n}\n.p-0 {\n  padding: 0px;\n}\n.p-1 {\n  padding: 0.25rem;\n}\n.p-3 {\n  padding: 0.75rem;\n}\n.p-4 {\n  padding: 1rem;\n}\n.p-6 {\n  padding: 1.5rem;\n}\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n.px-4 {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.px-8 {\n  padding-left: 2rem;\n  padding-right: 2rem;\n}\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n.py-1\\.5 {\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n}\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n.py-6 {\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n}\n.pb-4 {\n  padding-bottom: 1rem;\n}\n.pl-8 {\n  padding-left: 2rem;\n}\n.pr-2 {\n  padding-right: 0.5rem;\n}\n.pt-0 {\n  padding-top: 0px;\n}\n.pt-2 {\n  padding-top: 0.5rem;\n}\n.text-left {\n  text-align: left;\n}\n.text-center {\n  text-align: center;\n}\n.text-right {\n  text-align: right;\n}\n.align-middle {\n  vertical-align: middle;\n}\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n.font-medium {\n  font-weight: 500;\n}\n.font-semibold {\n  font-weight: 600;\n}\n.italic {\n  font-style: italic;\n}\n.leading-none {\n  line-height: 1;\n}\n.tracking-tight {\n  letter-spacing: -0.025em;\n}\n.text-\\[\\#1d2327\\] {\n  --tw-text-opacity: 1;\n  color: rgb(29 35 39 / var(--tw-text-opacity, 1));\n}\n.text-\\[\\#2271b1\\] {\n  --tw-text-opacity: 1;\n  color: rgb(34 113 177 / var(--tw-text-opacity, 1));\n}\n.text-\\[\\#50575e\\] {\n  --tw-text-opacity: 1;\n  color: rgb(80 87 94 / var(--tw-text-opacity, 1));\n}\n.text-\\[\\#8c8f94\\] {\n  --tw-text-opacity: 1;\n  color: rgb(140 143 148 / var(--tw-text-opacity, 1));\n}\n.text-\\[\\#b32d2e\\] {\n  --tw-text-opacity: 1;\n  color: rgb(179 45 46 / var(--tw-text-opacity, 1));\n}\n.text-\\[\\#ffb900\\] {\n  --tw-text-opacity: 1;\n  color: rgb(255 185 0 / var(--tw-text-opacity, 1));\n}\n.text-card-foreground {\n  color: hsl(var(--card-foreground));\n}\n.text-current {\n  color: currentColor;\n}\n.text-destructive-foreground {\n  color: hsl(var(--destructive-foreground));\n}\n.text-green-600 {\n  --tw-text-opacity: 1;\n  color: rgb(22 163 74 / var(--tw-text-opacity, 1));\n}\n.text-green-700 {\n  --tw-text-opacity: 1;\n  color: rgb(21 128 61 / var(--tw-text-opacity, 1));\n}\n.text-muted-foreground {\n  color: hsl(var(--muted-foreground));\n}\n.text-popover-foreground {\n  color: hsl(var(--popover-foreground));\n}\n.text-primary {\n  color: hsl(var(--primary));\n}\n.text-primary-foreground {\n  color: hsl(var(--primary-foreground));\n}\n.text-red-600 {\n  --tw-text-opacity: 1;\n  color: rgb(220 38 38 / var(--tw-text-opacity, 1));\n}\n.text-red-700 {\n  --tw-text-opacity: 1;\n  color: rgb(185 28 28 / var(--tw-text-opacity, 1));\n}\n.text-secondary-foreground {\n  color: hsl(var(--secondary-foreground));\n}\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity, 1));\n}\n.underline {\n  text-decoration-line: underline;\n}\n.underline-offset-4 {\n  text-underline-offset: 4px;\n}\n.opacity-50 {\n  opacity: 0.5;\n}\n.opacity-70 {\n  opacity: 0.7;\n}\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.outline-none {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.outline {\n  outline-style: solid;\n}\n.ring-offset-background {\n  --tw-ring-offset-color: hsl(var(--background));\n}\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\n.transition-all {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-colors {\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.transition-opacity {\n  transition-property: opacity;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n.duration-200 {\n  transition-duration: 200ms;\n}\n@keyframes enter {\n\n  from {\n    opacity: var(--tw-enter-opacity, 1);\n    transform: translate3d(var(--tw-enter-translate-x, 0), var(--tw-enter-translate-y, 0), 0) scale3d(var(--tw-enter-scale, 1), var(--tw-enter-scale, 1), var(--tw-enter-scale, 1)) rotate(var(--tw-enter-rotate, 0));\n  }\n}\n@keyframes exit {\n\n  to {\n    opacity: var(--tw-exit-opacity, 1);\n    transform: translate3d(var(--tw-exit-translate-x, 0), var(--tw-exit-translate-y, 0), 0) scale3d(var(--tw-exit-scale, 1), var(--tw-exit-scale, 1), var(--tw-exit-scale, 1)) rotate(var(--tw-exit-rotate, 0));\n  }\n}\n.duration-200 {\n  animation-duration: 200ms;\n}\n.file\\:border-0::file-selector-button {\n  border-width: 0px;\n}\n.file\\:bg-transparent::file-selector-button {\n  background-color: transparent;\n}\n.file\\:text-sm::file-selector-button {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n.file\\:font-medium::file-selector-button {\n  font-weight: 500;\n}\n.file\\:text-foreground::file-selector-button {\n  color: hsl(var(--foreground));\n}\n.placeholder\\:text-muted-foreground::placeholder {\n  color: hsl(var(--muted-foreground));\n}\n.hover\\:border-\\[\\#8c8f94\\]:hover {\n  --tw-border-opacity: 1;\n  border-color: rgb(140 143 148 / var(--tw-border-opacity, 1));\n}\n.hover\\:bg-\\[\\#135e96\\]:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(19 94 150 / var(--tw-bg-opacity, 1));\n}\n.hover\\:bg-\\[\\#b32d2e\\]:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(179 45 46 / var(--tw-bg-opacity, 1));\n}\n.hover\\:bg-accent:hover {\n  background-color: hsl(var(--accent));\n}\n.hover\\:bg-destructive\\/90:hover {\n  background-color: hsl(var(--destructive) / 0.9);\n}\n.hover\\:bg-muted\\/50:hover {\n  background-color: hsl(var(--muted) / 0.5);\n}\n.hover\\:bg-primary\\/90:hover {\n  background-color: hsl(var(--primary) / 0.9);\n}\n.hover\\:bg-secondary\\/80:hover {\n  background-color: hsl(var(--secondary) / 0.8);\n}\n.hover\\:text-\\[\\#135e96\\]:hover {\n  --tw-text-opacity: 1;\n  color: rgb(19 94 150 / var(--tw-text-opacity, 1));\n}\n.hover\\:text-\\[\\#8a2424\\]:hover {\n  --tw-text-opacity: 1;\n  color: rgb(138 36 36 / var(--tw-text-opacity, 1));\n}\n.hover\\:text-accent-foreground:hover {\n  color: hsl(var(--accent-foreground));\n}\n.hover\\:underline:hover {\n  text-decoration-line: underline;\n}\n.hover\\:opacity-100:hover {\n  opacity: 1;\n}\n.focus\\:border-\\[\\#2271b1\\]:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(34 113 177 / var(--tw-border-opacity, 1));\n}\n.focus\\:bg-accent:focus {\n  background-color: hsl(var(--accent));\n}\n.focus\\:text-accent-foreground:focus {\n  color: hsl(var(--accent-foreground));\n}\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.focus\\:ring-2:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n.focus\\:ring-\\[\\#2271b1\\]:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(34 113 177 / var(--tw-ring-opacity, 1));\n}\n.focus\\:ring-ring:focus {\n  --tw-ring-color: hsl(var(--ring));\n}\n.focus\\:ring-offset-2:focus {\n  --tw-ring-offset-width: 2px;\n}\n.focus-visible\\:outline-none:focus-visible {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n.focus-visible\\:ring-2:focus-visible {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n.focus-visible\\:ring-ring:focus-visible {\n  --tw-ring-color: hsl(var(--ring));\n}\n.focus-visible\\:ring-offset-2:focus-visible {\n  --tw-ring-offset-width: 2px;\n}\n.disabled\\:pointer-events-none:disabled {\n  pointer-events: none;\n}\n.disabled\\:cursor-not-allowed:disabled {\n  cursor: not-allowed;\n}\n.disabled\\:opacity-50:disabled {\n  opacity: 0.5;\n}\n.peer:disabled ~ .peer-disabled\\:cursor-not-allowed {\n  cursor: not-allowed;\n}\n.peer:disabled ~ .peer-disabled\\:opacity-70 {\n  opacity: 0.7;\n}\n.data-\\[disabled\\]\\:pointer-events-none[data-disabled] {\n  pointer-events: none;\n}\n.data-\\[side\\=bottom\\]\\:translate-y-1[data-side="bottom"] {\n  --tw-translate-y: 0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[side\\=left\\]\\:-translate-x-1[data-side="left"] {\n  --tw-translate-x: -0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[side\\=right\\]\\:translate-x-1[data-side="right"] {\n  --tw-translate-x: 0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[side\\=top\\]\\:-translate-y-1[data-side="top"] {\n  --tw-translate-y: -0.25rem;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\n.data-\\[state\\=checked\\]\\:border-\\[\\#2271b1\\][data-state="checked"] {\n  --tw-border-opacity: 1;\n  border-color: rgb(34 113 177 / var(--tw-border-opacity, 1));\n}\n.data-\\[state\\=active\\]\\:bg-background[data-state="active"] {\n  background-color: hsl(var(--background));\n}\n.data-\\[state\\=checked\\]\\:bg-\\[\\#2271b1\\][data-state="checked"] {\n  --tw-bg-opacity: 1;\n  background-color: rgb(34 113 177 / var(--tw-bg-opacity, 1));\n}\n.data-\\[state\\=checked\\]\\:bg-primary[data-state="checked"] {\n  background-color: hsl(var(--primary));\n}\n.data-\\[state\\=open\\]\\:bg-accent[data-state="open"] {\n  background-color: hsl(var(--accent));\n}\n.data-\\[state\\=selected\\]\\:bg-muted[data-state="selected"] {\n  background-color: hsl(var(--muted));\n}\n.data-\\[placeholder\\]\\:text-muted-foreground[data-placeholder] {\n  color: hsl(var(--muted-foreground));\n}\n.data-\\[state\\=active\\]\\:text-foreground[data-state="active"] {\n  color: hsl(var(--foreground));\n}\n.data-\\[state\\=checked\\]\\:text-primary-foreground[data-state="checked"] {\n  color: hsl(var(--primary-foreground));\n}\n.data-\\[state\\=open\\]\\:text-muted-foreground[data-state="open"] {\n  color: hsl(var(--muted-foreground));\n}\n.data-\\[disabled\\]\\:opacity-50[data-disabled] {\n  opacity: 0.5;\n}\n.data-\\[state\\=active\\]\\:shadow-sm[data-state="active"] {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n.data-\\[state\\=open\\]\\:animate-in[data-state="open"] {\n  animation-name: enter;\n  animation-duration: 150ms;\n  --tw-enter-opacity: initial;\n  --tw-enter-scale: initial;\n  --tw-enter-rotate: initial;\n  --tw-enter-translate-x: initial;\n  --tw-enter-translate-y: initial;\n}\n.data-\\[state\\=closed\\]\\:animate-out[data-state="closed"] {\n  animation-name: exit;\n  animation-duration: 150ms;\n  --tw-exit-opacity: initial;\n  --tw-exit-scale: initial;\n  --tw-exit-rotate: initial;\n  --tw-exit-translate-x: initial;\n  --tw-exit-translate-y: initial;\n}\n.data-\\[state\\=closed\\]\\:fade-out-0[data-state="closed"] {\n  --tw-exit-opacity: 0;\n}\n.data-\\[state\\=open\\]\\:fade-in-0[data-state="open"] {\n  --tw-enter-opacity: 0;\n}\n.data-\\[state\\=closed\\]\\:zoom-out-95[data-state="closed"] {\n  --tw-exit-scale: .95;\n}\n.data-\\[state\\=open\\]\\:zoom-in-95[data-state="open"] {\n  --tw-enter-scale: .95;\n}\n.data-\\[side\\=bottom\\]\\:slide-in-from-top-2[data-side="bottom"] {\n  --tw-enter-translate-y: -0.5rem;\n}\n.data-\\[side\\=left\\]\\:slide-in-from-right-2[data-side="left"] {\n  --tw-enter-translate-x: 0.5rem;\n}\n.data-\\[side\\=right\\]\\:slide-in-from-left-2[data-side="right"] {\n  --tw-enter-translate-x: -0.5rem;\n}\n.data-\\[side\\=top\\]\\:slide-in-from-bottom-2[data-side="top"] {\n  --tw-enter-translate-y: 0.5rem;\n}\n.data-\\[state\\=closed\\]\\:slide-out-to-left-1\\/2[data-state="closed"] {\n  --tw-exit-translate-x: -50%;\n}\n.data-\\[state\\=closed\\]\\:slide-out-to-top-\\[48\\%\\][data-state="closed"] {\n  --tw-exit-translate-y: -48%;\n}\n.data-\\[state\\=open\\]\\:slide-in-from-left-1\\/2[data-state="open"] {\n  --tw-enter-translate-x: -50%;\n}\n.data-\\[state\\=open\\]\\:slide-in-from-top-\\[48\\%\\][data-state="open"] {\n  --tw-enter-translate-y: -48%;\n}\n@media (min-width: 640px) {\n\n  .sm\\:flex-row {\n    flex-direction: row;\n  }\n\n  .sm\\:justify-end {\n    justify-content: flex-end;\n  }\n\n  .sm\\:space-x-2 > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 0;\n    margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n    margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n  }\n\n  .sm\\:rounded-lg {\n    border-radius: var(--radius);\n  }\n\n  .sm\\:text-left {\n    text-align: left;\n  }\n}\n@media (min-width: 768px) {\n\n  .md\\:text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n.\\[\\&\\>span\\]\\:line-clamp-1>span {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n.\\[\\&\\>tr\\]\\:last\\:border-b-0:last-child>tr {\n  border-bottom-width: 0px;\n}\n.\\[\\&_svg\\]\\:pointer-events-none svg {\n  pointer-events: none;\n}\n.\\[\\&_svg\\]\\:size-4 svg {\n  width: 1rem;\n  height: 1rem;\n}\n.\\[\\&_svg\\]\\:shrink-0 svg {\n  flex-shrink: 0;\n}\n.\\[\\&_tr\\:last-child\\]\\:border-0 tr:last-child {\n  border-width: 0px;\n}\n.\\[\\&_tr\\]\\:border-b tr {\n  border-bottom-width: 1px;\n}\n',"",{version:3,sources:["webpack://./assets-src/js/globals.css"],names:[],mappings:"AAAA;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd,sBAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd;AAAc;;AAAd;EAAA,wBAAc;EAAd,wBAAc;EAAd,mBAAc;EAAd,mBAAc;EAAd,cAAc;EAAd,cAAc;EAAd,cAAc;EAAd,eAAc;EAAd,eAAc;EAAd,aAAc;EAAd,aAAc;EAAd,kBAAc;EAAd,sCAAc;EAAd,8BAAc;EAAd,6BAAc;EAAd,4BAAc;EAAd,eAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,kBAAc;EAAd,2BAAc;EAAd,4BAAc;EAAd,sCAAc;EAAd,kCAAc;EAAd,2BAAc;EAAd,sBAAc;EAAd,8BAAc;EAAd,YAAc;EAAd,kBAAc;EAAd,gBAAc;EAAd,iBAAc;EAAd,kBAAc;EAAd,cAAc;EAAd,gBAAc;EAAd,aAAc;EAAd,mBAAc;EAAd,qBAAc;EAAd,2BAAc;EAAd,yBAAc;EAAd,0BAAc;EAAd,2BAAc;EAAd,uBAAc;EAAd,wBAAc;EAAd,yBAAc;EAAd,sBAAc;EAAd,oBAAc;EAAd,sBAAc;EAAd,qBAAc;EAAd;AAAc,CAAd;;CAAc,CAAd;;;CAAc;;AAAd;;;EAAA,sBAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,mBAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;EAAA,gBAAc;AAAA;;AAAd;;;;;;;;CAAc;;AAAd;;EAAA,gBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gBAAc,EAAd,MAAc;EAAd,WAAc,EAAd,MAAc;EAAd,+HAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;EAAd,wCAAc,EAAd,MAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,SAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,iCAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;EAAA,kBAAc;EAAd,oBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;EAAd,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,mBAAc;AAAA;;AAAd;;;;;CAAc;;AAAd;;;;EAAA,+GAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,+BAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,cAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,cAAc;EAAd,cAAc;EAAd,kBAAc;EAAd,wBAAc;AAAA;;AAAd;EAAA,eAAc;AAAA;;AAAd;EAAA,WAAc;AAAA;;AAAd;;;;CAAc;;AAAd;EAAA,cAAc,EAAd,MAAc;EAAd,qBAAc,EAAd,MAAc;EAAd,yBAAc,EAAd,MAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;EAAA,oBAAc,EAAd,MAAc;EAAd,8BAAc,EAAd,MAAc;EAAd,gCAAc,EAAd,MAAc;EAAd,eAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;EAAd,uBAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;EAAd,SAAc,EAAd,MAAc;EAAd,UAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,oBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;;;EAAA,0BAAc,EAAd,MAAc;EAAd,6BAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,aAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,YAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,6BAAc,EAAd,MAAc;EAAd,oBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,wBAAc;AAAA;;AAAd;;;CAAc;;AAAd;EAAA,0BAAc,EAAd,MAAc;EAAd,aAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,kBAAc;AAAA;;AAAd;;CAAc;;AAAd;;;;;;;;;;;;;EAAA,SAAc;AAAA;;AAAd;EAAA,SAAc;EAAd,UAAc;AAAA;;AAAd;EAAA,UAAc;AAAA;;AAAd;;;EAAA,gBAAc;EAAd,SAAc;EAAd,UAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,UAAc;AAAA;;AAAd;;CAAc;;AAAd;EAAA,gBAAc;AAAA;;AAAd;;;CAAc;;AAAd;;EAAA,UAAc,EAAd,MAAc;EAAd,cAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;AAAA;;AAAd;;CAAc;AAAd;EAAA,eAAc;AAAA;;AAAd;;;;CAAc;;AAAd;;;;;;;;EAAA,cAAc,EAAd,MAAc;EAAd,sBAAc,EAAd,MAAc;AAAA;;AAAd;;CAAc;;AAAd;;EAAA,eAAc;EAAd,YAAc;AAAA;;AAAd,wEAAc;AAAd;EAAA,aAAc;AAAA;EAAd;IAAA,uBAAc;IAAd,uBAAc;IAAd,iBAAc;IAAd,4BAAc;IAAd,oBAAc;IAAd,+BAAc;IAAd,kBAAc;IAAd,8BAAc;IAAd,uBAAc;IAAd,+BAAc;IAAd,mBAAc;IAAd,8BAAc;IAAd,oBAAc;IAAd,4BAAc;IAAd,4BAAc;IAAd,kCAAc;IAAd,oBAAc;IAAd,mBAAc;IAAd,iBAAc;IAAd,qBAAc;IAAd,sBAAc;IAAd,sBAAc;IAAd,qBAAc;IAAd,qBAAc;IAAd,gBAAc;IAAd,8BAAc;IAAd,oCAAc;IAAd,+BAAc;IAAd,sCAAc;IAAd,gCAAc;IAAd,yCAAc;IAAd,6BAAc;IAAd,iCAAc;EAAA;;EAAd;IAAA,iBAAc;IAAd,mBAAc;EAAA;AAEd;EAAA,kBAAmB;EAAnB,UAAmB;EAAnB,WAAmB;EAAnB,UAAmB;EAAnB,YAAmB;EAAnB,gBAAmB;EAAnB,sBAAmB;EAAnB,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,sDAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,+DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,gEAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,8DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,4DAAmB;EAAnB;AAAmB;AAAnB;EAAA,uBAAmB;EAAnB,8DAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,sBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,qBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,iBAAmB;EAAnB;AAAmB;AAAnB;EAAA,eAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,mBAAmB;EAAnB;AAAmB;AAAnB;EAAA,kBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,oBAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,+EAAmB;EAAnB,mGAAmB;EAAnB;AAAmB;AAAnB;EAAA,6EAAmB;EAAnB,iGAAmB;EAAnB;AAAmB;AAAnB;EAAA,0CAAmB;EAAnB,uDAAmB;EAAnB;AAAmB;AAAnB;EAAA,8BAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;EAAA,wBAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA,+FAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA,4BAAmB;EAAnB,wDAAmB;EAAnB;AAAmB;AAAnB;EAAA;AAAmB;AAAnB;;EAAA;IAAA,mCAAmB;IAAnB;EAAmB;AAAA;AAAnB;;EAAA;IAAA,kCAAmB;IAAnB;EAAmB;AAAA;AAAnB;EAAA;AAAmB;AAFnB;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,mBAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,sBAsFA;EAtFA;AAsFA;AAtFA;EAAA,kBAsFA;EAtFA;AAsFA;AAtFA;EAAA,kBAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,oBAsFA;EAtFA;AAsFA;AAtFA;EAAA,oBAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,sBAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,8BAsFA;EAtFA;AAsFA;AAtFA;EAAA,2GAsFA;EAtFA,yGAsFA;EAtFA;AAsFA;AAtFA;EAAA,oBAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,8BAsFA;EAtFA;AAsFA;AAtFA;EAAA,2GAsFA;EAtFA,yGAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,yBAsFA;EAtFA;AAsFA;AAtFA;EAAA,0BAsFA;EAtFA;AAsFA;AAtFA;EAAA,yBAsFA;EAtFA;AAsFA;AAtFA;EAAA,0BAsFA;EAtFA;AAsFA;AAtFA;EAAA,sBAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,kBAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,0CAsFA;EAtFA,uDAsFA;EAtFA;AAsFA;AAtFA;EAAA,qBAsFA;EAtFA,yBAsFA;EAtFA,2BAsFA;EAtFA,yBAsFA;EAtFA,0BAsFA;EAtFA,+BAsFA;EAtFA;AAsFA;AAtFA;EAAA,oBAsFA;EAtFA,yBAsFA;EAtFA,0BAsFA;EAtFA,wBAsFA;EAtFA,yBAsFA;EAtFA,8BAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;;EAAA;IAAA;EAsFA;;EAtFA;IAAA;EAsFA;;EAtFA;IAAA,uBAsFA;IAtFA,sDAsFA;IAtFA;EAsFA;;EAtFA;IAAA;EAsFA;;EAtFA;IAAA;EAsFA;AAAA;AAtFA;;EAAA;IAAA,mBAsFA;IAtFA;EAsFA;AAAA;AAtFA;EAAA,gBAsFA;EAtFA,oBAsFA;EAtFA,4BAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA,WAsFA;EAtFA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA;AAtFA;EAAA;AAsFA",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-size: revert;\n    font-weight: revert;\n  }\n}\n"],sourceRoot:""}]);const i=l},221:(e,n,t)=>{"use strict";var r=t(540);function o(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var l={d:{f:a,r:function(){throw Error(o(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},i=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function c(e,n){return"font"===e?"":"string"==typeof n?"use-credentials"===n?n:"":void 0}n.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=l,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(o(299));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.flushSync=function(e){var n=s.T,t=l.p;try{if(s.T=null,l.p=2,e)return e()}finally{s.T=n,l.p=t,l.d.f()}},n.preconnect=function(e,n){"string"==typeof e&&(n=n?"string"==typeof(n=n.crossOrigin)?"use-credentials"===n?n:"":void 0:null,l.d.C(e,n))},n.prefetchDNS=function(e){"string"==typeof e&&l.d.D(e)},n.preinit=function(e,n){if("string"==typeof e&&n&&"string"==typeof n.as){var t=n.as,r=c(t,n.crossOrigin),o="string"==typeof n.integrity?n.integrity:void 0,a="string"==typeof n.fetchPriority?n.fetchPriority:void 0;"style"===t?l.d.S(e,"string"==typeof n.precedence?n.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:a}):"script"===t&&l.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:a,nonce:"string"==typeof n.nonce?n.nonce:void 0})}},n.preinitModule=function(e,n){if("string"==typeof e)if("object"==typeof n&&null!==n){if(null==n.as||"script"===n.as){var t=c(n.as,n.crossOrigin);l.d.M(e,{crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0})}}else null==n&&l.d.M(e)},n.preload=function(e,n){if("string"==typeof e&&"object"==typeof n&&null!==n&&"string"==typeof n.as){var t=n.as,r=c(t,n.crossOrigin);l.d.L(e,t,{crossOrigin:r,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0,type:"string"==typeof n.type?n.type:void 0,fetchPriority:"string"==typeof n.fetchPriority?n.fetchPriority:void 0,referrerPolicy:"string"==typeof n.referrerPolicy?n.referrerPolicy:void 0,imageSrcSet:"string"==typeof n.imageSrcSet?n.imageSrcSet:void 0,imageSizes:"string"==typeof n.imageSizes?n.imageSizes:void 0,media:"string"==typeof n.media?n.media:void 0})}},n.preloadModule=function(e,n){if("string"==typeof e)if(n){var t=c(n.as,n.crossOrigin);l.d.m(e,{as:"string"==typeof n.as&&"script"!==n.as?n.as:void 0,crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0})}else l.d.m(e)},n.requestFormReset=function(e){l.d.r(e)},n.unstable_batchedUpdates=function(e,n){return e(n)},n.useFormState=function(e,n,t){return s.H.useFormState(e,n,t)},n.useFormStatus=function(){return s.H.useHostTransitionStatus()},n.version="19.1.0"},247:(e,n,t)=>{"use strict";var r=t(982),o=t(540),a=t(961);function l(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function s(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function c(e){if(i(e)!==e)throw Error(l(188))}function u(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e;for(e=e.child;null!==e;){if(null!==(n=u(e)))return n;e=e.sibling}return null}var d=Object.assign,f=Symbol.for("react.element"),A=Symbol.for("react.transitional.element"),p=Symbol.for("react.portal"),m=Symbol.for("react.fragment"),h=Symbol.for("react.strict_mode"),g=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),y=Symbol.for("react.consumer"),v=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),x=Symbol.for("react.suspense"),E=Symbol.for("react.suspense_list"),k=Symbol.for("react.memo"),B=Symbol.for("react.lazy");Symbol.for("react.scope");var C=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var S=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var N=Symbol.iterator;function j(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var _=Symbol.for("react.client.reference");function F(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===_?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case m:return"Fragment";case g:return"Profiler";case h:return"StrictMode";case x:return"Suspense";case E:return"SuspenseList";case C:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case p:return"Portal";case v:return(e.displayName||"Context")+".Provider";case y:return(e._context.displayName||"Context")+".Consumer";case w:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case k:return null!==(n=e.displayName||null)?n:F(e.type)||"Memo";case B:n=e._payload,e=e._init;try{return F(e(n))}catch(e){}}return null}var P=Array.isArray,O=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,I=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,z={pending:!1,data:null,method:null,action:null},T=[],R=-1;function D(e){return{current:e}}function L(e){0>R||(e.current=T[R],T[R]=null,R--)}function M(e,n){R++,T[R]=e.current,e.current=n}var W=D(null),U=D(null),$=D(null),H=D(null);function q(e,n){switch(M($,n),M(U,e),M(W,null),n.nodeType){case 9:case 11:e=(e=n.documentElement)&&(e=e.namespaceURI)?rd(e):0;break;default:if(e=n.tagName,n=n.namespaceURI)e=od(n=rd(n),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}L(W),M(W,e)}function V(){L(W),L(U),L($)}function Y(e){null!==e.memoizedState&&M(H,e);var n=W.current,t=od(n,e.type);n!==t&&(M(U,e),M(W,t))}function Q(e){U.current===e&&(L(W),L(U)),H.current===e&&(L(H),Yd._currentValue=z)}var X=Object.prototype.hasOwnProperty,G=r.unstable_scheduleCallback,K=r.unstable_cancelCallback,Z=r.unstable_shouldYield,J=r.unstable_requestPaint,ee=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,te=r.unstable_ImmediatePriority,re=r.unstable_UserBlockingPriority,oe=r.unstable_NormalPriority,ae=r.unstable_LowPriority,le=r.unstable_IdlePriority,ie=r.log,se=r.unstable_setDisableYieldValue,ce=null,ue=null;function de(e){if("function"==typeof ie&&se(e),ue&&"function"==typeof ue.setStrictMode)try{ue.setStrictMode(ce,e)}catch(e){}}var fe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(Ae(e)/pe|0)|0},Ae=Math.log,pe=Math.LN2,me=256,he=4194304;function ge(e){var n=42&e;if(0!==n)return n;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,n,t){var r=e.pendingLanes;if(0===r)return 0;var o=0,a=e.suspendedLanes,l=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!=(r=i&~a)?o=ge(r):0!=(l&=i)?o=ge(l):t||0!=(t=i&~e)&&(o=ge(t)):0!=(i=r&~a)?o=ge(i):0!==l?o=ge(l):t||0!=(t=r&~e)&&(o=ge(t)),0===o?0:0===n||n===o||n&a||!((a=o&-o)>=(t=n&-n)||32===a&&4194048&t)?o:n}function ye(e,n){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&n)}function ve(e,n){switch(e){case 1:case 2:case 4:case 8:case 64:return n+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function we(){var e=me;return!(4194048&(me<<=1))&&(me=256),e}function xe(){var e=he;return!(62914560&(he<<=1))&&(he=4194304),e}function Ee(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function ke(e,n){e.pendingLanes|=n,268435456!==n&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Be(e,n,t){e.pendingLanes|=n,e.suspendedLanes&=~n;var r=31-fe(n);e.entangledLanes|=n,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&t}function Ce(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-fe(t),o=1<<r;o&n|e[r]&n&&(e[r]|=n),t&=~o}}function Se(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Ne(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function je(){var e=I.p;return 0!==e?e:void 0===(e=window.event)?32:lf(e.type)}var _e=Math.random().toString(36).slice(2),Fe="__reactFiber$"+_e,Pe="__reactProps$"+_e,Oe="__reactContainer$"+_e,Ie="__reactEvents$"+_e,ze="__reactListeners$"+_e,Te="__reactHandles$"+_e,Re="__reactResources$"+_e,De="__reactMarker$"+_e;function Le(e){delete e[Fe],delete e[Pe],delete e[Ie],delete e[ze],delete e[Te]}function Me(e){var n=e[Fe];if(n)return n;for(var t=e.parentNode;t;){if(n=t[Oe]||t[Fe]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=bd(e);null!==e;){if(t=e[Fe])return t;e=bd(e)}return n}t=(e=t).parentNode}return null}function We(e){if(e=e[Fe]||e[Oe]){var n=e.tag;if(5===n||6===n||13===n||26===n||27===n||3===n)return e}return null}function Ue(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e.stateNode;throw Error(l(33))}function $e(e){var n=e[Re];return n||(n=e[Re]={hoistableStyles:new Map,hoistableScripts:new Map}),n}function He(e){e[De]=!0}var qe=new Set,Ve={};function Ye(e,n){Qe(e,n),Qe(e+"Capture",n)}function Qe(e,n){for(Ve[e]=n,e=0;e<n.length;e++)qe.add(n[e])}var Xe,Ge,Ke=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},Je={};function en(e,n,t){if(o=n,X.call(Je,o)||!X.call(Ze,o)&&(Ke.test(o)?Je[o]=!0:(Ze[o]=!0,0)))if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":return void e.removeAttribute(n);case"boolean":var r=n.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(n)}e.setAttribute(n,""+t)}var o}function nn(e,n,t){if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttribute(n,""+t)}}function tn(e,n,t,r){if(null===r)e.removeAttribute(t);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttributeNS(n,t,""+r)}}function rn(e){if(void 0===Xe)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);Xe=n&&n[1]||"",Ge=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Xe+e+Ge}var on=!1;function an(e,n){if(!e||on)return"";on=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(n){var t=function(){throw Error()};if(Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}}else{try{throw Error()}catch(e){r=e}(t=e())&&"function"==typeof t.catch&&t.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),l=a[0],i=a[1];if(l&&i){var s=l.split("\n"),c=i.split("\n");for(o=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;o<c.length&&!c[o].includes("DetermineComponentFrameRoot");)o++;if(r===s.length||o===c.length)for(r=s.length-1,o=c.length-1;1<=r&&0<=o&&s[r]!==c[o];)o--;for(;1<=r&&0<=o;r--,o--)if(s[r]!==c[o]){if(1!==r||1!==o)do{if(r--,0>--o||s[r]!==c[o]){var u="\n"+s[r].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=r&&0<=o);break}}}finally{on=!1,Error.prepareStackTrace=t}return(t=e?e.displayName||e.name:"")?rn(t):""}function ln(e){switch(e.tag){case 26:case 27:case 5:return rn(e.type);case 16:return rn("Lazy");case 13:return rn("Suspense");case 19:return rn("SuspenseList");case 0:case 15:return an(e.type,!1);case 11:return an(e.type.render,!1);case 1:return an(e.type,!0);case 31:return rn("Activity");default:return""}}function sn(e){try{var n="";do{n+=ln(e),e=e.return}while(e);return n}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function cn(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function un(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function dn(e){e._valueTracker||(e._valueTracker=function(e){var n=un(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function fn(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=un(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function An(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}var pn=/[\n"\\]/g;function mn(e){return e.replace(pn,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function hn(e,n,t,r,o,a,l,i){e.name="",null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.type=l:e.removeAttribute("type"),null!=n?"number"===l?(0===n&&""===e.value||e.value!=n)&&(e.value=""+cn(n)):e.value!==""+cn(n)&&(e.value=""+cn(n)):"submit"!==l&&"reset"!==l||e.removeAttribute("value"),null!=n?bn(e,l,cn(n)):null!=t?bn(e,l,cn(t)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+cn(i):e.removeAttribute("name")}function gn(e,n,t,r,o,a,l,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=n||null!=t){if(("submit"===a||"reset"===a)&&null==n)return;t=null!=t?""+cn(t):"",n=null!=n?""+cn(n):t,i||n===e.value||(e.value=n),e.defaultValue=n}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.name=l)}function bn(e,n,t){"number"===n&&An(e.ownerDocument)===e||e.defaultValue===""+t||(e.defaultValue=""+t)}function yn(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+cn(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function vn(e,n,t){null==n||((n=""+cn(n))!==e.value&&(e.value=n),null!=t)?e.defaultValue=null!=t?""+cn(t):"":e.defaultValue!==n&&(e.defaultValue=n)}function wn(e,n,t,r){if(null==n){if(null!=r){if(null!=t)throw Error(l(92));if(P(r)){if(1<r.length)throw Error(l(93));r=r[0]}t=r}null==t&&(t=""),n=t}t=cn(n),e.defaultValue=t,(r=e.textContent)===t&&""!==r&&null!==r&&(e.value=r)}function xn(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var En=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function kn(e,n,t){var r=0===n.indexOf("--");null==t||"boolean"==typeof t||""===t?r?e.setProperty(n,""):"float"===n?e.cssFloat="":e[n]="":r?e.setProperty(n,t):"number"!=typeof t||0===t||En.has(n)?"float"===n?e.cssFloat=t:e[n]=(""+t).trim():e[n]=t+"px"}function Bn(e,n,t){if(null!=n&&"object"!=typeof n)throw Error(l(62));if(e=e.style,null!=t){for(var r in t)!t.hasOwnProperty(r)||null!=n&&n.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in n)r=n[o],n.hasOwnProperty(o)&&t[o]!==r&&kn(e,o,r)}else for(var a in n)n.hasOwnProperty(a)&&kn(e,a,n[a])}function Cn(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Sn=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Nn=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function jn(e){return Nn.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var _n=null;function Fn(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pn=null,On=null;function In(e){var n=We(e);if(n&&(e=n.stateNode)){var t=e[Pe]||null;e:switch(e=n.stateNode,n.type){case"input":if(hn(e,t.value,t.defaultValue,t.defaultValue,t.checked,t.defaultChecked,t.type,t.name),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll('input[name="'+mn(""+n)+'"][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=r[Pe]||null;if(!o)throw Error(l(90));hn(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(n=0;n<t.length;n++)(r=t[n]).form===e.form&&fn(r)}break e;case"textarea":vn(e,t.value,t.defaultValue);break e;case"select":null!=(n=t.value)&&yn(e,!!t.multiple,n,!1)}}}var zn=!1;function Tn(e,n,t){if(zn)return e(n,t);zn=!0;try{return e(n)}finally{if(zn=!1,(null!==Pn||null!==On)&&(Mc(),Pn&&(n=Pn,e=On,On=Pn=null,In(n),e)))for(n=0;n<e.length;n++)In(e[n])}}function Rn(e,n){var t=e.stateNode;if(null===t)return null;var r=t[Pe]||null;if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(l(231,n,typeof t));return t}var Dn=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Ln=!1;if(Dn)try{var Mn={};Object.defineProperty(Mn,"passive",{get:function(){Ln=!0}}),window.addEventListener("test",Mn,Mn),window.removeEventListener("test",Mn,Mn)}catch(e){Ln=!1}var Wn=null,Un=null,$n=null;function Hn(){if($n)return $n;var e,n,t=Un,r=t.length,o="value"in Wn?Wn.value:Wn.textContent,a=o.length;for(e=0;e<r&&t[e]===o[e];e++);var l=r-e;for(n=1;n<=l&&t[r-n]===o[a-n];n++);return $n=o.slice(e,1<n?1-n:void 0)}function qn(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function Vn(){return!0}function Yn(){return!1}function Qn(e){function n(n,t,r,o,a){for(var l in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(o):o[l]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Vn:Yn,this.isPropagationStopped=Yn,this}return d(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vn)},persist:function(){},isPersistent:Vn}),n}var Xn,Gn,Kn,Zn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Jn=Qn(Zn),et=d({},Zn,{view:0,detail:0}),nt=Qn(et),tt=d({},et,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:At,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Kn&&(Kn&&"mousemove"===e.type?(Xn=e.screenX-Kn.screenX,Gn=e.screenY-Kn.screenY):Gn=Xn=0,Kn=e),Xn)},movementY:function(e){return"movementY"in e?e.movementY:Gn}}),rt=Qn(tt),ot=Qn(d({},tt,{dataTransfer:0})),at=Qn(d({},et,{relatedTarget:0})),lt=Qn(d({},Zn,{animationName:0,elapsedTime:0,pseudoElement:0})),it=Qn(d({},Zn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),st=Qn(d({},Zn,{data:0})),ct={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ut={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function ft(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=dt[e])&&!!n[e]}function At(){return ft}var pt=Qn(d({},et,{key:function(e){if(e.key){var n=ct[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=qn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ut[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:At,charCode:function(e){return"keypress"===e.type?qn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?qn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mt=Qn(d({},tt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),ht=Qn(d({},et,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:At})),gt=Qn(d({},Zn,{propertyName:0,elapsedTime:0,pseudoElement:0})),bt=Qn(d({},tt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),yt=Qn(d({},Zn,{newState:0,oldState:0})),vt=[9,13,27,32],wt=Dn&&"CompositionEvent"in window,xt=null;Dn&&"documentMode"in document&&(xt=document.documentMode);var Et=Dn&&"TextEvent"in window&&!xt,kt=Dn&&(!wt||xt&&8<xt&&11>=xt),Bt=String.fromCharCode(32),Ct=!1;function St(e,n){switch(e){case"keyup":return-1!==vt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Nt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jt=!1,_t={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ft(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!_t[e.type]:"textarea"===n}function Pt(e,n,t,r){Pn?On?On.push(r):On=[r]:Pn=r,0<(n=$u(n,"onChange")).length&&(t=new Jn("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Ot=null,It=null;function zt(e){zu(e,0)}function Tt(e){if(fn(Ue(e)))return e}function Rt(e,n){if("change"===e)return n}var Dt=!1;if(Dn){var Lt;if(Dn){var Mt="oninput"in document;if(!Mt){var Wt=document.createElement("div");Wt.setAttribute("oninput","return;"),Mt="function"==typeof Wt.oninput}Lt=Mt}else Lt=!1;Dt=Lt&&(!document.documentMode||9<document.documentMode)}function Ut(){Ot&&(Ot.detachEvent("onpropertychange",$t),It=Ot=null)}function $t(e){if("value"===e.propertyName&&Tt(It)){var n=[];Pt(n,It,e,Fn(e)),Tn(zt,n)}}function Ht(e,n,t){"focusin"===e?(Ut(),It=t,(Ot=n).attachEvent("onpropertychange",$t)):"focusout"===e&&Ut()}function qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Tt(It)}function Vt(e,n){if("click"===e)return Tt(n)}function Yt(e,n){if("input"===e||"change"===e)return Tt(n)}var Qt="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function Xt(e,n){if(Qt(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!X.call(n,o)||!Qt(e[o],n[o]))return!1}return!0}function Gt(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kt(e,n){var t,r=Gt(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Gt(r)}}function Zt(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?Zt(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function Jt(e){for(var n=An((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=An((e=n.contentWindow).document)}return n}function er(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}var nr=Dn&&"documentMode"in document&&11>=document.documentMode,tr=null,rr=null,or=null,ar=!1;function lr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;ar||null==tr||tr!==An(r)||(r="selectionStart"in(r=tr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},or&&Xt(or,r)||(or=r,0<(r=$u(rr,"onSelect")).length&&(n=new Jn("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=tr)))}function ir(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var sr={animationend:ir("Animation","AnimationEnd"),animationiteration:ir("Animation","AnimationIteration"),animationstart:ir("Animation","AnimationStart"),transitionrun:ir("Transition","TransitionRun"),transitionstart:ir("Transition","TransitionStart"),transitioncancel:ir("Transition","TransitionCancel"),transitionend:ir("Transition","TransitionEnd")},cr={},ur={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var n,t=sr[e];for(n in t)if(t.hasOwnProperty(n)&&n in ur)return cr[e]=t[n];return e}Dn&&(ur=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var fr=dr("animationend"),Ar=dr("animationiteration"),pr=dr("animationstart"),mr=dr("transitionrun"),hr=dr("transitionstart"),gr=dr("transitioncancel"),br=dr("transitionend"),yr=new Map,vr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,n){yr.set(e,n),Ye(n,[e])}vr.push("scrollEnd");var xr=new WeakMap;function Er(e,n){if("object"==typeof e&&null!==e){var t=xr.get(e);return void 0!==t?t:(n={value:e,source:n,stack:sn(n)},xr.set(e,n),n)}return{value:e,source:n,stack:sn(n)}}var kr=[],Br=0,Cr=0;function Sr(){for(var e=Br,n=Cr=Br=0;n<e;){var t=kr[n];kr[n++]=null;var r=kr[n];kr[n++]=null;var o=kr[n];kr[n++]=null;var a=kr[n];if(kr[n++]=null,null!==r&&null!==o){var l=r.pending;null===l?o.next=o:(o.next=l.next,l.next=o),r.pending=o}0!==a&&Fr(t,o,a)}}function Nr(e,n,t,r){kr[Br++]=e,kr[Br++]=n,kr[Br++]=t,kr[Br++]=r,Cr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function jr(e,n,t,r){return Nr(e,n,t,r),Pr(e)}function _r(e,n){return Nr(e,null,null,n),Pr(e)}function Fr(e,n,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t);for(var o=!1,a=e.return;null!==a;)a.childLanes|=t,null!==(r=a.alternate)&&(r.childLanes|=t),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(o=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,o&&null!==n&&(o=31-fe(t),null===(r=(e=a.hiddenUpdates)[o])?e[o]=[n]:r.push(n),n.lane=536870912|t),a):null}function Pr(e){if(50<Fc)throw Fc=0,Pc=null,Error(l(185));for(var n=e.return;null!==n;)n=(e=n).return;return 3===e.tag?e.stateNode:null}var Or={};function Ir(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function zr(e,n,t,r){return new Ir(e,n,t,r)}function Tr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rr(e,n){var t=e.alternate;return null===t?((t=zr(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=65011712&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t.refCleanup=e.refCleanup,t}function Dr(e,n){e.flags&=65011714;var t=e.alternate;return null===t?(e.childLanes=0,e.lanes=n,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=t.childLanes,e.lanes=t.lanes,e.child=t.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=t.memoizedProps,e.memoizedState=t.memoizedState,e.updateQueue=t.updateQueue,e.type=t.type,n=t.dependencies,e.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),e}function Lr(e,n,t,r,o,a){var i=0;if(r=e,"function"==typeof e)Tr(e)&&(i=1);else if("string"==typeof e)i=function(e,n,t){if(1===t||null!=n.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof n.precedence||"string"!=typeof n.href||""===n.href)break;return!0;case"link":if("string"!=typeof n.rel||"string"!=typeof n.href||""===n.href||n.onLoad||n.onError)break;return"stylesheet"!==n.rel||(e=n.disabled,"string"==typeof n.precedence&&null==e);case"script":if(n.async&&"function"!=typeof n.async&&"symbol"!=typeof n.async&&!n.onLoad&&!n.onError&&n.src&&"string"==typeof n.src)return!0}return!1}(e,t,W.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case C:return(e=zr(31,t,n,o)).elementType=C,e.lanes=a,e;case m:return Mr(t.children,o,a,n);case h:i=8,o|=24;break;case g:return(e=zr(12,t,n,2|o)).elementType=g,e.lanes=a,e;case x:return(e=zr(13,t,n,o)).elementType=x,e.lanes=a,e;case E:return(e=zr(19,t,n,o)).elementType=E,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case v:i=10;break e;case y:i=9;break e;case w:i=11;break e;case k:i=14;break e;case B:i=16,r=null;break e}i=29,t=Error(l(130,null===e?"null":typeof e,"")),r=null}return(n=zr(i,t,n,o)).elementType=e,n.type=r,n.lanes=a,n}function Mr(e,n,t,r){return(e=zr(7,e,r,n)).lanes=t,e}function Wr(e,n,t){return(e=zr(6,e,null,n)).lanes=t,e}function Ur(e,n,t){return(n=zr(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}var $r=[],Hr=0,qr=null,Vr=0,Yr=[],Qr=0,Xr=null,Gr=1,Kr="";function Zr(e,n){$r[Hr++]=Vr,$r[Hr++]=qr,qr=e,Vr=n}function Jr(e,n,t){Yr[Qr++]=Gr,Yr[Qr++]=Kr,Yr[Qr++]=Xr,Xr=e;var r=Gr;e=Kr;var o=32-fe(r)-1;r&=~(1<<o),t+=1;var a=32-fe(n)+o;if(30<a){var l=o-o%5;a=(r&(1<<l)-1).toString(32),r>>=l,o-=l,Gr=1<<32-fe(n)+o|t<<o|r,Kr=a+e}else Gr=1<<a|t<<o|r,Kr=e}function eo(e){null!==e.return&&(Zr(e,1),Jr(e,1,0))}function no(e){for(;e===qr;)qr=$r[--Hr],$r[Hr]=null,Vr=$r[--Hr],$r[Hr]=null;for(;e===Xr;)Xr=Yr[--Qr],Yr[Qr]=null,Kr=Yr[--Qr],Yr[Qr]=null,Gr=Yr[--Qr],Yr[Qr]=null}var to=null,ro=null,oo=!1,ao=null,lo=!1,io=Error(l(519));function so(e){throw mo(Er(Error(l(418,"")),e)),io}function co(e){var n=e.stateNode,t=e.type,r=e.memoizedProps;switch(n[Fe]=e,n[Pe]=r,t){case"dialog":Tu("cancel",n),Tu("close",n);break;case"iframe":case"object":case"embed":Tu("load",n);break;case"video":case"audio":for(t=0;t<Ou.length;t++)Tu(Ou[t],n);break;case"source":Tu("error",n);break;case"img":case"image":case"link":Tu("error",n),Tu("load",n);break;case"details":Tu("toggle",n);break;case"input":Tu("invalid",n),gn(n,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dn(n);break;case"select":Tu("invalid",n);break;case"textarea":Tu("invalid",n),wn(n,r.value,r.defaultValue,r.children),dn(n)}"string"!=typeof(t=r.children)&&"number"!=typeof t&&"bigint"!=typeof t||n.textContent===""+t||!0===r.suppressHydrationWarning||Xu(n.textContent,t)?(null!=r.popover&&(Tu("beforetoggle",n),Tu("toggle",n)),null!=r.onScroll&&Tu("scroll",n),null!=r.onScrollEnd&&Tu("scrollend",n),null!=r.onClick&&(n.onclick=Gu),n=!0):n=!1,n||so(e)}function uo(e){for(to=e.return;to;)switch(to.tag){case 5:case 13:return void(lo=!1);case 27:case 3:return void(lo=!0);default:to=to.return}}function fo(e){if(e!==to)return!1;if(!oo)return uo(e),oo=!0,!1;var n,t=e.tag;if((n=3!==t&&27!==t)&&((n=5===t)&&(n=!("form"!==(n=e.type)&&"button"!==n)||ad(e.type,e.memoizedProps)),n=!n),n&&ro&&so(e),uo(e),13===t){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType)if("/$"===(n=e.data)){if(0===t){ro=hd(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++;e=e.nextSibling}ro=null}}else 27===t?(t=ro,fd(e.type)?(e=gd,gd=null,ro=e):ro=t):ro=to?hd(e.stateNode.nextSibling):null;return!0}function Ao(){ro=to=null,oo=!1}function po(){var e=ao;return null!==e&&(null===bc?bc=e:bc.push.apply(bc,e),ao=null),e}function mo(e){null===ao?ao=[e]:ao.push(e)}var ho=D(null),go=null,bo=null;function yo(e,n,t){M(ho,n._currentValue),n._currentValue=t}function vo(e){e._currentValue=ho.current,L(ho)}function wo(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function xo(e,n,t,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var i=o.child;a=a.firstContext;e:for(;null!==a;){var s=a;a=o;for(var c=0;c<n.length;c++)if(s.context===n[c]){a.lanes|=t,null!==(s=a.alternate)&&(s.lanes|=t),wo(a.return,t,e),r||(i=null);break e}a=s.next}}else if(18===o.tag){if(null===(i=o.return))throw Error(l(341));i.lanes|=t,null!==(a=i.alternate)&&(a.lanes|=t),wo(i,t,e),i=null}else i=o.child;if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Eo(e,n,t,r){e=null;for(var o=n,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var i=o.alternate;if(null===i)throw Error(l(387));if(null!==(i=i.memoizedProps)){var s=o.type;Qt(o.pendingProps.value,i.value)||(null!==e?e.push(s):e=[s])}}else if(o===H.current){if(null===(i=o.alternate))throw Error(l(387));i.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Yd):e=[Yd])}o=o.return}null!==e&&xo(n,e,t,r),n.flags|=262144}function ko(e){for(e=e.firstContext;null!==e;){if(!Qt(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Bo(e){go=e,bo=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Co(e){return No(go,e)}function So(e,n){return null===go&&Bo(e),No(e,n)}function No(e,n){var t=n._currentValue;if(n={context:n,memoizedValue:t,next:null},null===bo){if(null===e)throw Error(l(308));bo=n,e.dependencies={lanes:0,firstContext:n},e.flags|=524288}else bo=bo.next=n;return t}var jo="undefined"!=typeof AbortController?AbortController:function(){var e=[],n=this.signal={aborted:!1,addEventListener:function(n,t){e.push(t)}};this.abort=function(){n.aborted=!0,e.forEach((function(e){return e()}))}},_o=r.unstable_scheduleCallback,Fo=r.unstable_NormalPriority,Po={$$typeof:v,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Oo(){return{controller:new jo,data:new Map,refCount:0}}function Io(e){e.refCount--,0===e.refCount&&_o(Fo,(function(){e.controller.abort()}))}var zo=null,To=0,Ro=0,Do=null;function Lo(){if(0==--To&&null!==zo){null!==Do&&(Do.status="fulfilled");var e=zo;zo=null,Ro=0,Do=null;for(var n=0;n<e.length;n++)(0,e[n])()}}var Mo=O.S;O.S=function(e,n){"object"==typeof n&&null!==n&&"function"==typeof n.then&&function(e,n){if(null===zo){var t=zo=[];To=0,Ro=Nu(),Do={status:"pending",value:void 0,then:function(e){t.push(e)}}}To++,n.then(Lo,Lo)}(0,n),null!==Mo&&Mo(e,n)};var Wo=D(null);function Uo(){var e=Wo.current;return null!==e?e:tc.pooledCache}function $o(e,n){M(Wo,null===n?Wo.current:n.pool)}function Ho(){var e=Uo();return null===e?null:{parent:Po._currentValue,pool:e}}var qo=Error(l(460)),Vo=Error(l(474)),Yo=Error(l(542)),Qo={then:function(){}};function Xo(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Go(){}function Ko(e,n,t){switch(void 0===(t=e[t])?e.push(n):t!==n&&(n.then(Go,Go),n=t),n.status){case"fulfilled":return n.value;case"rejected":throw ea(e=n.reason),e;default:if("string"==typeof n.status)n.then(Go,Go);else{if(null!==(e=tc)&&100<e.shellSuspendCounter)throw Error(l(482));(e=n).status="pending",e.then((function(e){if("pending"===n.status){var t=n;t.status="fulfilled",t.value=e}}),(function(e){if("pending"===n.status){var t=n;t.status="rejected",t.reason=e}}))}switch(n.status){case"fulfilled":return n.value;case"rejected":throw ea(e=n.reason),e}throw Zo=n,qo}}var Zo=null;function Jo(){if(null===Zo)throw Error(l(459));var e=Zo;return Zo=null,e}function ea(e){if(e===qo||e===Yo)throw Error(l(483))}var na=!1;function ta(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ra(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function oa(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function aa(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&nc){var o=r.pending;return null===o?n.next=n:(n.next=o.next,o.next=n),r.pending=n,n=Pr(e),Fr(e,null,t),n}return Nr(e,r,n,t),Pr(e)}function la(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194048&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,Ce(e,t)}}function ia(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var l={lane:t.lane,tag:t.tag,payload:t.payload,callback:null,next:null};null===a?o=a=l:a=a.next=l,t=t.next}while(null!==t);null===a?o=a=n:a=a.next=n}else o=a=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}var sa=!1;function ca(){if(sa&&null!==Do)throw Do}function ua(e,n,t,r){sa=!1;var o=e.updateQueue;na=!1;var a=o.firstBaseUpdate,l=o.lastBaseUpdate,i=o.shared.pending;if(null!==i){o.shared.pending=null;var s=i,c=s.next;s.next=null,null===l?a=c:l.next=c,l=s;var u=e.alternate;null!==u&&(i=(u=u.updateQueue).lastBaseUpdate)!==l&&(null===i?u.firstBaseUpdate=c:i.next=c,u.lastBaseUpdate=s)}if(null!==a){var f=o.baseState;for(l=0,u=c=s=null,i=a;;){var A=-536870913&i.lane,p=A!==i.lane;if(p?(oc&A)===A:(r&A)===A){0!==A&&A===Ro&&(sa=!0),null!==u&&(u=u.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var m=e,h=i;A=n;var g=t;switch(h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(g,f,A);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(A="function"==typeof(m=h.payload)?m.call(g,f,A):m))break e;f=d({},f,A);break e;case 2:na=!0}}null!==(A=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=o.callbacks)?o.callbacks=[A]:p.push(A))}else p={lane:A,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===u?(c=u=p,s=f):u=u.next=p,l|=A;if(null===(i=i.next)){if(null===(i=o.shared.pending))break;i=(p=i).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}null===u&&(s=f),o.baseState=s,o.firstBaseUpdate=c,o.lastBaseUpdate=u,null===a&&(o.shared.lanes=0),fc|=l,e.lanes=l,e.memoizedState=f}}function da(e,n){if("function"!=typeof e)throw Error(l(191,e));e.call(n)}function fa(e,n){var t=e.callbacks;if(null!==t)for(e.callbacks=null,e=0;e<t.length;e++)da(t[e],n)}var Aa=D(null),pa=D(0);function ma(e,n){M(pa,e=uc),M(Aa,n),uc=e|n.baseLanes}function ha(){M(pa,uc),M(Aa,Aa.current)}function ga(){uc=pa.current,L(Aa),L(pa)}var ba=0,ya=null,va=null,wa=null,xa=!1,Ea=!1,ka=!1,Ba=0,Ca=0,Sa=null,Na=0;function ja(){throw Error(l(321))}function _a(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!Qt(e[t],n[t]))return!1;return!0}function Fa(e,n,t,r,o,a){return ba=a,ya=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,O.H=null===e||null===e.memoizedState?ql:Vl,ka=!1,a=t(r,o),ka=!1,Ea&&(a=Oa(n,t,r,o)),Pa(e),a}function Pa(e){O.H=Hl;var n=null!==va&&null!==va.next;if(ba=0,wa=va=ya=null,xa=!1,Ca=0,Sa=null,n)throw Error(l(300));null===e||Ci||null!==(e=e.dependencies)&&ko(e)&&(Ci=!0)}function Oa(e,n,t,r){ya=e;var o=0;do{if(Ea&&(Sa=null),Ca=0,Ea=!1,25<=o)throw Error(l(301));if(o+=1,wa=va=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}O.H=Yl,a=n(t,r)}while(Ea);return a}function Ia(){var e=O.H,n=e.useState()[0];return n="function"==typeof n.then?Ma(n):n,e=e.useState()[0],(null!==va?va.memoizedState:null)!==e&&(ya.flags|=1024),n}function za(){var e=0!==Ba;return Ba=0,e}function Ta(e,n,t){n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~t}function Ra(e){if(xa){for(e=e.memoizedState;null!==e;){var n=e.queue;null!==n&&(n.pending=null),e=e.next}xa=!1}ba=0,wa=va=ya=null,Ea=!1,Ca=Ba=0,Sa=null}function Da(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wa?ya.memoizedState=wa=e:wa=wa.next=e,wa}function La(){if(null===va){var e=ya.alternate;e=null!==e?e.memoizedState:null}else e=va.next;var n=null===wa?ya.memoizedState:wa.next;if(null!==n)wa=n,va=e;else{if(null===e){if(null===ya.alternate)throw Error(l(467));throw Error(l(310))}e={memoizedState:(va=e).memoizedState,baseState:va.baseState,baseQueue:va.baseQueue,queue:va.queue,next:null},null===wa?ya.memoizedState=wa=e:wa=wa.next=e}return wa}function Ma(e){var n=Ca;return Ca+=1,null===Sa&&(Sa=[]),e=Ko(Sa,e,n),n=ya,null===(null===wa?n.memoizedState:wa.next)&&(n=n.alternate,O.H=null===n||null===n.memoizedState?ql:Vl),e}function Wa(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Ma(e);if(e.$$typeof===v)return Co(e)}throw Error(l(438,String(e)))}function Ua(e){var n=null,t=ya.updateQueue;if(null!==t&&(n=t.memoCache),null==n){var r=ya.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(n={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==n&&(n={data:[],index:0}),null===t&&(t={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=t),t.memoCache=n,void 0===(t=n.data[n.index]))for(t=n.data[n.index]=Array(e),r=0;r<e;r++)t[r]=S;return n.index++,t}function $a(e,n){return"function"==typeof n?n(e):n}function Ha(e){return qa(La(),va,e)}function qa(e,n,t){var r=e.queue;if(null===r)throw Error(l(311));r.lastRenderedReducer=t;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var i=o.next;o.next=a.next,a.next=i}n.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var s=i=null,c=null,u=n=o.next,d=!1;do{var f=-536870913&u.lane;if(f!==u.lane?(oc&f)===f:(ba&f)===f){var A=u.revertLane;if(0===A)null!==c&&(c=c.next={lane:0,revertLane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),f===Ro&&(d=!0);else{if((ba&A)===A){u=u.next,A===Ro&&(d=!0);continue}f={lane:0,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===c?(s=c=f,i=a):c=c.next=f,ya.lanes|=A,fc|=A}f=u.action,ka&&t(a,f),a=u.hasEagerState?u.eagerState:t(a,f)}else A={lane:f,revertLane:u.revertLane,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null},null===c?(s=c=A,i=a):c=c.next=A,ya.lanes|=f,fc|=f;u=u.next}while(null!==u&&u!==n);if(null===c?i=a:c.next=s,!Qt(a,e.memoizedState)&&(Ci=!0,d&&null!==(t=Do)))throw t;e.memoizedState=a,e.baseState=i,e.baseQueue=c,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Va(e){var n=La(),t=n.queue;if(null===t)throw Error(l(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,a=n.memoizedState;if(null!==o){t.pending=null;var i=o=o.next;do{a=e(a,i.action),i=i.next}while(i!==o);Qt(a,n.memoizedState)||(Ci=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function Ya(e,n,t){var r=ya,o=La(),a=oo;if(a){if(void 0===t)throw Error(l(407));t=t()}else t=n();var i=!Qt((va||o).memoizedState,t);if(i&&(o.memoizedState=t,Ci=!0),o=o.queue,hl(2048,8,Ga.bind(null,r,o,e),[e]),o.getSnapshot!==n||i||null!==wa&&1&wa.memoizedState.tag){if(r.flags|=2048,Al(9,{destroy:void 0,resource:void 0},Xa.bind(null,r,o,t,n),null),null===tc)throw Error(l(349));a||124&ba||Qa(r,n,t)}return t}function Qa(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=ya.updateQueue)?(n={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Xa(e,n,t,r){n.value=t,n.getSnapshot=r,Ka(n)&&Za(e)}function Ga(e,n,t){return t((function(){Ka(n)&&Za(e)}))}function Ka(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!Qt(e,t)}catch(e){return!0}}function Za(e){var n=_r(e,2);null!==n&&zc(n,0,2)}function Ja(e){var n=Da();if("function"==typeof e){var t=e;if(e=t(),ka){de(!0);try{t()}finally{de(!1)}}}return n.memoizedState=n.baseState=e,n.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:$a,lastRenderedState:e},n}function el(e,n,t,r){return e.baseState=t,qa(e,va,"function"==typeof r?r:$a)}function nl(e,n,t,r,o){if(Wl(e))throw Error(l(485));if(null!==(e=n.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==O.T?t(!0):a.isTransition=!1,r(a),null===(t=n.pending)?(a.next=n.pending=a,tl(n,a)):(a.next=t.next,n.pending=t.next=a)}}function tl(e,n){var t=n.action,r=n.payload,o=e.state;if(n.isTransition){var a=O.T,l={};O.T=l;try{var i=t(o,r),s=O.S;null!==s&&s(l,i),rl(e,n,i)}catch(t){al(e,n,t)}finally{O.T=a}}else try{rl(e,n,a=t(o,r))}catch(t){al(e,n,t)}}function rl(e,n,t){null!==t&&"object"==typeof t&&"function"==typeof t.then?t.then((function(t){ol(e,n,t)}),(function(t){return al(e,n,t)})):ol(e,n,t)}function ol(e,n,t){n.status="fulfilled",n.value=t,ll(n),e.state=t,null!==(n=e.pending)&&((t=n.next)===n?e.pending=null:(t=t.next,n.next=t,tl(e,t)))}function al(e,n,t){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{n.status="rejected",n.reason=t,ll(n),n=n.next}while(n!==r)}e.action=null}function ll(e){e=e.listeners;for(var n=0;n<e.length;n++)(0,e[n])()}function il(e,n){return n}function sl(e,n){if(oo){var t=tc.formState;if(null!==t){e:{var r=ya;if(oo){if(ro){n:{for(var o=ro,a=lo;8!==o.nodeType;){if(!a){o=null;break n}if(null===(o=hd(o.nextSibling))){o=null;break n}}o="F!"===(a=o.data)||"F"===a?o:null}if(o){ro=hd(o.nextSibling),r="F!"===o.data;break e}}so(r)}r=!1}r&&(n=t[0])}}return(t=Da()).memoizedState=t.baseState=n,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:il,lastRenderedState:n},t.queue=r,t=Dl.bind(null,ya,r),r.dispatch=t,r=Ja(!1),a=Ml.bind(null,ya,!1,r.queue),o={state:n,dispatch:null,action:e,pending:null},(r=Da()).queue=o,t=nl.bind(null,ya,o,a,t),o.dispatch=t,r.memoizedState=e,[n,t,!1]}function cl(e){return ul(La(),va,e)}function ul(e,n,t){if(n=qa(e,n,il)[0],e=Ha($a)[0],"object"==typeof n&&null!==n&&"function"==typeof n.then)try{var r=Ma(n)}catch(e){if(e===qo)throw Yo;throw e}else r=n;var o=(n=La()).queue,a=o.dispatch;return t!==n.memoizedState&&(ya.flags|=2048,Al(9,{destroy:void 0,resource:void 0},dl.bind(null,o,t),null)),[r,a,e]}function dl(e,n){e.action=n}function fl(e){var n=La(),t=va;if(null!==t)return ul(n,t,e);La(),n=n.memoizedState;var r=(t=La()).queue.dispatch;return t.memoizedState=e,[n,r,!1]}function Al(e,n,t,r){return e={tag:e,create:t,deps:r,inst:n,next:null},null===(n=ya.updateQueue)&&(n={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=n),null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function pl(){return La().memoizedState}function ml(e,n,t,r){var o=Da();r=void 0===r?null:r,ya.flags|=e,o.memoizedState=Al(1|n,{destroy:void 0,resource:void 0},t,r)}function hl(e,n,t,r){var o=La();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==va&&null!==r&&_a(r,va.memoizedState.deps)?o.memoizedState=Al(n,a,t,r):(ya.flags|=e,o.memoizedState=Al(1|n,a,t,r))}function gl(e,n){ml(8390656,8,e,n)}function bl(e,n){hl(2048,8,e,n)}function yl(e,n){return hl(4,2,e,n)}function vl(e,n){return hl(4,4,e,n)}function wl(e,n){if("function"==typeof n){e=e();var t=n(e);return function(){"function"==typeof t?t():n(null)}}if(null!=n)return e=e(),n.current=e,function(){n.current=null}}function xl(e,n,t){t=null!=t?t.concat([e]):null,hl(4,4,wl.bind(null,n,e),t)}function El(){}function kl(e,n){var t=La();n=void 0===n?null:n;var r=t.memoizedState;return null!==n&&_a(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Bl(e,n){var t=La();n=void 0===n?null:n;var r=t.memoizedState;if(null!==n&&_a(n,r[1]))return r[0];if(r=e(),ka){de(!0);try{e()}finally{de(!1)}}return t.memoizedState=[r,n],r}function Cl(e,n,t){return void 0===t||1073741824&ba?e.memoizedState=n:(e.memoizedState=t,e=Ic(),ya.lanes|=e,fc|=e,t)}function Sl(e,n,t,r){return Qt(t,n)?t:null!==Aa.current?(e=Cl(e,t,r),Qt(e,n)||(Ci=!0),e):42&ba?(e=Ic(),ya.lanes|=e,fc|=e,n):(Ci=!0,e.memoizedState=t)}function Nl(e,n,t,r,o){var a=I.p;I.p=0!==a&&8>a?a:8;var l,i,s,c=O.T,u={};O.T=u,Ml(e,!1,n,t);try{var d=o(),f=O.S;null!==f&&f(u,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?Ll(e,n,(l=r,i=[],s={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},d.then((function(){s.status="fulfilled",s.value=l;for(var e=0;e<i.length;e++)(0,i[e])(l)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),s),Oc()):Ll(e,n,r,Oc())}catch(t){Ll(e,n,{then:function(){},status:"rejected",reason:t},Oc())}finally{I.p=a,O.T=c}}function jl(){}function _l(e,n,t,r){if(5!==e.tag)throw Error(l(476));var o=Fl(e).queue;Nl(e,o,n,z,null===t?jl:function(){return Pl(e),t(r)})}function Fl(e){var n=e.memoizedState;if(null!==n)return n;var t={};return(n={memoizedState:z,baseState:z,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:$a,lastRenderedState:z},next:null}).next={memoizedState:t,baseState:t,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:$a,lastRenderedState:t},next:null},e.memoizedState=n,null!==(e=e.alternate)&&(e.memoizedState=n),n}function Pl(e){Ll(e,Fl(e).next.queue,{},Oc())}function Ol(){return Co(Yd)}function Il(){return La().memoizedState}function zl(){return La().memoizedState}function Tl(e){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var t=Oc(),r=aa(n,e=oa(t),t);return null!==r&&(zc(r,0,t),la(r,n,t)),n={cache:Oo()},void(e.payload=n)}n=n.return}}function Rl(e,n,t){var r=Oc();t={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null},Wl(e)?Ul(n,t):null!==(t=jr(e,n,t,r))&&(zc(t,0,r),$l(t,n,r))}function Dl(e,n,t){Ll(e,n,t,Oc())}function Ll(e,n,t,r){var o={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null};if(Wl(e))Ul(n,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=n.lastRenderedReducer))try{var l=n.lastRenderedState,i=a(l,t);if(o.hasEagerState=!0,o.eagerState=i,Qt(i,l))return Nr(e,n,o,0),null===tc&&Sr(),!1}catch(e){}if(null!==(t=jr(e,n,o,r)))return zc(t,0,r),$l(t,n,r),!0}return!1}function Ml(e,n,t,r){if(r={lane:2,revertLane:Nu(),action:r,hasEagerState:!1,eagerState:null,next:null},Wl(e)){if(n)throw Error(l(479))}else null!==(n=jr(e,t,r,2))&&zc(n,0,2)}function Wl(e){var n=e.alternate;return e===ya||null!==n&&n===ya}function Ul(e,n){Ea=xa=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function $l(e,n,t){if(4194048&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,Ce(e,t)}}var Hl={readContext:Co,use:Wa,useCallback:ja,useContext:ja,useEffect:ja,useImperativeHandle:ja,useLayoutEffect:ja,useInsertionEffect:ja,useMemo:ja,useReducer:ja,useRef:ja,useState:ja,useDebugValue:ja,useDeferredValue:ja,useTransition:ja,useSyncExternalStore:ja,useId:ja,useHostTransitionStatus:ja,useFormState:ja,useActionState:ja,useOptimistic:ja,useMemoCache:ja,useCacheRefresh:ja},ql={readContext:Co,use:Wa,useCallback:function(e,n){return Da().memoizedState=[e,void 0===n?null:n],e},useContext:Co,useEffect:gl,useImperativeHandle:function(e,n,t){t=null!=t?t.concat([e]):null,ml(4194308,4,wl.bind(null,n,e),t)},useLayoutEffect:function(e,n){return ml(4194308,4,e,n)},useInsertionEffect:function(e,n){ml(4,2,e,n)},useMemo:function(e,n){var t=Da();n=void 0===n?null:n;var r=e();if(ka){de(!0);try{e()}finally{de(!1)}}return t.memoizedState=[r,n],r},useReducer:function(e,n,t){var r=Da();if(void 0!==t){var o=t(n);if(ka){de(!0);try{t(n)}finally{de(!1)}}}else o=n;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=Rl.bind(null,ya,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Da().memoizedState=e},useState:function(e){var n=(e=Ja(e)).queue,t=Dl.bind(null,ya,n);return n.dispatch=t,[e.memoizedState,t]},useDebugValue:El,useDeferredValue:function(e,n){return Cl(Da(),e,n)},useTransition:function(){var e=Ja(!1);return e=Nl.bind(null,ya,e.queue,!0,!1),Da().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,n,t){var r=ya,o=Da();if(oo){if(void 0===t)throw Error(l(407));t=t()}else{if(t=n(),null===tc)throw Error(l(349));124&oc||Qa(r,n,t)}o.memoizedState=t;var a={value:t,getSnapshot:n};return o.queue=a,gl(Ga.bind(null,r,a,e),[e]),r.flags|=2048,Al(9,{destroy:void 0,resource:void 0},Xa.bind(null,r,a,t,n),null),t},useId:function(){var e=Da(),n=tc.identifierPrefix;if(oo){var t=Kr;n="«"+n+"R"+(t=(Gr&~(1<<32-fe(Gr)-1)).toString(32)+t),0<(t=Ba++)&&(n+="H"+t.toString(32)),n+="»"}else n="«"+n+"r"+(t=Na++).toString(32)+"»";return e.memoizedState=n},useHostTransitionStatus:Ol,useFormState:sl,useActionState:sl,useOptimistic:function(e){var n=Da();n.memoizedState=n.baseState=e;var t={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return n.queue=t,n=Ml.bind(null,ya,!0,t),t.dispatch=n,[e,n]},useMemoCache:Ua,useCacheRefresh:function(){return Da().memoizedState=Tl.bind(null,ya)}},Vl={readContext:Co,use:Wa,useCallback:kl,useContext:Co,useEffect:bl,useImperativeHandle:xl,useInsertionEffect:yl,useLayoutEffect:vl,useMemo:Bl,useReducer:Ha,useRef:pl,useState:function(){return Ha($a)},useDebugValue:El,useDeferredValue:function(e,n){return Sl(La(),va.memoizedState,e,n)},useTransition:function(){var e=Ha($a)[0],n=La().memoizedState;return["boolean"==typeof e?e:Ma(e),n]},useSyncExternalStore:Ya,useId:Il,useHostTransitionStatus:Ol,useFormState:cl,useActionState:cl,useOptimistic:function(e,n){return el(La(),0,e,n)},useMemoCache:Ua,useCacheRefresh:zl},Yl={readContext:Co,use:Wa,useCallback:kl,useContext:Co,useEffect:bl,useImperativeHandle:xl,useInsertionEffect:yl,useLayoutEffect:vl,useMemo:Bl,useReducer:Va,useRef:pl,useState:function(){return Va($a)},useDebugValue:El,useDeferredValue:function(e,n){var t=La();return null===va?Cl(t,e,n):Sl(t,va.memoizedState,e,n)},useTransition:function(){var e=Va($a)[0],n=La().memoizedState;return["boolean"==typeof e?e:Ma(e),n]},useSyncExternalStore:Ya,useId:Il,useHostTransitionStatus:Ol,useFormState:fl,useActionState:fl,useOptimistic:function(e,n){var t=La();return null!==va?el(t,0,e,n):(t.baseState=e,[e,t.queue.dispatch])},useMemoCache:Ua,useCacheRefresh:zl},Ql=null,Xl=0;function Gl(e){var n=Xl;return Xl+=1,null===Ql&&(Ql=[]),Ko(Ql,e,n)}function Kl(e,n){n=n.props.ref,e.ref=void 0!==n?n:null}function Zl(e,n){if(n.$$typeof===f)throw Error(l(525));throw e=Object.prototype.toString.call(n),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Jl(e){return(0,e._init)(e._payload)}function ei(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e){for(var n=new Map;null!==e;)null!==e.key?n.set(e.key,e):n.set(e.index,e),e=e.sibling;return n}function o(e,n){return(e=Rr(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=67108866,t):r:(n.flags|=67108866,t):(n.flags|=1048576,t)}function i(n){return e&&null===n.alternate&&(n.flags|=67108866),n}function s(e,n,t,r){return null===n||6!==n.tag?((n=Wr(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function c(e,n,t,r){var a=t.type;return a===m?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===B&&Jl(a)===n.type)?(Kl(n=o(n,t.props),t),n.return=e,n):(Kl(n=Lr(t.type,t.key,t.props,null,e.mode,r),t),n.return=e,n)}function u(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Ur(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function d(e,n,t,r,a){return null===n||7!==n.tag?((n=Mr(t,e.mode,r,a)).return=e,n):((n=o(n,t)).return=e,n)}function f(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return(n=Wr(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return Kl(t=Lr(n.type,n.key,n.props,null,e.mode,t),n),t.return=e,t;case p:return(n=Ur(n,e.mode,t)).return=e,n;case B:return f(e,n=(0,n._init)(n._payload),t)}if(P(n)||j(n))return(n=Mr(n,e.mode,t,null)).return=e,n;if("function"==typeof n.then)return f(e,Gl(n),t);if(n.$$typeof===v)return f(e,So(e,n),t);Zl(e,n)}return null}function h(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return null!==o?null:s(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return t.key===o?c(e,n,t,r):null;case p:return t.key===o?u(e,n,t,r):null;case B:return h(e,n,t=(o=t._init)(t._payload),r)}if(P(t)||j(t))return null!==o?null:d(e,n,t,r,null);if("function"==typeof t.then)return h(e,n,Gl(t),r);if(t.$$typeof===v)return h(e,n,So(e,t),r);Zl(e,t)}return null}function g(e,n,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o);case p:return u(n,e=e.get(null===r.key?t:r.key)||null,r,o);case B:return g(e,n,t,r=(0,r._init)(r._payload),o)}if(P(r)||j(r))return d(n,e=e.get(t)||null,r,o,null);if("function"==typeof r.then)return g(e,n,t,Gl(r),o);if(r.$$typeof===v)return g(e,n,t,So(n,r),o);Zl(n,r)}return null}function b(s,c,u,d){if("object"==typeof u&&null!==u&&u.type===m&&null===u.key&&(u=u.props.children),"object"==typeof u&&null!==u){switch(u.$$typeof){case A:e:{for(var y=u.key;null!==c;){if(c.key===y){if((y=u.type)===m){if(7===c.tag){t(s,c.sibling),(d=o(c,u.props.children)).return=s,s=d;break e}}else if(c.elementType===y||"object"==typeof y&&null!==y&&y.$$typeof===B&&Jl(y)===c.type){t(s,c.sibling),Kl(d=o(c,u.props),u),d.return=s,s=d;break e}t(s,c);break}n(s,c),c=c.sibling}u.type===m?((d=Mr(u.props.children,s.mode,d,u.key)).return=s,s=d):(Kl(d=Lr(u.type,u.key,u.props,null,s.mode,d),u),d.return=s,s=d)}return i(s);case p:e:{for(y=u.key;null!==c;){if(c.key===y){if(4===c.tag&&c.stateNode.containerInfo===u.containerInfo&&c.stateNode.implementation===u.implementation){t(s,c.sibling),(d=o(c,u.children||[])).return=s,s=d;break e}t(s,c);break}n(s,c),c=c.sibling}(d=Ur(u,s.mode,d)).return=s,s=d}return i(s);case B:return b(s,c,u=(y=u._init)(u._payload),d)}if(P(u))return function(o,l,i,s){for(var c=null,u=null,d=l,A=l=0,p=null;null!==d&&A<i.length;A++){d.index>A?(p=d,d=null):p=d.sibling;var m=h(o,d,i[A],s);if(null===m){null===d&&(d=p);break}e&&d&&null===m.alternate&&n(o,d),l=a(m,l,A),null===u?c=m:u.sibling=m,u=m,d=p}if(A===i.length)return t(o,d),oo&&Zr(o,A),c;if(null===d){for(;A<i.length;A++)null!==(d=f(o,i[A],s))&&(l=a(d,l,A),null===u?c=d:u.sibling=d,u=d);return oo&&Zr(o,A),c}for(d=r(d);A<i.length;A++)null!==(p=g(d,o,A,i[A],s))&&(e&&null!==p.alternate&&d.delete(null===p.key?A:p.key),l=a(p,l,A),null===u?c=p:u.sibling=p,u=p);return e&&d.forEach((function(e){return n(o,e)})),oo&&Zr(o,A),c}(s,c,u,d);if(j(u)){if("function"!=typeof(y=j(u)))throw Error(l(150));return function(o,i,s,c){if(null==s)throw Error(l(151));for(var u=null,d=null,A=i,p=i=0,m=null,b=s.next();null!==A&&!b.done;p++,b=s.next()){A.index>p?(m=A,A=null):m=A.sibling;var y=h(o,A,b.value,c);if(null===y){null===A&&(A=m);break}e&&A&&null===y.alternate&&n(o,A),i=a(y,i,p),null===d?u=y:d.sibling=y,d=y,A=m}if(b.done)return t(o,A),oo&&Zr(o,p),u;if(null===A){for(;!b.done;p++,b=s.next())null!==(b=f(o,b.value,c))&&(i=a(b,i,p),null===d?u=b:d.sibling=b,d=b);return oo&&Zr(o,p),u}for(A=r(A);!b.done;p++,b=s.next())null!==(b=g(A,o,p,b.value,c))&&(e&&null!==b.alternate&&A.delete(null===b.key?p:b.key),i=a(b,i,p),null===d?u=b:d.sibling=b,d=b);return e&&A.forEach((function(e){return n(o,e)})),oo&&Zr(o,p),u}(s,c,u=y.call(u),d)}if("function"==typeof u.then)return b(s,c,Gl(u),d);if(u.$$typeof===v)return b(s,c,So(s,u),d);Zl(s,u)}return"string"==typeof u&&""!==u||"number"==typeof u||"bigint"==typeof u?(u=""+u,null!==c&&6===c.tag?(t(s,c.sibling),(d=o(c,u)).return=s,s=d):(t(s,c),(d=Wr(u,s.mode,d)).return=s,s=d),i(s)):t(s,c)}return function(e,n,t,r){try{Xl=0;var o=b(e,n,t,r);return Ql=null,o}catch(n){if(n===qo||n===Yo)throw n;var a=zr(29,n,null,e.mode);return a.lanes=r,a.return=e,a}}}var ni=ei(!0),ti=ei(!1),ri=D(null),oi=null;function ai(e){var n=e.alternate;M(ci,1&ci.current),M(ri,e),null===oi&&(null===n||null!==Aa.current||null!==n.memoizedState)&&(oi=e)}function li(e){if(22===e.tag){if(M(ci,ci.current),M(ri,e),null===oi){var n=e.alternate;null!==n&&null!==n.memoizedState&&(oi=e)}}else ii()}function ii(){M(ci,ci.current),M(ri,ri.current)}function si(e){L(ri),oi===e&&(oi=null),L(ci)}var ci=D(0);function ui(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||md(t)))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}function di(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:d({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var fi={enqueueSetState:function(e,n,t){e=e._reactInternals;var r=Oc(),o=oa(r);o.payload=n,null!=t&&(o.callback=t),null!==(n=aa(e,o,r))&&(zc(n,0,r),la(n,e,r))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=Oc(),o=oa(r);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=aa(e,o,r))&&(zc(n,0,r),la(n,e,r))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=Oc(),r=oa(t);r.tag=2,null!=n&&(r.callback=n),null!==(n=aa(e,r,t))&&(zc(n,0,t),la(n,e,t))}};function Ai(e,n,t,r,o,a,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,l):!(n.prototype&&n.prototype.isPureReactComponent&&Xt(t,r)&&Xt(o,a))}function pi(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&fi.enqueueReplaceState(n,n.state,null)}function mi(e,n){var t=n;if("ref"in n)for(var r in t={},n)"ref"!==r&&(t[r]=n[r]);if(e=e.defaultProps)for(var o in t===n&&(t=d({},t)),e)void 0===t[o]&&(t[o]=e[o]);return t}var hi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function gi(e){hi(e)}function bi(e){console.error(e)}function yi(e){hi(e)}function vi(e,n){try{(0,e.onUncaughtError)(n.value,{componentStack:n.stack})}catch(e){setTimeout((function(){throw e}))}}function wi(e,n,t){try{(0,e.onCaughtError)(t.value,{componentStack:t.stack,errorBoundary:1===n.tag?n.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function xi(e,n,t){return(t=oa(t)).tag=3,t.payload={element:null},t.callback=function(){vi(e,n)},t}function Ei(e){return(e=oa(e)).tag=3,e}function ki(e,n,t,r){var o=t.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){wi(n,t,r)}}var l=t.stateNode;null!==l&&"function"==typeof l.componentDidCatch&&(e.callback=function(){wi(n,t,r),"function"!=typeof o&&(null===Ec?Ec=new Set([this]):Ec.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Bi=Error(l(461)),Ci=!1;function Si(e,n,t,r){n.child=null===e?ti(n,null,t,r):ni(n,e.child,t,r)}function Ni(e,n,t,r,o){t=t.render;var a=n.ref;if("ref"in r){var l={};for(var i in r)"ref"!==i&&(l[i]=r[i])}else l=r;return Bo(n),r=Fa(e,n,t,l,a,o),i=za(),null===e||Ci?(oo&&i&&eo(n),n.flags|=1,Si(e,n,r,o),n.child):(Ta(e,n,o),Qi(e,n,o))}function ji(e,n,t,r,o){if(null===e){var a=t.type;return"function"!=typeof a||Tr(a)||void 0!==a.defaultProps||null!==t.compare?((e=Lr(t.type,null,r,n,n.mode,o)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=a,_i(e,n,a,r,o))}if(a=e.child,!Xi(e,o)){var l=a.memoizedProps;if((t=null!==(t=t.compare)?t:Xt)(l,r)&&e.ref===n.ref)return Qi(e,n,o)}return n.flags|=1,(e=Rr(a,r)).ref=n.ref,e.return=n,n.child=e}function _i(e,n,t,r,o){if(null!==e){var a=e.memoizedProps;if(Xt(a,r)&&e.ref===n.ref){if(Ci=!1,n.pendingProps=r=a,!Xi(e,o))return n.lanes=e.lanes,Qi(e,n,o);131072&e.flags&&(Ci=!0)}}return Ii(e,n,t,r,o)}function Fi(e,n,t){var r=n.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&n.flags){if(r=null!==a?a.baseLanes|t:t,null!==e){for(o=n.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;n.childLanes=a&~r}else n.childLanes=0,n.child=null;return Pi(e,n,r,t)}if(!(536870912&t))return n.lanes=n.childLanes=536870912,Pi(e,n,null!==a?a.baseLanes|t:t,t);n.memoizedState={baseLanes:0,cachePool:null},null!==e&&$o(0,null!==a?a.cachePool:null),null!==a?ma(n,a):ha(),li(n)}else null!==a?($o(0,a.cachePool),ma(n,a),ii(),n.memoizedState=null):(null!==e&&$o(0,null),ha(),ii());return Si(e,n,o,t),n.child}function Pi(e,n,t,r){var o=Uo();return o=null===o?null:{parent:Po._currentValue,pool:o},n.memoizedState={baseLanes:t,cachePool:o},null!==e&&$o(0,null),ha(),li(n),null!==e&&Eo(e,n,r,!0),null}function Oi(e,n){var t=n.ref;if(null===t)null!==e&&null!==e.ref&&(n.flags|=4194816);else{if("function"!=typeof t&&"object"!=typeof t)throw Error(l(284));null!==e&&e.ref===t||(n.flags|=4194816)}}function Ii(e,n,t,r,o){return Bo(n),t=Fa(e,n,t,r,void 0,o),r=za(),null===e||Ci?(oo&&r&&eo(n),n.flags|=1,Si(e,n,t,o),n.child):(Ta(e,n,o),Qi(e,n,o))}function zi(e,n,t,r,o,a){return Bo(n),n.updateQueue=null,t=Oa(n,r,t,o),Pa(e),r=za(),null===e||Ci?(oo&&r&&eo(n),n.flags|=1,Si(e,n,t,a),n.child):(Ta(e,n,a),Qi(e,n,a))}function Ti(e,n,t,r,o){if(Bo(n),null===n.stateNode){var a=Or,l=t.contextType;"object"==typeof l&&null!==l&&(a=Co(l)),a=new t(r,a),n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=fi,n.stateNode=a,a._reactInternals=n,(a=n.stateNode).props=r,a.state=n.memoizedState,a.refs={},ta(n),l=t.contextType,a.context="object"==typeof l&&null!==l?Co(l):Or,a.state=n.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(di(n,t,l,r),a.state=n.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(l=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),l!==a.state&&fi.enqueueReplaceState(a,a.state,null),ua(n,r,a,o),ca(),a.state=n.memoizedState),"function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!0}else if(null===e){a=n.stateNode;var i=n.memoizedProps,s=mi(t,i);a.props=s;var c=a.context,u=t.contextType;l=Or,"object"==typeof u&&null!==u&&(l=Co(u));var d=t.getDerivedStateFromProps;u="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,i=n.pendingProps!==i,u||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i||c!==l)&&pi(n,a,r,l),na=!1;var f=n.memoizedState;a.state=f,ua(n,r,a,o),ca(),c=n.memoizedState,i||f!==c||na?("function"==typeof d&&(di(n,t,d,r),c=n.memoizedState),(s=na||Ai(n,t,s,r,f,c,l))?(u||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(n.flags|=4194308)):("function"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=c),a.props=r,a.state=c,a.context=l,r=s):("function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,ra(e,n),u=mi(t,l=n.memoizedProps),a.props=u,d=n.pendingProps,f=a.context,c=t.contextType,s=Or,"object"==typeof c&&null!==c&&(s=Co(c)),(c="function"==typeof(i=t.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==d||f!==s)&&pi(n,a,r,s),na=!1,f=n.memoizedState,a.state=f,ua(n,r,a,o),ca();var A=n.memoizedState;l!==d||f!==A||na||null!==e&&null!==e.dependencies&&ko(e.dependencies)?("function"==typeof i&&(di(n,t,i,r),A=n.memoizedState),(u=na||Ai(n,t,u,r,f,A,s)||null!==e&&null!==e.dependencies&&ko(e.dependencies))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,A,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,A,s)),"function"==typeof a.componentDidUpdate&&(n.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=A),a.props=r,a.state=A,a.context=s,r=u):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),r=!1)}return a=r,Oi(e,n),r=!!(128&n.flags),a||r?(a=n.stateNode,t=r&&"function"!=typeof t.getDerivedStateFromError?null:a.render(),n.flags|=1,null!==e&&r?(n.child=ni(n,e.child,null,o),n.child=ni(n,null,t,o)):Si(e,n,t,o),n.memoizedState=a.state,e=n.child):e=Qi(e,n,o),e}function Ri(e,n,t,r){return Ao(),n.flags|=256,Si(e,n,t,r),n.child}var Di={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Li(e){return{baseLanes:e,cachePool:Ho()}}function Mi(e,n,t){return e=null!==e?e.childLanes&~t:0,n&&(e|=mc),e}function Wi(e,n,t){var r,o=n.pendingProps,a=!1,i=!!(128&n.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&ci.current)),r&&(a=!0,n.flags&=-129),r=!!(32&n.flags),n.flags&=-33,null===e){if(oo){if(a?ai(n):ii(),oo){var s,c=ro;if(s=c){e:{for(s=c,c=lo;8!==s.nodeType;){if(!c){c=null;break e}if(null===(s=hd(s.nextSibling))){c=null;break e}}c=s}null!==c?(n.memoizedState={dehydrated:c,treeContext:null!==Xr?{id:Gr,overflow:Kr}:null,retryLane:536870912,hydrationErrors:null},(s=zr(18,null,null,0)).stateNode=c,s.return=n,n.child=s,to=n,ro=null,s=!0):s=!1}s||so(n)}if(null!==(c=n.memoizedState)&&null!==(c=c.dehydrated))return md(c)?n.lanes=32:n.lanes=536870912,null;si(n)}return c=o.children,o=o.fallback,a?(ii(),c=$i({mode:"hidden",children:c},a=n.mode),o=Mr(o,a,t,null),c.return=n,o.return=n,c.sibling=o,n.child=c,(a=n.child).memoizedState=Li(t),a.childLanes=Mi(e,r,t),n.memoizedState=Di,o):(ai(n),Ui(n,c))}if(null!==(s=e.memoizedState)&&null!==(c=s.dehydrated)){if(i)256&n.flags?(ai(n),n.flags&=-257,n=Hi(e,n,t)):null!==n.memoizedState?(ii(),n.child=e.child,n.flags|=128,n=null):(ii(),a=o.fallback,c=n.mode,o=$i({mode:"visible",children:o.children},c),(a=Mr(a,c,t,null)).flags|=2,o.return=n,a.return=n,o.sibling=a,n.child=o,ni(n,e.child,null,t),(o=n.child).memoizedState=Li(t),o.childLanes=Mi(e,r,t),n.memoizedState=Di,n=a);else if(ai(n),md(c)){if(r=c.nextSibling&&c.nextSibling.dataset)var u=r.dgst;r=u,(o=Error(l(419))).stack="",o.digest=r,mo({value:o,source:null,stack:null}),n=Hi(e,n,t)}else if(Ci||Eo(e,n,t,!1),r=!!(t&e.childLanes),Ci||r){if(null!==(r=tc)&&0!==(o=(o=42&(o=t&-t)?1:Se(o))&(r.suspendedLanes|t)?0:o)&&o!==s.retryLane)throw s.retryLane=o,_r(e,o),zc(r,0,o),Bi;"$?"===c.data||Vc(),n=Hi(e,n,t)}else"$?"===c.data?(n.flags|=192,n.child=e.child,n=null):(e=s.treeContext,ro=hd(c.nextSibling),to=n,oo=!0,ao=null,lo=!1,null!==e&&(Yr[Qr++]=Gr,Yr[Qr++]=Kr,Yr[Qr++]=Xr,Gr=e.id,Kr=e.overflow,Xr=n),(n=Ui(n,o.children)).flags|=4096);return n}return a?(ii(),a=o.fallback,c=n.mode,u=(s=e.child).sibling,(o=Rr(s,{mode:"hidden",children:o.children})).subtreeFlags=65011712&s.subtreeFlags,null!==u?a=Rr(u,a):(a=Mr(a,c,t,null)).flags|=2,a.return=n,o.return=n,o.sibling=a,n.child=o,o=a,a=n.child,null===(c=e.child.memoizedState)?c=Li(t):(null!==(s=c.cachePool)?(u=Po._currentValue,s=s.parent!==u?{parent:u,pool:u}:s):s=Ho(),c={baseLanes:c.baseLanes|t,cachePool:s}),a.memoizedState=c,a.childLanes=Mi(e,r,t),n.memoizedState=Di,o):(ai(n),e=(t=e.child).sibling,(t=Rr(t,{mode:"visible",children:o.children})).return=n,t.sibling=null,null!==e&&(null===(r=n.deletions)?(n.deletions=[e],n.flags|=16):r.push(e)),n.child=t,n.memoizedState=null,t)}function Ui(e,n){return(n=$i({mode:"visible",children:n},e.mode)).return=e,e.child=n}function $i(e,n){return(e=zr(22,e,null,n)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Hi(e,n,t){return ni(n,e.child,null,t),(e=Ui(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function qi(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),wo(e.return,n,t)}function Vi(e,n,t,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(a.isBackwards=n,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=t,a.tailMode=o)}function Yi(e,n,t){var r=n.pendingProps,o=r.revealOrder,a=r.tail;if(Si(e,n,r.children,t),2&(r=ci.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&qi(e,t,n);else if(19===e.tag)qi(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(M(ci,r),o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===ui(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),Vi(n,!1,o,t,a);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ui(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}Vi(n,!0,t,null,a);break;case"together":Vi(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Qi(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),fc|=n.lanes,!(t&n.childLanes)){if(null===e)return null;if(Eo(e,n,t,!1),!(t&n.childLanes))return null}if(null!==e&&n.child!==e.child)throw Error(l(153));if(null!==n.child){for(t=Rr(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Rr(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Xi(e,n){return!!(e.lanes&n)||!(null===(e=e.dependencies)||!ko(e))}function Gi(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps)Ci=!0;else{if(!(Xi(e,t)||128&n.flags))return Ci=!1,function(e,n,t){switch(n.tag){case 3:q(n,n.stateNode.containerInfo),yo(0,Po,e.memoizedState.cache),Ao();break;case 27:case 5:Y(n);break;case 4:q(n,n.stateNode.containerInfo);break;case 10:yo(0,n.type,n.memoizedProps.value);break;case 13:var r=n.memoizedState;if(null!==r)return null!==r.dehydrated?(ai(n),n.flags|=128,null):t&n.child.childLanes?Wi(e,n,t):(ai(n),null!==(e=Qi(e,n,t))?e.sibling:null);ai(n);break;case 19:var o=!!(128&e.flags);if((r=!!(t&n.childLanes))||(Eo(e,n,t,!1),r=!!(t&n.childLanes)),o){if(r)return Yi(e,n,t);n.flags|=128}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),M(ci,ci.current),r)break;return null;case 22:case 23:return n.lanes=0,Fi(e,n,t);case 24:yo(0,Po,e.memoizedState.cache)}return Qi(e,n,t)}(e,n,t);Ci=!!(131072&e.flags)}else Ci=!1,oo&&1048576&n.flags&&Jr(n,Vr,n.index);switch(n.lanes=0,n.tag){case 16:e:{e=n.pendingProps;var r=n.elementType,o=r._init;if(r=o(r._payload),n.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===w){n.tag=11,n=Ni(null,n,r,e,t);break e}if(o===k){n.tag=14,n=ji(null,n,r,e,t);break e}}throw n=F(r)||r,Error(l(306,n,""))}Tr(r)?(e=mi(r,e),n.tag=1,n=Ti(null,n,r,e,t)):(n.tag=0,n=Ii(null,n,r,e,t))}return n;case 0:return Ii(e,n,n.type,n.pendingProps,t);case 1:return Ti(e,n,r=n.type,o=mi(r,n.pendingProps),t);case 3:e:{if(q(n,n.stateNode.containerInfo),null===e)throw Error(l(387));r=n.pendingProps;var a=n.memoizedState;o=a.element,ra(e,n),ua(n,r,null,t);var i=n.memoizedState;if(r=i.cache,yo(0,Po,r),r!==a.cache&&xo(n,[Po],t,!0),ca(),r=i.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:i.cache},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){n=Ri(e,n,r,t);break e}if(r!==o){mo(o=Er(Error(l(424)),n)),n=Ri(e,n,r,t);break e}for(e=9===(e=n.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,ro=hd(e.firstChild),to=n,oo=!0,ao=null,lo=!0,t=ti(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(Ao(),r===o){n=Qi(e,n,t);break e}Si(e,n,r,t)}n=n.child}return n;case 26:return Oi(e,n),null===e?(t=Sd(n.type,null,n.pendingProps,null))?n.memoizedState=t:oo||(t=n.type,e=n.pendingProps,(r=td($.current).createElement(t))[Fe]=n,r[Pe]=e,Ju(r,t,e),He(r),n.stateNode=r):n.memoizedState=Sd(n.type,e.memoizedProps,n.pendingProps,e.memoizedState),null;case 27:return Y(n),null===e&&oo&&(r=n.stateNode=yd(n.type,n.pendingProps,$.current),to=n,lo=!0,o=ro,fd(n.type)?(gd=o,ro=hd(r.firstChild)):ro=o),Si(e,n,n.pendingProps.children,t),Oi(e,n),null===e&&(n.flags|=4194304),n.child;case 5:return null===e&&oo&&((o=r=ro)&&(null!==(r=function(e,n,t,r){for(;1===e.nodeType;){var o=t;if(e.nodeName.toLowerCase()!==n.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[De])switch(n){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==n||"hidden"!==e.type)return e;var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=hd(e.nextSibling)))break}return null}(r,n.type,n.pendingProps,lo))?(n.stateNode=r,to=n,ro=hd(r.firstChild),lo=!1,o=!0):o=!1),o||so(n)),Y(n),o=n.type,a=n.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,ad(o,a)?r=null:null!==i&&ad(o,i)&&(n.flags|=32),null!==n.memoizedState&&(o=Fa(e,n,Ia,null,null,t),Yd._currentValue=o),Oi(e,n),Si(e,n,r,t),n.child;case 6:return null===e&&oo&&((e=t=ro)&&(null!==(t=function(e,n,t){if(""===n)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!t)return null;if(null===(e=hd(e.nextSibling)))return null}return e}(t,n.pendingProps,lo))?(n.stateNode=t,to=n,ro=null,e=!0):e=!1),e||so(n)),null;case 13:return Wi(e,n,t);case 4:return q(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=ni(n,null,r,t):Si(e,n,r,t),n.child;case 11:return Ni(e,n,n.type,n.pendingProps,t);case 7:return Si(e,n,n.pendingProps,t),n.child;case 8:case 12:return Si(e,n,n.pendingProps.children,t),n.child;case 10:return r=n.pendingProps,yo(0,n.type,r.value),Si(e,n,r.children,t),n.child;case 9:return o=n.type._context,r=n.pendingProps.children,Bo(n),r=r(o=Co(o)),n.flags|=1,Si(e,n,r,t),n.child;case 14:return ji(e,n,n.type,n.pendingProps,t);case 15:return _i(e,n,n.type,n.pendingProps,t);case 19:return Yi(e,n,t);case 31:return r=n.pendingProps,t=n.mode,r={mode:r.mode,children:r.children},null===e?((t=$i(r,t)).ref=n.ref,n.child=t,t.return=n,n=t):((t=Rr(e.child,r)).ref=n.ref,n.child=t,t.return=n,n=t),n;case 22:return Fi(e,n,t);case 24:return Bo(n),r=Co(Po),null===e?(null===(o=Uo())&&(o=tc,a=Oo(),o.pooledCache=a,a.refCount++,null!==a&&(o.pooledCacheLanes|=t),o=a),n.memoizedState={parent:r,cache:o},ta(n),yo(0,Po,o)):(!!(e.lanes&t)&&(ra(e,n),ua(n,null,null,t),ca()),o=e.memoizedState,a=n.memoizedState,o.parent!==r?(o={parent:r,cache:r},n.memoizedState=o,0===n.lanes&&(n.memoizedState=n.updateQueue.baseState=o),yo(0,Po,r)):(r=a.cache,yo(0,Po,r),r!==o.cache&&xo(n,[Po],t,!0))),Si(e,n,n.pendingProps.children,t),n.child;case 29:throw n.pendingProps}throw Error(l(156,n.tag))}function Ki(e){e.flags|=4}function Zi(e,n){if("stylesheet"!==n.type||4&n.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Md(n)){if(null!==(n=ri.current)&&((4194048&oc)===oc?null!==oi:(62914560&oc)!==oc&&!(536870912&oc)||n!==oi))throw Zo=Qo,Vo;e.flags|=8192}}function Ji(e,n){null!==n&&(e.flags|=4),16384&e.flags&&(n=22!==e.tag?xe():536870912,e.lanes|=n,hc|=n)}function es(e,n){if(!oo)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ns(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function ts(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return ns(n),null;case 3:return t=n.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),n.memoizedState.cache!==r&&(n.flags|=2048),vo(Po),V(),t.pendingContext&&(t.context=t.pendingContext,t.pendingContext=null),null!==e&&null!==e.child||(fo(n)?Ki(n):null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,po())),ns(n),null;case 26:return t=n.memoizedState,null===e?(Ki(n),null!==t?(ns(n),Zi(n,t)):(ns(n),n.flags&=-16777217)):t?t!==e.memoizedState?(Ki(n),ns(n),Zi(n,t)):(ns(n),n.flags&=-16777217):(e.memoizedProps!==r&&Ki(n),ns(n),n.flags&=-16777217),null;case 27:Q(n),t=$.current;var o=n.type;if(null!==e&&null!=n.stateNode)e.memoizedProps!==r&&Ki(n);else{if(!r){if(null===n.stateNode)throw Error(l(166));return ns(n),null}e=W.current,fo(n)?co(n):(e=yd(o,r,t),n.stateNode=e,Ki(n))}return ns(n),null;case 5:if(Q(n),t=n.type,null!==e&&null!=n.stateNode)e.memoizedProps!==r&&Ki(n);else{if(!r){if(null===n.stateNode)throw Error(l(166));return ns(n),null}if(e=W.current,fo(n))co(n);else{switch(o=td($.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",t);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;default:switch(t){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",t);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(t,{is:r.is}):o.createElement(t)}}e[Fe]=n,e[Pe]=r;e:for(o=n.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===n)break e;for(;null===o.sibling;){if(null===o.return||o.return===n)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}n.stateNode=e;e:switch(Ju(e,t,r),t){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Ki(n)}}return ns(n),n.flags&=-16777217,null;case 6:if(e&&null!=n.stateNode)e.memoizedProps!==r&&Ki(n);else{if("string"!=typeof r&&null===n.stateNode)throw Error(l(166));if(e=$.current,fo(n)){if(e=n.stateNode,t=n.memoizedProps,r=null,null!==(o=to))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[Fe]=n,(e=!!(e.nodeValue===t||null!==r&&!0===r.suppressHydrationWarning||Xu(e.nodeValue,t)))||so(n)}else(e=td(e).createTextNode(r))[Fe]=n,n.stateNode=e}return ns(n),null;case 13:if(r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=fo(n),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(l(318));if(!(o=null!==(o=n.memoizedState)?o.dehydrated:null))throw Error(l(317));o[Fe]=n}else Ao(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;ns(n),o=!1}else o=po(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&n.flags?(si(n),n):(si(n),null)}if(si(n),128&n.flags)return n.lanes=t,n;if(t=null!==r,e=null!==e&&null!==e.memoizedState,t){o=null,null!==(r=n.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==o&&(r.flags|=2048)}return t!==e&&t&&(n.child.flags|=8192),Ji(n,n.updateQueue),ns(n),null;case 4:return V(),null===e&&Lu(n.stateNode.containerInfo),ns(n),null;case 10:return vo(n.type),ns(n),null;case 19:if(L(ci),null===(o=n.memoizedState))return ns(n),null;if(r=!!(128&n.flags),null===(a=o.rendering))if(r)es(o,!1);else{if(0!==dc||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(a=ui(e))){for(n.flags|=128,es(o,!1),e=a.updateQueue,n.updateQueue=e,Ji(n,e),n.subtreeFlags=0,e=t,t=n.child;null!==t;)Dr(t,e),t=t.sibling;return M(ci,1&ci.current|2),n.child}e=e.sibling}null!==o.tail&&ee()>wc&&(n.flags|=128,r=!0,es(o,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=ui(a))){if(n.flags|=128,r=!0,e=e.updateQueue,n.updateQueue=e,Ji(n,e),es(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!oo)return ns(n),null}else 2*ee()-o.renderingStartTime>wc&&536870912!==t&&(n.flags|=128,r=!0,es(o,!1),n.lanes=4194304);o.isBackwards?(a.sibling=n.child,n.child=a):(null!==(e=o.last)?e.sibling=a:n.child=a,o.last=a)}return null!==o.tail?(n=o.tail,o.rendering=n,o.tail=n.sibling,o.renderingStartTime=ee(),n.sibling=null,e=ci.current,M(ci,r?1&e|2:1&e),n):(ns(n),null);case 22:case 23:return si(n),ga(),r=null!==n.memoizedState,null!==e?null!==e.memoizedState!==r&&(n.flags|=8192):r&&(n.flags|=8192),r?!!(536870912&t)&&!(128&n.flags)&&(ns(n),6&n.subtreeFlags&&(n.flags|=8192)):ns(n),null!==(t=n.updateQueue)&&Ji(n,t.retryQueue),t=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),r=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(r=n.memoizedState.cachePool.pool),r!==t&&(n.flags|=2048),null!==e&&L(Wo),null;case 24:return t=null,null!==e&&(t=e.memoizedState.cache),n.memoizedState.cache!==t&&(n.flags|=2048),vo(Po),ns(n),null;case 25:case 30:return null}throw Error(l(156,n.tag))}function rs(e,n){switch(no(n),n.tag){case 1:return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return vo(Po),V(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 26:case 27:case 5:return Q(n),null;case 13:if(si(n),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(l(340));Ao()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return L(ci),null;case 4:return V(),null;case 10:return vo(n.type),null;case 22:case 23:return si(n),ga(),null!==e&&L(Wo),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 24:return vo(Po),null;default:return null}}function os(e,n){switch(no(n),n.tag){case 3:vo(Po),V();break;case 26:case 27:case 5:Q(n);break;case 4:V();break;case 13:si(n);break;case 19:L(ci);break;case 10:vo(n.type);break;case 22:case 23:si(n),ga(),null!==e&&L(Wo);break;case 24:vo(Po)}}function as(e,n){try{var t=n.updateQueue,r=null!==t?t.lastEffect:null;if(null!==r){var o=r.next;t=o;do{if((t.tag&e)===e){r=void 0;var a=t.create,l=t.inst;r=a(),l.destroy=r}t=t.next}while(t!==o)}}catch(e){cu(n,n.return,e)}}function ls(e,n,t){try{var r=n.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var l=r.inst,i=l.destroy;if(void 0!==i){l.destroy=void 0,o=n;var s=t,c=i;try{c()}catch(e){cu(o,s,e)}}}r=r.next}while(r!==a)}}catch(e){cu(n,n.return,e)}}function is(e){var n=e.updateQueue;if(null!==n){var t=e.stateNode;try{fa(n,t)}catch(n){cu(e,e.return,n)}}}function ss(e,n,t){t.props=mi(e.type,e.memoizedProps),t.state=e.memoizedState;try{t.componentWillUnmount()}catch(t){cu(e,n,t)}}function cs(e,n){try{var t=e.ref;if(null!==t){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof t?e.refCleanup=t(r):t.current=r}}catch(t){cu(e,n,t)}}function us(e,n){var t=e.ref,r=e.refCleanup;if(null!==t)if("function"==typeof r)try{r()}catch(t){cu(e,n,t)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof t)try{t(null)}catch(t){cu(e,n,t)}else t.current=null}function ds(e){var n=e.type,t=e.memoizedProps,r=e.stateNode;try{e:switch(n){case"button":case"input":case"select":case"textarea":t.autoFocus&&r.focus();break e;case"img":t.src?r.src=t.src:t.srcSet&&(r.srcset=t.srcSet)}}catch(n){cu(e,e.return,n)}}function fs(e,n,t){try{var r=e.stateNode;!function(e,n,t,r){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,i=null,s=null,c=null,u=null,d=null;for(p in t){var f=t[p];if(t.hasOwnProperty(p)&&null!=f)switch(p){case"checked":case"value":break;case"defaultValue":c=f;default:r.hasOwnProperty(p)||Ku(e,n,p,null,r,f)}}for(var A in r){var p=r[A];if(f=t[A],r.hasOwnProperty(A)&&(null!=p||null!=f))switch(A){case"type":a=p;break;case"name":o=p;break;case"checked":u=p;break;case"defaultChecked":d=p;break;case"value":i=p;break;case"defaultValue":s=p;break;case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(l(137,n));break;default:p!==f&&Ku(e,n,A,p,r,f)}}return void hn(e,i,s,c,u,d,a,o);case"select":for(a in p=i=s=A=null,t)if(c=t[a],t.hasOwnProperty(a)&&null!=c)switch(a){case"value":break;case"multiple":p=c;default:r.hasOwnProperty(a)||Ku(e,n,a,null,r,c)}for(o in r)if(a=r[o],c=t[o],r.hasOwnProperty(o)&&(null!=a||null!=c))switch(o){case"value":A=a;break;case"defaultValue":s=a;break;case"multiple":i=a;default:a!==c&&Ku(e,n,o,a,r,c)}return n=s,t=i,r=p,void(null!=A?yn(e,!!t,A,!1):!!r!=!!t&&(null!=n?yn(e,!!t,n,!0):yn(e,!!t,t?[]:"",!1)));case"textarea":for(s in p=A=null,t)if(o=t[s],t.hasOwnProperty(s)&&null!=o&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Ku(e,n,s,null,r,o)}for(i in r)if(o=r[i],a=t[i],r.hasOwnProperty(i)&&(null!=o||null!=a))switch(i){case"value":A=o;break;case"defaultValue":p=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(l(91));break;default:o!==a&&Ku(e,n,i,o,r,a)}return void vn(e,A,p);case"option":for(var m in t)A=t[m],t.hasOwnProperty(m)&&null!=A&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Ku(e,n,m,null,r,A));for(c in r)A=r[c],p=t[c],!r.hasOwnProperty(c)||A===p||null==A&&null==p||("selected"===c?e.selected=A&&"function"!=typeof A&&"symbol"!=typeof A:Ku(e,n,c,A,r,p));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var h in t)A=t[h],t.hasOwnProperty(h)&&null!=A&&!r.hasOwnProperty(h)&&Ku(e,n,h,null,r,A);for(u in r)if(A=r[u],p=t[u],r.hasOwnProperty(u)&&A!==p&&(null!=A||null!=p))switch(u){case"children":case"dangerouslySetInnerHTML":if(null!=A)throw Error(l(137,n));break;default:Ku(e,n,u,A,r,p)}return;default:if(Cn(n)){for(var g in t)A=t[g],t.hasOwnProperty(g)&&void 0!==A&&!r.hasOwnProperty(g)&&Zu(e,n,g,void 0,r,A);for(d in r)A=r[d],p=t[d],!r.hasOwnProperty(d)||A===p||void 0===A&&void 0===p||Zu(e,n,d,A,r,p);return}}for(var b in t)A=t[b],t.hasOwnProperty(b)&&null!=A&&!r.hasOwnProperty(b)&&Ku(e,n,b,null,r,A);for(f in r)A=r[f],p=t[f],!r.hasOwnProperty(f)||A===p||null==A&&null==p||Ku(e,n,f,A,r,p)}(r,e.type,t,n),r[Pe]=n}catch(n){cu(e,e.return,n)}}function As(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&fd(e.type)||4===e.tag}function ps(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||As(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&fd(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ms(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?(9===t.nodeType?t.body:"HTML"===t.nodeName?t.ownerDocument.body:t).insertBefore(e,n):((n=9===t.nodeType?t.body:"HTML"===t.nodeName?t.ownerDocument.body:t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Gu));else if(4!==r&&(27===r&&fd(e.type)&&(t=e.stateNode,n=null),null!==(e=e.child)))for(ms(e,n,t),e=e.sibling;null!==e;)ms(e,n,t),e=e.sibling}function hs(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&(27===r&&fd(e.type)&&(t=e.stateNode),null!==(e=e.child)))for(hs(e,n,t),e=e.sibling;null!==e;)hs(e,n,t),e=e.sibling}function gs(e){var n=e.stateNode,t=e.memoizedProps;try{for(var r=e.type,o=n.attributes;o.length;)n.removeAttributeNode(o[0]);Ju(n,r,t),n[Fe]=e,n[Pe]=t}catch(n){cu(e,e.return,n)}}var bs=!1,ys=!1,vs=!1,ws="function"==typeof WeakSet?WeakSet:Set,xs=null;function Es(e,n,t){var r=t.flags;switch(t.tag){case 0:case 11:case 15:Ts(e,t),4&r&&as(5,t);break;case 1:if(Ts(e,t),4&r)if(e=t.stateNode,null===n)try{e.componentDidMount()}catch(e){cu(t,t.return,e)}else{var o=mi(t.type,n.memoizedProps);n=n.memoizedState;try{e.componentDidUpdate(o,n,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cu(t,t.return,e)}}64&r&&is(t),512&r&&cs(t,t.return);break;case 3:if(Ts(e,t),64&r&&null!==(e=t.updateQueue)){if(n=null,null!==t.child)switch(t.child.tag){case 27:case 5:case 1:n=t.child.stateNode}try{fa(e,n)}catch(e){cu(t,t.return,e)}}break;case 27:null===n&&4&r&&gs(t);case 26:case 5:Ts(e,t),null===n&&4&r&&ds(t),512&r&&cs(t,t.return);break;case 12:Ts(e,t);break;case 13:Ts(e,t),4&r&&js(e,t),64&r&&null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)&&function(e,n){var t=e.ownerDocument;if("$?"!==e.data||"complete"===t.readyState)n();else{var r=function(){n(),t.removeEventListener("DOMContentLoaded",r)};t.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,t=Au.bind(null,t));break;case 22:if(!(r=null!==t.memoizedState||bs)){n=null!==n&&null!==n.memoizedState||ys,o=bs;var a=ys;bs=r,(ys=n)&&!a?Ds(e,t,!!(8772&t.subtreeFlags)):Ts(e,t),bs=o,ys=a}break;case 30:break;default:Ts(e,t)}}function ks(e){var n=e.alternate;null!==n&&(e.alternate=null,ks(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&Le(n),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Bs=null,Cs=!1;function Ss(e,n,t){for(t=t.child;null!==t;)Ns(e,n,t),t=t.sibling}function Ns(e,n,t){if(ue&&"function"==typeof ue.onCommitFiberUnmount)try{ue.onCommitFiberUnmount(ce,t)}catch(e){}switch(t.tag){case 26:ys||us(t,n),Ss(e,n,t),t.memoizedState?t.memoizedState.count--:t.stateNode&&(t=t.stateNode).parentNode.removeChild(t);break;case 27:ys||us(t,n);var r=Bs,o=Cs;fd(t.type)&&(Bs=t.stateNode,Cs=!1),Ss(e,n,t),vd(t.stateNode),Bs=r,Cs=o;break;case 5:ys||us(t,n);case 6:if(r=Bs,o=Cs,Bs=null,Ss(e,n,t),Cs=o,null!==(Bs=r))if(Cs)try{(9===Bs.nodeType?Bs.body:"HTML"===Bs.nodeName?Bs.ownerDocument.body:Bs).removeChild(t.stateNode)}catch(e){cu(t,n,e)}else try{Bs.removeChild(t.stateNode)}catch(e){cu(t,n,e)}break;case 18:null!==Bs&&(Cs?(Ad(9===(e=Bs).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,t.stateNode),Bf(e)):Ad(Bs,t.stateNode));break;case 4:r=Bs,o=Cs,Bs=t.stateNode.containerInfo,Cs=!0,Ss(e,n,t),Bs=r,Cs=o;break;case 0:case 11:case 14:case 15:ys||ls(2,t,n),ys||ls(4,t,n),Ss(e,n,t);break;case 1:ys||(us(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount&&ss(t,n,r)),Ss(e,n,t);break;case 21:Ss(e,n,t);break;case 22:ys=(r=ys)||null!==t.memoizedState,Ss(e,n,t),ys=r;break;default:Ss(e,n,t)}}function js(e,n){if(null===n.memoizedState&&null!==(e=n.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{Bf(e)}catch(e){cu(n,n.return,e)}}function _s(e,n){var t=function(e){switch(e.tag){case 13:case 19:var n=e.stateNode;return null===n&&(n=e.stateNode=new ws),n;case 22:return null===(n=(e=e.stateNode)._retryCache)&&(n=e._retryCache=new ws),n;default:throw Error(l(435,e.tag))}}(e);n.forEach((function(n){var r=pu.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}function Fs(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r],a=e,i=n,s=i;e:for(;null!==s;){switch(s.tag){case 27:if(fd(s.type)){Bs=s.stateNode,Cs=!1;break e}break;case 5:Bs=s.stateNode,Cs=!1;break e;case 3:case 4:Bs=s.stateNode.containerInfo,Cs=!0;break e}s=s.return}if(null===Bs)throw Error(l(160));Ns(a,i,o),Bs=null,Cs=!1,null!==(a=o.alternate)&&(a.return=null),o.return=null}if(13878&n.subtreeFlags)for(n=n.child;null!==n;)Os(n,e),n=n.sibling}var Ps=null;function Os(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Fs(n,e),Is(e),4&r&&(ls(3,e,e.return),as(3,e),ls(5,e,e.return));break;case 1:Fs(n,e),Is(e),512&r&&(ys||null===t||us(t,t.return)),64&r&&bs&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(t=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===t?r:t.concat(r));break;case 26:var o=Ps;if(Fs(n,e),Is(e),512&r&&(ys||null===t||us(t,t.return)),4&r){var a=null!==t?t.memoizedState:null;if(r=e.memoizedState,null===t)if(null===r)if(null===e.stateNode){e:{r=e.type,t=e.memoizedProps,o=o.ownerDocument||o;n:switch(r){case"title":(!(a=o.getElementsByTagName("title")[0])||a[De]||a[Fe]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=o.createElement(r),o.head.insertBefore(a,o.querySelector("head > title"))),Ju(a,r,t),a[Fe]=e,He(a),r=a;break e;case"link":var i=Dd("link","href",o).get(r+(t.href||""));if(i)for(var s=0;s<i.length;s++)if((a=i[s]).getAttribute("href")===(null==t.href||""===t.href?null:t.href)&&a.getAttribute("rel")===(null==t.rel?null:t.rel)&&a.getAttribute("title")===(null==t.title?null:t.title)&&a.getAttribute("crossorigin")===(null==t.crossOrigin?null:t.crossOrigin)){i.splice(s,1);break n}Ju(a=o.createElement(r),r,t),o.head.appendChild(a);break;case"meta":if(i=Dd("meta","content",o).get(r+(t.content||"")))for(s=0;s<i.length;s++)if((a=i[s]).getAttribute("content")===(null==t.content?null:""+t.content)&&a.getAttribute("name")===(null==t.name?null:t.name)&&a.getAttribute("property")===(null==t.property?null:t.property)&&a.getAttribute("http-equiv")===(null==t.httpEquiv?null:t.httpEquiv)&&a.getAttribute("charset")===(null==t.charSet?null:t.charSet)){i.splice(s,1);break n}Ju(a=o.createElement(r),r,t),o.head.appendChild(a);break;default:throw Error(l(468,r))}a[Fe]=e,He(a),r=a}e.stateNode=r}else Ld(o,e.type,e.stateNode);else e.stateNode=Od(o,r,e.memoizedProps);else a!==r?(null===a?null!==t.stateNode&&(t=t.stateNode).parentNode.removeChild(t):a.count--,null===r?Ld(o,e.type,e.stateNode):Od(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&fs(e,e.memoizedProps,t.memoizedProps)}break;case 27:Fs(n,e),Is(e),512&r&&(ys||null===t||us(t,t.return)),null!==t&&4&r&&fs(e,e.memoizedProps,t.memoizedProps);break;case 5:if(Fs(n,e),Is(e),512&r&&(ys||null===t||us(t,t.return)),32&e.flags){o=e.stateNode;try{xn(o,"")}catch(n){cu(e,e.return,n)}}4&r&&null!=e.stateNode&&fs(e,o=e.memoizedProps,null!==t?t.memoizedProps:o),1024&r&&(vs=!0);break;case 6:if(Fs(n,e),Is(e),4&r){if(null===e.stateNode)throw Error(l(162));r=e.memoizedProps,t=e.stateNode;try{t.nodeValue=r}catch(n){cu(e,e.return,n)}}break;case 3:if(Rd=null,o=Ps,Ps=Ed(n.containerInfo),Fs(n,e),Ps=o,Is(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Bf(n.containerInfo)}catch(n){cu(e,e.return,n)}vs&&(vs=!1,zs(e));break;case 4:r=Ps,Ps=Ed(e.stateNode.containerInfo),Fs(n,e),Is(e),Ps=r;break;case 12:default:Fs(n,e),Is(e);break;case 13:Fs(n,e),Is(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==t&&null!==t.memoizedState)&&(vc=ee()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,_s(e,r));break;case 22:o=null!==e.memoizedState;var c=null!==t&&null!==t.memoizedState,u=bs,d=ys;if(bs=u||o,ys=d||c,Fs(n,e),ys=d,bs=u,Is(e),8192&r)e:for(n=e.stateNode,n._visibility=o?-2&n._visibility:1|n._visibility,o&&(null===t||c||bs||ys||Rs(e)),t=null,n=e;;){if(5===n.tag||26===n.tag){if(null===t){c=t=n;try{if(a=c.stateNode,o)"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{s=c.stateNode;var f=c.memoizedProps.style,A=null!=f&&f.hasOwnProperty("display")?f.display:null;s.style.display=null==A||"boolean"==typeof A?"":(""+A).trim()}}catch(e){cu(c,c.return,e)}}}else if(6===n.tag){if(null===t){c=n;try{c.stateNode.nodeValue=o?"":c.memoizedProps}catch(e){cu(c,c.return,e)}}}else if((22!==n.tag&&23!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break e;for(;null===n.sibling;){if(null===n.return||n.return===e)break e;t===n&&(t=null),n=n.return}t===n&&(t=null),n.sibling.return=n.return,n=n.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(t=r.retryQueue)&&(r.retryQueue=null,_s(e,t));break;case 19:Fs(n,e),Is(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,_s(e,r));case 30:case 21:}}function Is(e){var n=e.flags;if(2&n){try{for(var t,r=e.return;null!==r;){if(As(r)){t=r;break}r=r.return}if(null==t)throw Error(l(160));switch(t.tag){case 27:var o=t.stateNode;hs(e,ps(e),o);break;case 5:var a=t.stateNode;32&t.flags&&(xn(a,""),t.flags&=-33),hs(e,ps(e),a);break;case 3:case 4:var i=t.stateNode.containerInfo;ms(e,ps(e),i);break;default:throw Error(l(161))}}catch(n){cu(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function zs(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var n=e;zs(n),5===n.tag&&1024&n.flags&&n.stateNode.reset(),e=e.sibling}}function Ts(e,n){if(8772&n.subtreeFlags)for(n=n.child;null!==n;)Es(e,n.alternate,n),n=n.sibling}function Rs(e){for(e=e.child;null!==e;){var n=e;switch(n.tag){case 0:case 11:case 14:case 15:ls(4,n,n.return),Rs(n);break;case 1:us(n,n.return);var t=n.stateNode;"function"==typeof t.componentWillUnmount&&ss(n,n.return,t),Rs(n);break;case 27:vd(n.stateNode);case 26:case 5:us(n,n.return),Rs(n);break;case 22:null===n.memoizedState&&Rs(n);break;default:Rs(n)}e=e.sibling}}function Ds(e,n,t){for(t=t&&!!(8772&n.subtreeFlags),n=n.child;null!==n;){var r=n.alternate,o=e,a=n,l=a.flags;switch(a.tag){case 0:case 11:case 15:Ds(o,a,t),as(4,a);break;case 1:if(Ds(o,a,t),"function"==typeof(o=(r=a).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){cu(r,r.return,e)}if(null!==(o=(r=a).updateQueue)){var i=r.stateNode;try{var s=o.shared.hiddenCallbacks;if(null!==s)for(o.shared.hiddenCallbacks=null,o=0;o<s.length;o++)da(s[o],i)}catch(e){cu(r,r.return,e)}}t&&64&l&&is(a),cs(a,a.return);break;case 27:gs(a);case 26:case 5:Ds(o,a,t),t&&null===r&&4&l&&ds(a),cs(a,a.return);break;case 12:Ds(o,a,t);break;case 13:Ds(o,a,t),t&&4&l&&js(o,a);break;case 22:null===a.memoizedState&&Ds(o,a,t),cs(a,a.return);break;case 30:break;default:Ds(o,a,t)}n=n.sibling}}function Ls(e,n){var t=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),e=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(e=n.memoizedState.cachePool.pool),e!==t&&(null!=e&&e.refCount++,null!=t&&Io(t))}function Ms(e,n){e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&Io(e))}function Ws(e,n,t,r){if(10256&n.subtreeFlags)for(n=n.child;null!==n;)Us(e,n,t,r),n=n.sibling}function Us(e,n,t,r){var o=n.flags;switch(n.tag){case 0:case 11:case 15:Ws(e,n,t,r),2048&o&&as(9,n);break;case 1:case 13:default:Ws(e,n,t,r);break;case 3:Ws(e,n,t,r),2048&o&&(e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&Io(e)));break;case 12:if(2048&o){Ws(e,n,t,r),e=n.stateNode;try{var a=n.memoizedProps,l=a.id,i=a.onPostCommit;"function"==typeof i&&i(l,null===n.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cu(n,n.return,e)}}else Ws(e,n,t,r);break;case 23:break;case 22:a=n.stateNode,l=n.alternate,null!==n.memoizedState?2&a._visibility?Ws(e,n,t,r):Hs(e,n):2&a._visibility?Ws(e,n,t,r):(a._visibility|=2,$s(e,n,t,r,!!(10256&n.subtreeFlags))),2048&o&&Ls(l,n);break;case 24:Ws(e,n,t,r),2048&o&&Ms(n.alternate,n)}}function $s(e,n,t,r,o){for(o=o&&!!(10256&n.subtreeFlags),n=n.child;null!==n;){var a=e,l=n,i=t,s=r,c=l.flags;switch(l.tag){case 0:case 11:case 15:$s(a,l,i,s,o),as(8,l);break;case 23:break;case 22:var u=l.stateNode;null!==l.memoizedState?2&u._visibility?$s(a,l,i,s,o):Hs(a,l):(u._visibility|=2,$s(a,l,i,s,o)),o&&2048&c&&Ls(l.alternate,l);break;case 24:$s(a,l,i,s,o),o&&2048&c&&Ms(l.alternate,l);break;default:$s(a,l,i,s,o)}n=n.sibling}}function Hs(e,n){if(10256&n.subtreeFlags)for(n=n.child;null!==n;){var t=e,r=n,o=r.flags;switch(r.tag){case 22:Hs(t,r),2048&o&&Ls(r.alternate,r);break;case 24:Hs(t,r),2048&o&&Ms(r.alternate,r);break;default:Hs(t,r)}n=n.sibling}}var qs=8192;function Vs(e){if(e.subtreeFlags&qs)for(e=e.child;null!==e;)Ys(e),e=e.sibling}function Ys(e){switch(e.tag){case 26:Vs(e),e.flags&qs&&null!==e.memoizedState&&function(e,n,t){if(null===Wd)throw Error(l(475));var r=Wd;if(!("stylesheet"!==n.type||"string"==typeof t.media&&!1===matchMedia(t.media).matches||4&n.state.loading)){if(null===n.instance){var o=Nd(t.href),a=e.querySelector(jd(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=$d.bind(r),e.then(r,r)),n.state.loading|=4,n.instance=a,void He(a);a=e.ownerDocument||e,t=_d(t),(o=wd.get(o))&&zd(t,o),He(a=a.createElement("link"));var i=a;i._p=new Promise((function(e,n){i.onload=e,i.onerror=n})),Ju(a,"link",t),n.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(n,e),(e=n.state.preload)&&!(3&n.state.loading)&&(r.count++,n=$d.bind(r),e.addEventListener("load",n),e.addEventListener("error",n))}}(Ps,e.memoizedState,e.memoizedProps);break;case 5:default:Vs(e);break;case 3:case 4:var n=Ps;Ps=Ed(e.stateNode.containerInfo),Vs(e),Ps=n;break;case 22:null===e.memoizedState&&(null!==(n=e.alternate)&&null!==n.memoizedState?(n=qs,qs=16777216,Vs(e),qs=n):Vs(e))}}function Qs(e){var n=e.alternate;if(null!==n&&null!==(e=n.child)){n.child=null;do{n=e.sibling,e.sibling=null,e=n}while(null!==e)}}function Xs(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];xs=r,Zs(r,e)}Qs(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Gs(e),e=e.sibling}function Gs(e){switch(e.tag){case 0:case 11:case 15:Xs(e),2048&e.flags&&ls(9,e,e.return);break;case 3:case 12:default:Xs(e);break;case 22:var n=e.stateNode;null!==e.memoizedState&&2&n._visibility&&(null===e.return||13!==e.return.tag)?(n._visibility&=-3,Ks(e)):Xs(e)}}function Ks(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];xs=r,Zs(r,e)}Qs(e)}for(e=e.child;null!==e;){switch((n=e).tag){case 0:case 11:case 15:ls(8,n,n.return),Ks(n);break;case 22:2&(t=n.stateNode)._visibility&&(t._visibility&=-3,Ks(n));break;default:Ks(n)}e=e.sibling}}function Zs(e,n){for(;null!==xs;){var t=xs;switch(t.tag){case 0:case 11:case 15:ls(8,t,n);break;case 23:case 22:if(null!==t.memoizedState&&null!==t.memoizedState.cachePool){var r=t.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Io(t.memoizedState.cache)}if(null!==(r=t.child))r.return=t,xs=r;else e:for(t=e;null!==xs;){var o=(r=xs).sibling,a=r.return;if(ks(r),r===t){xs=null;break e}if(null!==o){o.return=a,xs=o;break e}xs=a}}}var Js={getCacheForType:function(e){var n=Co(Po),t=n.data.get(e);return void 0===t&&(t=e(),n.data.set(e,t)),t}},ec="function"==typeof WeakMap?WeakMap:Map,nc=0,tc=null,rc=null,oc=0,ac=0,lc=null,ic=!1,sc=!1,cc=!1,uc=0,dc=0,fc=0,Ac=0,pc=0,mc=0,hc=0,gc=null,bc=null,yc=!1,vc=0,wc=1/0,xc=null,Ec=null,kc=0,Bc=null,Cc=null,Sc=0,Nc=0,jc=null,_c=null,Fc=0,Pc=null;function Oc(){return 2&nc&&0!==oc?oc&-oc:null!==O.T?0!==Ro?Ro:Nu():je()}function Ic(){0===mc&&(mc=536870912&oc&&!oo?536870912:we());var e=ri.current;return null!==e&&(e.flags|=32),mc}function zc(e,n,t){(e!==tc||2!==ac&&9!==ac)&&null===e.cancelPendingCommit||(Uc(e,0),Lc(e,oc,mc,!1)),ke(e,t),2&nc&&e===tc||(e===tc&&(!(2&nc)&&(Ac|=t),4===dc&&Lc(e,oc,mc,!1)),wu(e))}function Tc(e,n,t){if(6&nc)throw Error(l(327));for(var r=!t&&!(124&n)&&!(n&e.expiredLanes)||ye(e,n),o=r?function(e,n){var t=nc;nc|=2;var r=Hc(),o=qc();tc!==e||oc!==n?(xc=null,wc=ee()+500,Uc(e,n)):sc=ye(e,n);e:for(;;)try{if(0!==ac&&null!==rc){n=rc;var a=lc;n:switch(ac){case 1:ac=0,lc=null,Zc(e,n,a,1);break;case 2:case 9:if(Xo(a)){ac=0,lc=null,Kc(n);break}n=function(){2!==ac&&9!==ac||tc!==e||(ac=7),wu(e)},a.then(n,n);break e;case 3:ac=7;break e;case 4:ac=5;break e;case 7:Xo(a)?(ac=0,lc=null,Kc(n)):(ac=0,lc=null,Zc(e,n,a,7));break;case 5:var i=null;switch(rc.tag){case 26:i=rc.memoizedState;case 5:case 27:var s=rc;if(!i||Md(i)){ac=0,lc=null;var c=s.sibling;if(null!==c)rc=c;else{var u=s.return;null!==u?(rc=u,Jc(u)):rc=null}break n}}ac=0,lc=null,Zc(e,n,a,5);break;case 6:ac=0,lc=null,Zc(e,n,a,6);break;case 8:Wc(),dc=6;break e;default:throw Error(l(462))}}Xc();break}catch(n){$c(e,n)}return bo=go=null,O.H=r,O.A=o,nc=t,null!==rc?0:(tc=null,oc=0,Sr(),dc)}(e,n):Yc(e,n,!0),a=r;;){if(0===o){sc&&!r&&Lc(e,n,0,!1);break}if(t=e.current.alternate,!a||Dc(t)){if(2===o){if(a=n,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){n=i;e:{var s=e;o=gc;var c=s.current.memoizedState.isDehydrated;if(c&&(Uc(s,i).flags|=256),2!==(i=Yc(s,i,!1))){if(cc&&!c){s.errorRecoveryDisabledLanes|=a,Ac|=a,o=4;break e}a=bc,bc=o,null!==a&&(null===bc?bc=a:bc.push.apply(bc,a))}o=i}if(a=!1,2!==o)continue}}if(1===o){Uc(e,0),Lc(e,n,0,!0);break}e:{switch(r=e,a=o){case 0:case 1:throw Error(l(345));case 4:if((4194048&n)!==n)break;case 6:Lc(r,n,mc,!ic);break e;case 2:bc=null;break;case 3:case 5:break;default:throw Error(l(329))}if((62914560&n)===n&&10<(o=vc+300-ee())){if(Lc(r,n,mc,!ic),0!==be(r,0,!0))break e;r.timeoutHandle=id(Rc.bind(null,r,t,bc,xc,yc,n,mc,Ac,hc,ic,a,2,-0,0),o)}else Rc(r,t,bc,xc,yc,n,mc,Ac,hc,ic,a,0,-0,0)}break}o=Yc(e,n,!1),a=!1}wu(e)}function Rc(e,n,t,r,o,a,i,s,c,u,d,f,A,p){if(e.timeoutHandle=-1,(8192&(f=n.subtreeFlags)||!(16785408&~f))&&(Wd={stylesheets:null,count:0,unsuspend:Ud},Ys(n),null!==(f=function(){if(null===Wd)throw Error(l(475));var e=Wd;return e.stylesheets&&0===e.count&&qd(e,e.stylesheets),0<e.count?function(n){var t=setTimeout((function(){if(e.stylesheets&&qd(e,e.stylesheets),e.unsuspend){var n=e.unsuspend;e.unsuspend=null,n()}}),6e4);return e.unsuspend=n,function(){e.unsuspend=null,clearTimeout(t)}}:null}())))return e.cancelPendingCommit=f(nu.bind(null,e,n,a,t,r,o,i,s,c,d,1,A,p)),void Lc(e,a,i,!u);nu(e,n,a,t,r,o,i,s,c)}function Dc(e){for(var n=e;;){var t=n.tag;if((0===t||11===t||15===t)&&16384&n.flags&&null!==(t=n.updateQueue)&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],a=o.getSnapshot;o=o.value;try{if(!Qt(a(),o))return!1}catch(e){return!1}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}function Lc(e,n,t,r){n&=~pc,n&=~Ac,e.suspendedLanes|=n,e.pingedLanes&=~n,r&&(e.warmLanes|=n),r=e.expirationTimes;for(var o=n;0<o;){var a=31-fe(o),l=1<<a;r[a]=-1,o&=~l}0!==t&&Be(e,t,n)}function Mc(){return!!(6&nc)||(xu(0,!1),!1)}function Wc(){if(null!==rc){if(0===ac)var e=rc.return;else bo=go=null,Ra(e=rc),Ql=null,Xl=0,e=rc;for(;null!==e;)os(e.alternate,e),e=e.return;rc=null}}function Uc(e,n){var t=e.timeoutHandle;-1!==t&&(e.timeoutHandle=-1,sd(t)),null!==(t=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,t()),Wc(),tc=e,rc=t=Rr(e.current,null),oc=n,ac=0,lc=null,ic=!1,sc=ye(e,n),cc=!1,hc=mc=pc=Ac=fc=dc=0,bc=gc=null,yc=!1,8&n&&(n|=32&n);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=n;0<r;){var o=31-fe(r),a=1<<o;n|=e[o],r&=~a}return uc=n,Sr(),t}function $c(e,n){ya=null,O.H=Hl,n===qo||n===Yo?(n=Jo(),ac=3):n===Vo?(n=Jo(),ac=4):ac=n===Bi?8:null!==n&&"object"==typeof n&&"function"==typeof n.then?6:1,lc=n,null===rc&&(dc=1,vi(e,Er(n,e.current)))}function Hc(){var e=O.H;return O.H=Hl,null===e?Hl:e}function qc(){var e=O.A;return O.A=Js,e}function Vc(){dc=4,ic||(4194048&oc)!==oc&&null!==ri.current||(sc=!0),!(134217727&fc)&&!(134217727&Ac)||null===tc||Lc(tc,oc,mc,!1)}function Yc(e,n,t){var r=nc;nc|=2;var o=Hc(),a=qc();tc===e&&oc===n||(xc=null,Uc(e,n)),n=!1;var l=dc;e:for(;;)try{if(0!==ac&&null!==rc){var i=rc,s=lc;switch(ac){case 8:Wc(),l=6;break e;case 3:case 2:case 9:case 6:null===ri.current&&(n=!0);var c=ac;if(ac=0,lc=null,Zc(e,i,s,c),t&&sc){l=0;break e}break;default:c=ac,ac=0,lc=null,Zc(e,i,s,c)}}Qc(),l=dc;break}catch(n){$c(e,n)}return n&&e.shellSuspendCounter++,bo=go=null,nc=r,O.H=o,O.A=a,null===rc&&(tc=null,oc=0,Sr()),l}function Qc(){for(;null!==rc;)Gc(rc)}function Xc(){for(;null!==rc&&!Z();)Gc(rc)}function Gc(e){var n=Gi(e.alternate,e,uc);e.memoizedProps=e.pendingProps,null===n?Jc(e):rc=n}function Kc(e){var n=e,t=n.alternate;switch(n.tag){case 15:case 0:n=zi(t,n,n.pendingProps,n.type,void 0,oc);break;case 11:n=zi(t,n,n.pendingProps,n.type.render,n.ref,oc);break;case 5:Ra(n);default:os(t,n),n=Gi(t,n=rc=Dr(n,uc),uc)}e.memoizedProps=e.pendingProps,null===n?Jc(e):rc=n}function Zc(e,n,t,r){bo=go=null,Ra(n),Ql=null,Xl=0;var o=n.return;try{if(function(e,n,t,r,o){if(t.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(n=t.alternate)&&Eo(n,t,o,!0),null!==(t=ri.current)){switch(t.tag){case 13:return null===oi?Vc():null===t.alternate&&0===dc&&(dc=3),t.flags&=-257,t.flags|=65536,t.lanes=o,r===Qo?t.flags|=16384:(null===(n=t.updateQueue)?t.updateQueue=new Set([r]):n.add(r),uu(e,r,o)),!1;case 22:return t.flags|=65536,r===Qo?t.flags|=16384:(null===(n=t.updateQueue)?(n={transitions:null,markerInstances:null,retryQueue:new Set([r])},t.updateQueue=n):null===(t=n.retryQueue)?n.retryQueue=new Set([r]):t.add(r),uu(e,r,o)),!1}throw Error(l(435,t.tag))}return uu(e,r,o),Vc(),!1}if(oo)return null!==(n=ri.current)?(!(65536&n.flags)&&(n.flags|=256),n.flags|=65536,n.lanes=o,r!==io&&mo(Er(e=Error(l(422),{cause:r}),t))):(r!==io&&mo(Er(n=Error(l(423),{cause:r}),t)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=Er(r,t),ia(e,o=xi(e.stateNode,r,o)),4!==dc&&(dc=2)),!1;var a=Error(l(520),{cause:r});if(a=Er(a,t),null===gc?gc=[a]:gc.push(a),4!==dc&&(dc=2),null===n)return!0;r=Er(r,t),t=n;do{switch(t.tag){case 3:return t.flags|=65536,e=o&-o,t.lanes|=e,ia(t,e=xi(t.stateNode,r,e)),!1;case 1:if(n=t.type,a=t.stateNode,!(128&t.flags||"function"!=typeof n.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Ec&&Ec.has(a))))return t.flags|=65536,o&=-o,t.lanes|=o,ki(o=Ei(o),e,t,r),ia(t,o),!1}t=t.return}while(null!==t);return!1}(e,o,n,t,oc))return dc=1,vi(e,Er(t,e.current)),void(rc=null)}catch(n){if(null!==o)throw rc=o,n;return dc=1,vi(e,Er(t,e.current)),void(rc=null)}32768&n.flags?(oo||1===r?e=!0:sc||536870912&oc?e=!1:(ic=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ri.current)&&13===r.tag&&(r.flags|=16384)),eu(n,e)):Jc(n)}function Jc(e){var n=e;do{if(32768&n.flags)return void eu(n,ic);e=n.return;var t=ts(n.alternate,n,uc);if(null!==t)return void(rc=t);if(null!==(n=n.sibling))return void(rc=n);rc=n=e}while(null!==n);0===dc&&(dc=5)}function eu(e,n){do{var t=rs(e.alternate,e);if(null!==t)return t.flags&=32767,void(rc=t);if(null!==(t=e.return)&&(t.flags|=32768,t.subtreeFlags=0,t.deletions=null),!n&&null!==(e=e.sibling))return void(rc=e);rc=e=t}while(null!==e);dc=6,rc=null}function nu(e,n,t,r,o,a,i,s,c){e.cancelPendingCommit=null;do{lu()}while(0!==kc);if(6&nc)throw Error(l(327));if(null!==n){if(n===e.current)throw Error(l(177));if(a=n.lanes|n.childLanes,function(e,n,t,r,o,a){var l=e.pendingLanes;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=t,e.entangledLanes&=t,e.errorRecoveryDisabledLanes&=t,e.shellSuspendCounter=0;var i=e.entanglements,s=e.expirationTimes,c=e.hiddenUpdates;for(t=l&~t;0<t;){var u=31-fe(t),d=1<<u;i[u]=0,s[u]=-1;var f=c[u];if(null!==f)for(c[u]=null,u=0;u<f.length;u++){var A=f[u];null!==A&&(A.lane&=-536870913)}t&=~d}0!==r&&Be(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(l&~n))}(e,t,a|=Cr,i,s,c),e===tc&&(rc=tc=null,oc=0),Cc=n,Bc=e,Sc=t,Nc=a,jc=o,_c=r,10256&n.subtreeFlags||10256&n.flags?(e.callbackNode=null,e.callbackPriority=0,G(oe,(function(){return iu(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&n.flags),13878&n.subtreeFlags||r){r=O.T,O.T=null,o=I.p,I.p=2,i=nc,nc|=4;try{!function(e,n){if(e=e.containerInfo,ed=Jd,er(e=Jt(e))){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var i=0,s=-1,c=-1,u=0,d=0,f=e,A=null;n:for(;;){for(var p;f!==t||0!==o&&3!==f.nodeType||(s=i+o),f!==a||0!==r&&3!==f.nodeType||(c=i+r),3===f.nodeType&&(i+=f.nodeValue.length),null!==(p=f.firstChild);)A=f,f=p;for(;;){if(f===e)break n;if(A===t&&++u===o&&(s=i),A===a&&++d===r&&(c=i),null!==(p=f.nextSibling))break;A=(f=A).parentNode}f=p}t=-1===s||-1===c?null:{start:s,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(nd={focusedElem:e,selectionRange:t},Jd=!1,xs=n;null!==xs;)if(e=(n=xs).child,1024&n.subtreeFlags&&null!==e)e.return=n,xs=e;else for(;null!==xs;){switch(a=(n=xs).alternate,e=n.flags,n.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,t=n,o=a.memoizedProps,a=a.memoizedState,r=t.stateNode;try{var m=mi(t.type,o,(t.elementType,t.type));e=r.getSnapshotBeforeUpdate(m,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cu(t,t.return,e)}}break;case 3:if(1024&e)if(9===(t=(e=n.stateNode.containerInfo).nodeType))pd(e);else if(1===t)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":pd(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(l(163))}if(null!==(e=n.sibling)){e.return=n.return,xs=e;break}xs=n.return}}(e,n)}finally{nc=i,I.p=o,O.T=r}}kc=1,tu(),ru(),ou()}}function tu(){if(1===kc){kc=0;var e=Bc,n=Cc,t=!!(13878&n.flags);if(13878&n.subtreeFlags||t){t=O.T,O.T=null;var r=I.p;I.p=2;var o=nc;nc|=4;try{Os(n,e);var a=nd,l=Jt(e.containerInfo),i=a.focusedElem,s=a.selectionRange;if(l!==i&&i&&i.ownerDocument&&Zt(i.ownerDocument.documentElement,i)){if(null!==s&&er(i)){var c=s.start,u=s.end;if(void 0===u&&(u=c),"selectionStart"in i)i.selectionStart=c,i.selectionEnd=Math.min(u,i.value.length);else{var d=i.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var A=f.getSelection(),p=i.textContent.length,m=Math.min(s.start,p),h=void 0===s.end?m:Math.min(s.end,p);!A.extend&&m>h&&(l=h,h=m,m=l);var g=Kt(i,m),b=Kt(i,h);if(g&&b&&(1!==A.rangeCount||A.anchorNode!==g.node||A.anchorOffset!==g.offset||A.focusNode!==b.node||A.focusOffset!==b.offset)){var y=d.createRange();y.setStart(g.node,g.offset),A.removeAllRanges(),m>h?(A.addRange(y),A.extend(b.node,b.offset)):(y.setEnd(b.node,b.offset),A.addRange(y))}}}}for(d=[],A=i;A=A.parentNode;)1===A.nodeType&&d.push({element:A,left:A.scrollLeft,top:A.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<d.length;i++){var v=d[i];v.element.scrollLeft=v.left,v.element.scrollTop=v.top}}Jd=!!ed,nd=ed=null}finally{nc=o,I.p=r,O.T=t}}e.current=n,kc=2}}function ru(){if(2===kc){kc=0;var e=Bc,n=Cc,t=!!(8772&n.flags);if(8772&n.subtreeFlags||t){t=O.T,O.T=null;var r=I.p;I.p=2;var o=nc;nc|=4;try{Es(e,n.alternate,n)}finally{nc=o,I.p=r,O.T=t}}kc=3}}function ou(){if(4===kc||3===kc){kc=0,J();var e=Bc,n=Cc,t=Sc,r=_c;10256&n.subtreeFlags||10256&n.flags?kc=5:(kc=0,Cc=Bc=null,au(e,e.pendingLanes));var o=e.pendingLanes;if(0===o&&(Ec=null),Ne(t),n=n.stateNode,ue&&"function"==typeof ue.onCommitFiberRoot)try{ue.onCommitFiberRoot(ce,n,void 0,!(128&~n.current.flags))}catch(e){}if(null!==r){n=O.T,o=I.p,I.p=2,O.T=null;try{for(var a=e.onRecoverableError,l=0;l<r.length;l++){var i=r[l];a(i.value,{componentStack:i.stack})}}finally{O.T=n,I.p=o}}3&Sc&&lu(),wu(e),o=e.pendingLanes,4194090&t&&42&o?e===Pc?Fc++:(Fc=0,Pc=e):Fc=0,xu(0,!1)}}function au(e,n){0==(e.pooledCacheLanes&=n)&&null!=(n=e.pooledCache)&&(e.pooledCache=null,Io(n))}function lu(e){return tu(),ru(),ou(),iu()}function iu(){if(5!==kc)return!1;var e=Bc,n=Nc;Nc=0;var t=Ne(Sc),r=O.T,o=I.p;try{I.p=32>t?32:t,O.T=null,t=jc,jc=null;var a=Bc,i=Sc;if(kc=0,Cc=Bc=null,Sc=0,6&nc)throw Error(l(331));var s=nc;if(nc|=4,Gs(a.current),Us(a,a.current,i,t),nc=s,xu(0,!1),ue&&"function"==typeof ue.onPostCommitFiberRoot)try{ue.onPostCommitFiberRoot(ce,a)}catch(e){}return!0}finally{I.p=o,O.T=r,au(e,n)}}function su(e,n,t){n=Er(t,n),null!==(e=aa(e,n=xi(e.stateNode,n,2),2))&&(ke(e,2),wu(e))}function cu(e,n,t){if(3===e.tag)su(e,e,t);else for(;null!==n;){if(3===n.tag){su(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ec||!Ec.has(r))){e=Er(t,e),null!==(r=aa(n,t=Ei(2),2))&&(ki(t,r,n,e),ke(r,2),wu(r));break}}n=n.return}}function uu(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new ec;var o=new Set;r.set(n,o)}else void 0===(o=r.get(n))&&(o=new Set,r.set(n,o));o.has(t)||(cc=!0,o.add(t),e=du.bind(null,e,n,t),n.then(e,e))}function du(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),e.pingedLanes|=e.suspendedLanes&t,e.warmLanes&=~t,tc===e&&(oc&t)===t&&(4===dc||3===dc&&(62914560&oc)===oc&&300>ee()-vc?!(2&nc)&&Uc(e,0):pc|=t,hc===oc&&(hc=0)),wu(e)}function fu(e,n){0===n&&(n=xe()),null!==(e=_r(e,n))&&(ke(e,n),wu(e))}function Au(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),fu(e,t)}function pu(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(l(314))}null!==r&&r.delete(n),fu(e,t)}var mu=null,hu=null,gu=!1,bu=!1,yu=!1,vu=0;function wu(e){e!==hu&&null===e.next&&(null===hu?mu=hu=e:hu=hu.next=e),bu=!0,gu||(gu=!0,ud((function(){6&nc?G(te,Eu):ku()})))}function xu(e,n){if(!yu&&bu){yu=!0;do{for(var t=!1,r=mu;null!==r;){if(!n)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var l=r.suspendedLanes,i=r.pingedLanes;a=(1<<31-fe(42|e)+1)-1,a=201326741&(a&=o&~(l&~i))?201326741&a|1:a?2|a:0}0!==a&&(t=!0,Su(r,a))}else a=oc,!(3&(a=be(r,r===tc?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||ye(r,a)||(t=!0,Su(r,a));r=r.next}}while(t);yu=!1}}function Eu(){ku()}function ku(){bu=gu=!1;var e,n=0;0!==vu&&(((e=window.event)&&"popstate"===e.type?e!==ld&&(ld=e,!0):(ld=null,!1))&&(n=vu),vu=0);for(var t=ee(),r=null,o=mu;null!==o;){var a=o.next,l=Bu(o,t);0===l?(o.next=null,null===r?mu=a:r.next=a,null===a&&(hu=r)):(r=o,(0!==n||3&l)&&(bu=!0)),o=a}xu(n,!1)}function Bu(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var l=31-fe(a),i=1<<l,s=o[l];-1===s?i&t&&!(i&r)||(o[l]=ve(i,n)):s<=n&&(e.expiredLanes|=i),a&=~i}if(t=oc,t=be(e,e===(n=tc)?t:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===t||e===n&&(2===ac||9===ac)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&K(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&t)||ye(e,t)){if((n=t&-t)===e.callbackPriority)return n;switch(null!==r&&K(r),Ne(t)){case 2:case 8:t=re;break;case 32:default:t=oe;break;case 268435456:t=le}return r=Cu.bind(null,e),t=G(t,r),e.callbackPriority=n,e.callbackNode=t,n}return null!==r&&null!==r&&K(r),e.callbackPriority=2,e.callbackNode=null,2}function Cu(e,n){if(0!==kc&&5!==kc)return e.callbackNode=null,e.callbackPriority=0,null;var t=e.callbackNode;if(lu()&&e.callbackNode!==t)return null;var r=oc;return 0===(r=be(e,e===tc?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Tc(e,r,n),Bu(e,ee()),null!=e.callbackNode&&e.callbackNode===t?Cu.bind(null,e):null)}function Su(e,n){if(lu())return null;Tc(e,n,!0)}function Nu(){return 0===vu&&(vu=we()),vu}function ju(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:jn(""+e)}function _u(e,n){var t=n.ownerDocument.createElement("input");return t.name=n.name,t.value=n.value,e.id&&t.setAttribute("form",e.id),n.parentNode.insertBefore(t,n),e=new FormData(e),t.parentNode.removeChild(t),e}for(var Fu=0;Fu<vr.length;Fu++){var Pu=vr[Fu];wr(Pu.toLowerCase(),"on"+(Pu[0].toUpperCase()+Pu.slice(1)))}wr(fr,"onAnimationEnd"),wr(Ar,"onAnimationIteration"),wr(pr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(mr,"onTransitionRun"),wr(hr,"onTransitionStart"),wr(gr,"onTransitionCancel"),wr(br,"onTransitionEnd"),Qe("onMouseEnter",["mouseout","mouseover"]),Qe("onMouseLeave",["mouseout","mouseover"]),Qe("onPointerEnter",["pointerout","pointerover"]),Qe("onPointerLeave",["pointerout","pointerover"]),Ye("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ye("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ye("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ye("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ye("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ye("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ou="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Iu=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Ou));function zu(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var l=r.length-1;0<=l;l--){var i=r[l],s=i.instance,c=i.currentTarget;if(i=i.listener,s!==a&&o.isPropagationStopped())break e;a=i,o.currentTarget=c;try{a(o)}catch(e){hi(e)}o.currentTarget=null,a=s}else for(l=0;l<r.length;l++){if(s=(i=r[l]).instance,c=i.currentTarget,i=i.listener,s!==a&&o.isPropagationStopped())break e;a=i,o.currentTarget=c;try{a(o)}catch(e){hi(e)}o.currentTarget=null,a=s}}}}function Tu(e,n){var t=n[Ie];void 0===t&&(t=n[Ie]=new Set);var r=e+"__bubble";t.has(r)||(Mu(n,e,2,!1),t.add(r))}function Ru(e,n,t){var r=0;n&&(r|=4),Mu(t,e,r,n)}var Du="_reactListening"+Math.random().toString(36).slice(2);function Lu(e){if(!e[Du]){e[Du]=!0,qe.forEach((function(n){"selectionchange"!==n&&(Iu.has(n)||Ru(n,!1,e),Ru(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Du]||(n[Du]=!0,Ru("selectionchange",!1,n))}}function Mu(e,n,t,r){switch(lf(n)){case 2:var o=ef;break;case 8:o=nf;break;default:o=tf}t=o.bind(null,n,t,e),o=void 0,!Ln||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Wu(e,n,t,r,o){var a=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var s=r.stateNode.containerInfo;if(s===o)break;if(4===l)for(l=r.return;null!==l;){var c=l.tag;if((3===c||4===c)&&l.stateNode.containerInfo===o)return;l=l.return}for(;null!==s;){if(null===(l=Me(s)))return;if(5===(c=l.tag)||6===c||26===c||27===c){r=a=l;continue e}s=s.parentNode}}r=r.return}Tn((function(){var r=a,o=Fn(t),l=[];e:{var s=yr.get(e);if(void 0!==s){var c=Jn,u=e;switch(e){case"keypress":if(0===qn(t))break e;case"keydown":case"keyup":c=pt;break;case"focusin":u="focus",c=at;break;case"focusout":u="blur",c=at;break;case"beforeblur":case"afterblur":c=at;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":c=rt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":c=ot;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":c=ht;break;case fr:case Ar:case pr:c=lt;break;case br:c=gt;break;case"scroll":case"scrollend":c=nt;break;case"wheel":c=bt;break;case"copy":case"cut":case"paste":c=it;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":c=mt;break;case"toggle":case"beforetoggle":c=yt}var d=!!(4&n),f=!d&&("scroll"===e||"scrollend"===e),A=d?null!==s?s+"Capture":null:s;d=[];for(var p,m=r;null!==m;){var h=m;if(p=h.stateNode,5!==(h=h.tag)&&26!==h&&27!==h||null===p||null===A||null!=(h=Rn(m,A))&&d.push(Uu(m,h,p)),f)break;m=m.return}0<d.length&&(s=new c(s,u,null,t,o),l.push({event:s,listeners:d}))}}if(!(7&n)){if(c="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||t===_n||!(u=t.relatedTarget||t.fromElement)||!Me(u)&&!u[Oe])&&(c||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,c?(c=r,null!==(u=(u=t.relatedTarget||t.toElement)?Me(u):null)&&(f=i(u),d=u.tag,u!==f||5!==d&&27!==d&&6!==d)&&(u=null)):(c=null,u=r),c!==u)){if(d=rt,h="onMouseLeave",A="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(d=mt,h="onPointerLeave",A="onPointerEnter",m="pointer"),f=null==c?s:Ue(c),p=null==u?s:Ue(u),(s=new d(h,m+"leave",c,t,o)).target=f,s.relatedTarget=p,h=null,Me(o)===r&&((d=new d(A,m+"enter",u,t,o)).target=p,d.relatedTarget=f,h=d),f=h,c&&u)e:{for(A=u,m=0,p=d=c;p;p=Hu(p))m++;for(p=0,h=A;h;h=Hu(h))p++;for(;0<m-p;)d=Hu(d),m--;for(;0<p-m;)A=Hu(A),p--;for(;m--;){if(d===A||null!==A&&d===A.alternate)break e;d=Hu(d),A=Hu(A)}d=null}else d=null;null!==c&&qu(l,s,c,d,!1),null!==u&&null!==f&&qu(l,f,u,d,!0)}if("select"===(c=(s=r?Ue(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===c&&"file"===s.type)var g=Rt;else if(Ft(s))if(Dt)g=Yt;else{g=qt;var b=Ht}else!(c=s.nodeName)||"input"!==c.toLowerCase()||"checkbox"!==s.type&&"radio"!==s.type?r&&Cn(r.elementType)&&(g=Rt):g=Vt;switch(g&&(g=g(e,r))?Pt(l,g,t,o):(b&&b(e,s,r),"focusout"===e&&r&&"number"===s.type&&null!=r.memoizedProps.value&&bn(s,"number",s.value)),b=r?Ue(r):window,e){case"focusin":(Ft(b)||"true"===b.contentEditable)&&(tr=b,rr=r,or=null);break;case"focusout":or=rr=tr=null;break;case"mousedown":ar=!0;break;case"contextmenu":case"mouseup":case"dragend":ar=!1,lr(l,t,o);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":lr(l,t,o)}var y;if(wt)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else jt?St(e,t)&&(v="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(v="onCompositionStart");v&&(kt&&"ko"!==t.locale&&(jt||"onCompositionStart"!==v?"onCompositionEnd"===v&&jt&&(y=Hn()):(Un="value"in(Wn=o)?Wn.value:Wn.textContent,jt=!0)),0<(b=$u(r,v)).length&&(v=new st(v,e,null,t,o),l.push({event:v,listeners:b}),(y||null!==(y=Nt(t)))&&(v.data=y))),(y=Et?function(e,n){switch(e){case"compositionend":return Nt(n);case"keypress":return 32!==n.which?null:(Ct=!0,Bt);case"textInput":return(e=n.data)===Bt&&Ct?null:e;default:return null}}(e,t):function(e,n){if(jt)return"compositionend"===e||!wt&&St(e,n)?(e=Hn(),$n=Un=Wn=null,jt=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return kt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(v=$u(r,"onBeforeInput")).length&&(b=new st("onBeforeInput","beforeinput",null,t,o),l.push({event:b,listeners:v}),b.data=y),function(e,n,t,r,o){if("submit"===n&&t&&t.stateNode===o){var a=ju((o[Pe]||null).action),l=r.submitter;l&&null!==(n=(n=l[Pe]||null)?ju(n.formAction):l.getAttribute("formAction"))&&(a=n,l=null);var i=new Jn("action","action",null,r,o);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==vu){var e=l?_u(o,l):new FormData(o);_l(t,{pending:!0,data:e,method:o.method,action:a},null,e)}}else"function"==typeof a&&(i.preventDefault(),e=l?_u(o,l):new FormData(o),_l(t,{pending:!0,data:e,method:o.method,action:a},a,e))},currentTarget:o}]})}}(l,e,r,t,o)}zu(l,n)}))}function Uu(e,n,t){return{instance:e,listener:n,currentTarget:t}}function $u(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=Rn(e,t))&&r.unshift(Uu(e,o,a)),null!=(o=Rn(e,n))&&r.push(Uu(e,o,a))),3===e.tag)return r;e=e.return}return[]}function Hu(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function qu(e,n,t,r,o){for(var a=n._reactName,l=[];null!==t&&t!==r;){var i=t,s=i.alternate,c=i.stateNode;if(i=i.tag,null!==s&&s===r)break;5!==i&&26!==i&&27!==i||null===c||(s=c,o?null!=(c=Rn(t,a))&&l.unshift(Uu(t,c,s)):o||null!=(c=Rn(t,a))&&l.push(Uu(t,c,s))),t=t.return}0!==l.length&&e.push({event:n,listeners:l})}var Vu=/\r\n?/g,Yu=/\u0000|\uFFFD/g;function Qu(e){return("string"==typeof e?e:""+e).replace(Vu,"\n").replace(Yu,"")}function Xu(e,n){return n=Qu(n),Qu(e)===n}function Gu(){}function Ku(e,n,t,r,o,a){switch(t){case"children":"string"==typeof r?"body"===n||"textarea"===n&&""===r||xn(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==n&&xn(e,""+r);break;case"className":nn(e,"class",r);break;case"tabIndex":nn(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nn(e,t,r);break;case"style":Bn(e,r,a);break;case"data":if("object"!==n){nn(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==n||"href"!==t)){e.removeAttribute(t);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=jn(""+r),e.setAttribute(t,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(t,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===t?("input"!==n&&Ku(e,n,"name",o.name,o,null),Ku(e,n,"formEncType",o.formEncType,o,null),Ku(e,n,"formMethod",o.formMethod,o,null),Ku(e,n,"formTarget",o.formTarget,o,null)):(Ku(e,n,"encType",o.encType,o,null),Ku(e,n,"method",o.method,o,null),Ku(e,n,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=jn(""+r),e.setAttribute(t,r);break;case"onClick":null!=r&&(e.onclick=Gu);break;case"onScroll":null!=r&&Tu("scroll",e);break;case"onScrollEnd":null!=r&&Tu("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(t=r.__html)){if(null!=o.children)throw Error(l(60));e.innerHTML=t}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}t=jn(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",t);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""+r):e.removeAttribute(t);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""):e.removeAttribute(t);break;case"capture":case"download":!0===r?e.setAttribute(t,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,r):e.removeAttribute(t);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(t,r):e.removeAttribute(t);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(t):e.setAttribute(t,r);break;case"popover":Tu("beforetoggle",e),Tu("toggle",e),en(e,"popover",r);break;case"xlinkActuate":tn(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":tn(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":tn(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":tn(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":tn(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":tn(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":tn(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":tn(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":tn(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":en(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&en(e,t=Sn.get(t)||t,r)}}function Zu(e,n,t,r,o,a){switch(t){case"style":Bn(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(t=r.__html)){if(null!=o.children)throw Error(l(60));e.innerHTML=t}}break;case"children":"string"==typeof r?xn(e,r):("number"==typeof r||"bigint"==typeof r)&&xn(e,""+r);break;case"onScroll":null!=r&&Tu("scroll",e);break;case"onScrollEnd":null!=r&&Tu("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Gu);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ve.hasOwnProperty(t)||("o"!==t[0]||"n"!==t[1]||(o=t.endsWith("Capture"),n=t.slice(2,o?t.length-7:void 0),"function"==typeof(a=null!=(a=e[Pe]||null)?a[t]:null)&&e.removeEventListener(n,a,o),"function"!=typeof r)?t in e?e[t]=r:!0===r?e.setAttribute(t,""):en(e,t,r):("function"!=typeof a&&null!==a&&(t in e?e[t]=null:e.hasAttribute(t)&&e.removeAttribute(t)),e.addEventListener(n,r,o)))}}function Ju(e,n,t){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Tu("error",e),Tu("load",e);var r,o=!1,a=!1;for(r in t)if(t.hasOwnProperty(r)){var i=t[r];if(null!=i)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(l(137,n));default:Ku(e,n,r,i,t,null)}}return a&&Ku(e,n,"srcSet",t.srcSet,t,null),void(o&&Ku(e,n,"src",t.src,t,null));case"input":Tu("invalid",e);var s=r=i=a=null,c=null,u=null;for(o in t)if(t.hasOwnProperty(o)){var d=t[o];if(null!=d)switch(o){case"name":a=d;break;case"type":i=d;break;case"checked":c=d;break;case"defaultChecked":u=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(l(137,n));break;default:Ku(e,n,o,d,t,null)}}return gn(e,r,s,c,u,i,a,!1),void dn(e);case"select":for(a in Tu("invalid",e),o=i=r=null,t)if(t.hasOwnProperty(a)&&null!=(s=t[a]))switch(a){case"value":r=s;break;case"defaultValue":i=s;break;case"multiple":o=s;default:Ku(e,n,a,s,t,null)}return n=r,t=i,e.multiple=!!o,void(null!=n?yn(e,!!o,n,!1):null!=t&&yn(e,!!o,t,!0));case"textarea":for(i in Tu("invalid",e),r=a=o=null,t)if(t.hasOwnProperty(i)&&null!=(s=t[i]))switch(i){case"value":o=s;break;case"defaultValue":a=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(l(91));break;default:Ku(e,n,i,s,t,null)}return wn(e,o,a,r),void dn(e);case"option":for(c in t)t.hasOwnProperty(c)&&null!=(o=t[c])&&("selected"===c?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Ku(e,n,c,o,t,null));return;case"dialog":Tu("beforetoggle",e),Tu("toggle",e),Tu("cancel",e),Tu("close",e);break;case"iframe":case"object":Tu("load",e);break;case"video":case"audio":for(o=0;o<Ou.length;o++)Tu(Ou[o],e);break;case"image":Tu("error",e),Tu("load",e);break;case"details":Tu("toggle",e);break;case"embed":case"source":case"link":Tu("error",e),Tu("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(u in t)if(t.hasOwnProperty(u)&&null!=(o=t[u]))switch(u){case"children":case"dangerouslySetInnerHTML":throw Error(l(137,n));default:Ku(e,n,u,o,t,null)}return;default:if(Cn(n)){for(d in t)t.hasOwnProperty(d)&&void 0!==(o=t[d])&&Zu(e,n,d,o,t,void 0);return}}for(s in t)t.hasOwnProperty(s)&&null!=(o=t[s])&&Ku(e,n,s,o,t,null)}var ed=null,nd=null;function td(e){return 9===e.nodeType?e:e.ownerDocument}function rd(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function od(e,n){if(0===e)switch(n){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===n?0:e}function ad(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"bigint"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ld=null,id="function"==typeof setTimeout?setTimeout:void 0,sd="function"==typeof clearTimeout?clearTimeout:void 0,cd="function"==typeof Promise?Promise:void 0,ud="function"==typeof queueMicrotask?queueMicrotask:void 0!==cd?function(e){return cd.resolve(null).then(e).catch(dd)}:id;function dd(e){setTimeout((function(){throw e}))}function fd(e){return"head"===e}function Ad(e,n){var t=n,r=0,o=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0<r&&8>r){t=r;var l=e.ownerDocument;if(1&t&&vd(l.documentElement),2&t&&vd(l.body),4&t)for(vd(t=l.head),l=t.firstChild;l;){var i=l.nextSibling,s=l.nodeName;l[De]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===l.rel.toLowerCase()||t.removeChild(l),l=i}}if(0===o)return e.removeChild(a),void Bf(n);o--}else"$"===t||"$?"===t||"$!"===t?o++:r=t.charCodeAt(0)-48;else r=0;t=a}while(t);Bf(n)}function pd(e){var n=e.firstChild;for(n&&10===n.nodeType&&(n=n.nextSibling);n;){var t=n;switch(n=n.nextSibling,t.nodeName){case"HTML":case"HEAD":case"BODY":pd(t),Le(t);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===t.rel.toLowerCase())continue}e.removeChild(t)}}function md(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function hd(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n||"F!"===n||"F"===n)break;if("/$"===n)return null}}return e}var gd=null;function bd(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}function yd(e,n,t){switch(n=td(t),e){case"html":if(!(e=n.documentElement))throw Error(l(452));return e;case"head":if(!(e=n.head))throw Error(l(453));return e;case"body":if(!(e=n.body))throw Error(l(454));return e;default:throw Error(l(451))}}function vd(e){for(var n=e.attributes;n.length;)e.removeAttributeNode(n[0]);Le(e)}var wd=new Map,xd=new Set;function Ed(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var kd=I.d;I.d={f:function(){var e=kd.f(),n=Mc();return e||n},r:function(e){var n=We(e);null!==n&&5===n.tag&&"form"===n.type?Pl(n):kd.r(e)},D:function(e){kd.D(e),Cd("dns-prefetch",e,null)},C:function(e,n){kd.C(e,n),Cd("preconnect",e,n)},L:function(e,n,t){kd.L(e,n,t);var r=Bd;if(r&&e&&n){var o='link[rel="preload"][as="'+mn(n)+'"]';"image"===n&&t&&t.imageSrcSet?(o+='[imagesrcset="'+mn(t.imageSrcSet)+'"]',"string"==typeof t.imageSizes&&(o+='[imagesizes="'+mn(t.imageSizes)+'"]')):o+='[href="'+mn(e)+'"]';var a=o;switch(n){case"style":a=Nd(e);break;case"script":a=Fd(e)}wd.has(a)||(e=d({rel:"preload",href:"image"===n&&t&&t.imageSrcSet?void 0:e,as:n},t),wd.set(a,e),null!==r.querySelector(o)||"style"===n&&r.querySelector(jd(a))||"script"===n&&r.querySelector(Pd(a))||(Ju(n=r.createElement("link"),"link",e),He(n),r.head.appendChild(n)))}},m:function(e,n){kd.m(e,n);var t=Bd;if(t&&e){var r=n&&"string"==typeof n.as?n.as:"script",o='link[rel="modulepreload"][as="'+mn(r)+'"][href="'+mn(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=Fd(e)}if(!wd.has(a)&&(e=d({rel:"modulepreload",href:e},n),wd.set(a,e),null===t.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(t.querySelector(Pd(a)))return}Ju(r=t.createElement("link"),"link",e),He(r),t.head.appendChild(r)}}},X:function(e,n){kd.X(e,n);var t=Bd;if(t&&e){var r=$e(t).hoistableScripts,o=Fd(e),a=r.get(o);a||((a=t.querySelector(Pd(o)))||(e=d({src:e,async:!0},n),(n=wd.get(o))&&Td(e,n),He(a=t.createElement("script")),Ju(a,"link",e),t.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,n,t){kd.S(e,n,t);var r=Bd;if(r&&e){var o=$e(r).hoistableStyles,a=Nd(e);n=n||"default";var l=o.get(a);if(!l){var i={loading:0,preload:null};if(l=r.querySelector(jd(a)))i.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":n},t),(t=wd.get(a))&&zd(e,t);var s=l=r.createElement("link");He(s),Ju(s,"link",e),s._p=new Promise((function(e,n){s.onload=e,s.onerror=n})),s.addEventListener("load",(function(){i.loading|=1})),s.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Id(l,n,r)}l={type:"stylesheet",instance:l,count:1,state:i},o.set(a,l)}}},M:function(e,n){kd.M(e,n);var t=Bd;if(t&&e){var r=$e(t).hoistableScripts,o=Fd(e),a=r.get(o);a||((a=t.querySelector(Pd(o)))||(e=d({src:e,async:!0,type:"module"},n),(n=wd.get(o))&&Td(e,n),He(a=t.createElement("script")),Ju(a,"link",e),t.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var Bd="undefined"==typeof document?null:document;function Cd(e,n,t){var r=Bd;if(r&&"string"==typeof n&&n){var o=mn(n);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof t&&(o+='[crossorigin="'+t+'"]'),xd.has(o)||(xd.add(o),e={rel:e,crossOrigin:t,href:n},null===r.querySelector(o)&&(Ju(n=r.createElement("link"),"link",e),He(n),r.head.appendChild(n)))}}function Sd(e,n,t,r){var o,a,i,s,c=(c=$.current)?Ed(c):null;if(!c)throw Error(l(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof t.precedence&&"string"==typeof t.href?(n=Nd(t.href),(r=(t=$e(c).hoistableStyles).get(n))||(r={type:"style",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===t.rel&&"string"==typeof t.href&&"string"==typeof t.precedence){e=Nd(t.href);var u=$e(c).hoistableStyles,d=u.get(e);if(d||(c=c.ownerDocument||c,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},u.set(e,d),(u=c.querySelector(jd(e)))&&!u._p&&(d.instance=u,d.state.loading=5),wd.has(e)||(t={rel:"preload",as:"style",href:t.href,crossOrigin:t.crossOrigin,integrity:t.integrity,media:t.media,hrefLang:t.hrefLang,referrerPolicy:t.referrerPolicy},wd.set(e,t),u||(o=c,a=e,i=t,s=d.state,o.querySelector('link[rel="preload"][as="style"]['+a+"]")?s.loading=1:(a=o.createElement("link"),s.preload=a,a.addEventListener("load",(function(){return s.loading|=1})),a.addEventListener("error",(function(){return s.loading|=2})),Ju(a,"link",i),He(a),o.head.appendChild(a))))),n&&null===r)throw Error(l(528,""));return d}if(n&&null!==r)throw Error(l(529,""));return null;case"script":return n=t.async,"string"==typeof(t=t.src)&&n&&"function"!=typeof n&&"symbol"!=typeof n?(n=Fd(t),(r=(t=$e(c).hoistableScripts).get(n))||(r={type:"script",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(l(444,e))}}function Nd(e){return'href="'+mn(e)+'"'}function jd(e){return'link[rel="stylesheet"]['+e+"]"}function _d(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function Fd(e){return'[src="'+mn(e)+'"]'}function Pd(e){return"script[async]"+e}function Od(e,n,t){if(n.count++,null===n.instance)switch(n.type){case"style":var r=e.querySelector('style[data-href~="'+mn(t.href)+'"]');if(r)return n.instance=r,He(r),r;var o=d({},t,{"data-href":t.href,"data-precedence":t.precedence,href:null,precedence:null});return He(r=(e.ownerDocument||e).createElement("style")),Ju(r,"style",o),Id(r,t.precedence,e),n.instance=r;case"stylesheet":o=Nd(t.href);var a=e.querySelector(jd(o));if(a)return n.state.loading|=4,n.instance=a,He(a),a;r=_d(t),(o=wd.get(o))&&zd(r,o),He(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise((function(e,n){i.onload=e,i.onerror=n})),Ju(a,"link",r),n.state.loading|=4,Id(a,t.precedence,e),n.instance=a;case"script":return a=Fd(t.src),(o=e.querySelector(Pd(a)))?(n.instance=o,He(o),o):(r=t,(o=wd.get(a))&&Td(r=d({},t),o),He(o=(e=e.ownerDocument||e).createElement("script")),Ju(o,"link",r),e.head.appendChild(o),n.instance=o);case"void":return null;default:throw Error(l(443,n.type))}else"stylesheet"===n.type&&!(4&n.state.loading)&&(r=n.instance,n.state.loading|=4,Id(r,t.precedence,e));return n.instance}function Id(e,n,t){for(var r=t.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,l=0;l<r.length;l++){var i=r[l];if(i.dataset.precedence===n)a=i;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(n=9===t.nodeType?t.head:t).insertBefore(e,n.firstChild)}function zd(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.title&&(e.title=n.title)}function Td(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.integrity&&(e.integrity=n.integrity)}var Rd=null;function Dd(e,n,t){if(null===Rd){var r=new Map,o=Rd=new Map;o.set(t,r)}else(r=(o=Rd).get(t))||(r=new Map,o.set(t,r));if(r.has(e))return r;for(r.set(e,null),t=t.getElementsByTagName(e),o=0;o<t.length;o++){var a=t[o];if(!(a[De]||a[Fe]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var l=a.getAttribute(n)||"";l=e+l;var i=r.get(l);i?i.push(a):r.set(l,[a])}}return r}function Ld(e,n,t){(e=e.ownerDocument||e).head.insertBefore(t,"title"===n?e.querySelector("head > title"):null)}function Md(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Wd=null;function Ud(){}function $d(){if(this.count--,0===this.count)if(this.stylesheets)qd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Hd=null;function qd(e,n){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Hd=new Map,n.forEach(Vd,e),Hd=null,$d.call(e))}function Vd(e,n){if(!(4&n.state.loading)){var t=Hd.get(e);if(t)var r=t.get(null);else{t=new Map,Hd.set(e,t);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var l=o[a];"LINK"!==l.nodeName&&"not all"===l.getAttribute("media")||(t.set(l.dataset.precedence,l),r=l)}r&&t.set(null,r)}l=(o=n.instance).getAttribute("data-precedence"),(a=t.get(l)||r)===r&&t.set(null,o),t.set(l,o),this.count++,r=$d.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),n.state.loading|=4}}var Yd={$$typeof:v,Provider:null,Consumer:null,_currentValue:z,_currentValue2:z,_threadCount:0};function Qd(e,n,t,r,o,a,l,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ee(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ee(0),this.hiddenUpdates=Ee(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=l,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Xd(e,n,t,r,o,a){o=function(e){return e?e=Or:Or}(o),null===r.context?r.context=o:r.pendingContext=o,(r=oa(n)).payload={element:t},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(t=aa(e,r,n))&&(zc(t,0,n),la(t,e,n))}function Gd(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Kd(e,n){Gd(e,n),(e=e.alternate)&&Gd(e,n)}function Zd(e){if(13===e.tag){var n=_r(e,67108864);null!==n&&zc(n,0,67108864),Kd(e,67108864)}}var Jd=!0;function ef(e,n,t,r){var o=O.T;O.T=null;var a=I.p;try{I.p=2,tf(e,n,t,r)}finally{I.p=a,O.T=o}}function nf(e,n,t,r){var o=O.T;O.T=null;var a=I.p;try{I.p=8,tf(e,n,t,r)}finally{I.p=a,O.T=o}}function tf(e,n,t,r){if(Jd){var o=rf(r);if(null===o)Wu(e,n,r,of,t),hf(e,r);else if(function(e,n,t,r,o){switch(n){case"focusin":return cf=gf(cf,e,n,t,r,o),!0;case"dragenter":return uf=gf(uf,e,n,t,r,o),!0;case"mouseover":return df=gf(df,e,n,t,r,o),!0;case"pointerover":var a=o.pointerId;return ff.set(a,gf(ff.get(a)||null,e,n,t,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Af.set(a,gf(Af.get(a)||null,e,n,t,r,o)),!0}return!1}(o,e,n,t,r))r.stopPropagation();else if(hf(e,r),4&n&&-1<mf.indexOf(e)){for(;null!==o;){var a=We(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var l=ge(a.pendingLanes);if(0!==l){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;l;){var s=1<<31-fe(l);i.entanglements[1]|=s,l&=~s}wu(a),!(6&nc)&&(wc=ee()+500,xu(0,!1))}}break;case 13:null!==(i=_r(a,2))&&zc(i,0,2),Mc(),Kd(a,2)}if(null===(a=rf(r))&&Wu(e,n,r,of,t),a===o)break;o=a}null!==o&&r.stopPropagation()}else Wu(e,n,r,null,t)}}function rf(e){return af(e=Fn(e))}var of=null;function af(e){if(of=null,null!==(e=Me(e))){var n=i(e);if(null===n)e=null;else{var t=n.tag;if(13===t){if(null!==(e=s(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null)}}return of=e,null}function lf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case te:return 2;case re:return 8;case oe:case ae:return 32;case le:return 268435456;default:return 32}default:return 32}}var sf=!1,cf=null,uf=null,df=null,ff=new Map,Af=new Map,pf=[],mf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function hf(e,n){switch(e){case"focusin":case"focusout":cf=null;break;case"dragenter":case"dragleave":uf=null;break;case"mouseover":case"mouseout":df=null;break;case"pointerover":case"pointerout":ff.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":Af.delete(n.pointerId)}}function gf(e,n,t,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==n&&null!==(n=We(n))&&Zd(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function bf(e){var n=Me(e.target);if(null!==n){var t=i(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=s(t)))return e.blockedOn=n,void function(e){var n=I.p;try{return I.p=e,function(){if(13===t.tag){var e=Oc();e=Se(e);var n=_r(t,e);null!==n&&zc(n,0,e),Kd(t,e)}}()}finally{I.p=n}}(e.priority)}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function yf(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=rf(e.nativeEvent);if(null!==t)return null!==(n=We(t))&&Zd(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);_n=r,t.target.dispatchEvent(r),_n=null,n.shift()}return!0}function vf(e,n,t){yf(e)&&t.delete(n)}function wf(){sf=!1,null!==cf&&yf(cf)&&(cf=null),null!==uf&&yf(uf)&&(uf=null),null!==df&&yf(df)&&(df=null),ff.forEach(vf),Af.forEach(vf)}function xf(e,n){e.blockedOn===n&&(e.blockedOn=null,sf||(sf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,wf)))}var Ef=null;function kf(e){Ef!==e&&(Ef=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){Ef===e&&(Ef=null);for(var n=0;n<e.length;n+=3){var t=e[n],r=e[n+1],o=e[n+2];if("function"!=typeof r){if(null===af(r||t))continue;break}var a=We(t);null!==a&&(e.splice(n,3),n-=3,_l(a,{pending:!0,data:o,method:t.method,action:r},r,o))}})))}function Bf(e){function n(n){return xf(n,e)}null!==cf&&xf(cf,e),null!==uf&&xf(uf,e),null!==df&&xf(df,e),ff.forEach(n),Af.forEach(n);for(var t=0;t<pf.length;t++){var r=pf[t];r.blockedOn===e&&(r.blockedOn=null)}for(;0<pf.length&&null===(t=pf[0]).blockedOn;)bf(t),null===t.blockedOn&&pf.shift();if(null!=(t=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<t.length;r+=3){var o=t[r],a=t[r+1],l=o[Pe]||null;if("function"==typeof a)l||kf(t);else if(l){var i=null;if(a&&a.hasAttribute("formAction")){if(o=a,l=a[Pe]||null)i=l.formAction;else if(null!==af(o))continue}else i=l.action;"function"==typeof i?t[r+1]=i:(t.splice(r,3),r-=3),kf(t)}}}function Cf(e){this._internalRoot=e}function Sf(e){this._internalRoot=e}Sf.prototype.render=Cf.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(l(409));Xd(n.current,Oc(),e,n,null,null)},Sf.prototype.unmount=Cf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;Xd(e.current,2,null,e,null,null),Mc(),n[Oe]=null}},Sf.prototype.unstable_scheduleHydration=function(e){if(e){var n=je();e={blockedOn:null,target:e,priority:n};for(var t=0;t<pf.length&&0!==n&&n<pf[t].priority;t++);pf.splice(t,0,e),0===t&&bf(e)}};var Nf=o.version;if("19.1.0"!==Nf)throw Error(l(527,Nf,"19.1.0"));I.findDOMNode=function(e){var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=function(e){var n=e.alternate;if(!n){if(null===(n=i(e)))throw Error(l(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return c(o),e;if(a===r)return c(o),n;a=a.sibling}throw Error(l(188))}if(t.return!==r.return)t=o,r=a;else{for(var s=!1,u=o.child;u;){if(u===t){s=!0,t=o,r=a;break}if(u===r){s=!0,r=o,t=a;break}u=u.sibling}if(!s){for(u=a.child;u;){if(u===t){s=!0,t=a,r=o;break}if(u===r){s=!0,r=a,t=o;break}u=u.sibling}if(!s)throw Error(l(189))}}if(t.alternate!==r)throw Error(l(190))}if(3!==t.tag)throw Error(l(188));return t.stateNode.current===t?e:n}(n),null===(e=null!==e?u(e):null)?null:e.stateNode};var jf={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:O,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var _f=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!_f.isDisabled&&_f.supportsFiber)try{ce=_f.inject(jf),ue=_f}catch(e){}}n.createRoot=function(e,n){if(!(t=e)||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(l(299));var t,r=!1,o="",a=gi,i=bi,s=yi;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(i=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks),n=function(e,n,t,r,o,a,l,i,s,c,u,d){return e=new Qd(e,n,t,l,i,s,c,d),n=1,!0===a&&(n|=24),a=zr(3,null,null,n),e.current=a,a.stateNode=e,(n=Oo()).refCount++,e.pooledCache=n,n.refCount++,a.memoizedState={element:r,isDehydrated:t,cache:n},ta(a),e}(e,1,!1,null,0,r,o,a,i,s,0,null),e[Oe]=n.current,Lu(e),new Cf(n)}},275:(e,n,t)=>{"use strict";t.d(n,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),l=t.n(a)()(o());l.push([e.id,"/* General button styles */\n.fc-button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    white-space: nowrap;\n    border-radius: 0.375rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n    cursor: pointer;\n    border: 1px solid transparent;\n}\n\n.fc-button:focus-visible {\n    outline: 2px solid #2271b1; /* WordPress blue */\n    outline-offset: 2px;\n}\n\n.fc-button:disabled {\n    pointer-events: none;\n    opacity: 0.5;\n}\n\n.fc-button svg {\n    pointer-events: none;\n    width: 1rem;\n    height: 1rem;\n    flex-shrink: 0;\n}\n\n/* Variants */\n.fc-button-default {\n    background-color: #2271b1; /* WordPress primary blue */\n    color: #ffffff;\n}\n\n.fc-button-default:hover {\n    background-color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-destructive {\n    background-color: #d63638; /* WordPress red */\n    color: #ffffff;\n}\n\n.fc-button-destructive:hover {\n    background-color: #b22222; /* Darker WordPress red */\n}\n\n.fc-button-outline {\n    border-color: #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-outline:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327;\n}\n\n.fc-button-secondary {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-secondary:hover {\n    background-color: #e0e0e0; /* Darker light gray */\n}\n\n.fc-button-ghost {\n    background-color: transparent;\n    color: #2271b1; /* WordPress blue */\n}\n\n.fc-button-ghost:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-link {\n    color: #2271b1; /* WordPress blue */\n    text-decoration: underline;\n    text-underline-offset: 4px;\n}\n\n.fc-button-link:hover {\n    text-decoration: none;\n}\n\n/* Sizes */\n.fc-button-size-default {\n    height: 2.5rem;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n}\n\n.fc-button-size-sm {\n    height: 2.25rem;\n    border-radius: 0.375rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n}\n\n.fc-button-size-lg {\n    height: 2.75rem;\n    border-radius: 0.375rem;\n    padding-left: 2rem;\n    padding-right: 2rem;\n}\n\n.fc-button-size-icon {\n    height: 2.5rem;\n    width: 2.5rem;\n}\n","",{version:3,sources:["webpack://./assets-src/js/components/code-import/Button.css"],names:[],mappings:"AAAA,0BAA0B;AAC1B;IACI,oBAAoB;IACpB,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,mBAAmB;IACnB,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;IAChB,wJAAwJ;IACxJ,wDAAwD;IACxD,0BAA0B;IAC1B,eAAe;IACf,6BAA6B;AACjC;;AAEA;IACI,0BAA0B,EAAE,mBAAmB;IAC/C,mBAAmB;AACvB;;AAEA;IACI,oBAAoB;IACpB,YAAY;AAChB;;AAEA;IACI,oBAAoB;IACpB,WAAW;IACX,YAAY;IACZ,cAAc;AAClB;;AAEA,aAAa;AACb;IACI,yBAAyB,EAAE,2BAA2B;IACtD,cAAc;AAClB;;AAEA;IACI,yBAAyB,EAAE,0BAA0B;AACzD;;AAEA;IACI,yBAAyB,EAAE,kBAAkB;IAC7C,cAAc;AAClB;;AAEA;IACI,yBAAyB,EAAE,yBAAyB;AACxD;;AAEA;IACI,qBAAqB,EAAE,0BAA0B;IACjD,yBAAyB;IACzB,cAAc,EAAE,6BAA6B;AACjD;;AAEA;IACI,yBAAyB,EAAE,oCAAoC;IAC/D,cAAc;AAClB;;AAEA;IACI,yBAAyB,EAAE,oCAAoC;IAC/D,cAAc,EAAE,6BAA6B;AACjD;;AAEA;IACI,yBAAyB,EAAE,sBAAsB;AACrD;;AAEA;IACI,6BAA6B;IAC7B,cAAc,EAAE,mBAAmB;AACvC;;AAEA;IACI,yBAAyB,EAAE,oCAAoC;IAC/D,cAAc,EAAE,0BAA0B;AAC9C;;AAEA;IACI,cAAc,EAAE,mBAAmB;IACnC,0BAA0B;IAC1B,0BAA0B;AAC9B;;AAEA;IACI,qBAAqB;AACzB;;AAEA,UAAU;AACV;IACI,cAAc;IACd,kBAAkB;IAClB,mBAAmB;IACnB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,uBAAuB;IACvB,qBAAqB;IACrB,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,aAAa;AACjB",sourcesContent:["/* General button styles */\n.fc-button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    white-space: nowrap;\n    border-radius: 0.375rem;\n    font-size: 0.875rem;\n    font-weight: 500;\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n    cursor: pointer;\n    border: 1px solid transparent;\n}\n\n.fc-button:focus-visible {\n    outline: 2px solid #2271b1; /* WordPress blue */\n    outline-offset: 2px;\n}\n\n.fc-button:disabled {\n    pointer-events: none;\n    opacity: 0.5;\n}\n\n.fc-button svg {\n    pointer-events: none;\n    width: 1rem;\n    height: 1rem;\n    flex-shrink: 0;\n}\n\n/* Variants */\n.fc-button-default {\n    background-color: #2271b1; /* WordPress primary blue */\n    color: #ffffff;\n}\n\n.fc-button-default:hover {\n    background-color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-destructive {\n    background-color: #d63638; /* WordPress red */\n    color: #ffffff;\n}\n\n.fc-button-destructive:hover {\n    background-color: #b22222; /* Darker WordPress red */\n}\n\n.fc-button-outline {\n    border-color: #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-outline:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327;\n}\n\n.fc-button-secondary {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #1d2327; /* WordPress dark gray text */\n}\n\n.fc-button-secondary:hover {\n    background-color: #e0e0e0; /* Darker light gray */\n}\n\n.fc-button-ghost {\n    background-color: transparent;\n    color: #2271b1; /* WordPress blue */\n}\n\n.fc-button-ghost:hover {\n    background-color: #f0f0f1; /* WordPress light gray background */\n    color: #135e96; /* Darker WordPress blue */\n}\n\n.fc-button-link {\n    color: #2271b1; /* WordPress blue */\n    text-decoration: underline;\n    text-underline-offset: 4px;\n}\n\n.fc-button-link:hover {\n    text-decoration: none;\n}\n\n/* Sizes */\n.fc-button-size-default {\n    height: 2.5rem;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n}\n\n.fc-button-size-sm {\n    height: 2.25rem;\n    border-radius: 0.375rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n}\n\n.fc-button-size-lg {\n    height: 2.75rem;\n    border-radius: 0.375rem;\n    padding-left: 2rem;\n    padding-right: 2rem;\n}\n\n.fc-button-size-icon {\n    height: 2.5rem;\n    width: 2.5rem;\n}\n"],sourceRoot:""}]);const i=l},314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(l[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&l[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},338:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(247)},354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},433:(e,n,t)=>{"use strict";t.d(n,{A:()=>i});var r=t(354),o=t.n(r),a=t(314),l=t.n(a)()(o());l.push([e.id,"/* Card styles */\n.fc-card {\n    border-radius: 0.5rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n/* CardHeader styles */\n.fc-card-header {\n    display: flex;\n    flex-direction: column;\n    gap: 0.375rem;\n    padding: 1.5rem;\n}\n\n/* CardTitle styles */\n.fc-card-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n    line-height: 1;\n    letter-spacing: -0.025em;\n}\n\n/* CardDescription styles */\n.fc-card-description {\n    font-size: 0.875rem;\n    color: #50575e; /* WordPress medium gray */\n}\n\n/* CardContent styles */\n.fc-card-content {\n    padding: 0.5rem;\n}\n\n/* CardFooter styles */\n.fc-card-footer {\n    display: flex;\n    align-items: center;\n    padding: 1.5rem;\n    padding-top: 0;\n}\n","",{version:3,sources:["webpack://./assets-src/js/components/code-import/Card.css"],names:[],mappings:"AAAA,gBAAgB;AAChB;IACI,qBAAqB;IACrB,yBAAyB,EAAE,0BAA0B;IACrD,yBAAyB;IACzB,cAAc;IACd,2CAA2C;AAC/C;;AAEA,sBAAsB;AACtB;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,eAAe;AACnB;;AAEA,qBAAqB;AACrB;IACI,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;IACd,wBAAwB;AAC5B;;AAEA,2BAA2B;AAC3B;IACI,mBAAmB;IACnB,cAAc,EAAE,0BAA0B;AAC9C;;AAEA,uBAAuB;AACvB;IACI,eAAe;AACnB;;AAEA,sBAAsB;AACtB;IACI,aAAa;IACb,mBAAmB;IACnB,eAAe;IACf,cAAc;AAClB",sourcesContent:["/* Card styles */\n.fc-card {\n    border-radius: 0.5rem;\n    border: 1px solid #c3c4c7; /* WordPress gray border */\n    background-color: #ffffff;\n    color: #1d2327;\n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n/* CardHeader styles */\n.fc-card-header {\n    display: flex;\n    flex-direction: column;\n    gap: 0.375rem;\n    padding: 1.5rem;\n}\n\n/* CardTitle styles */\n.fc-card-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n    line-height: 1;\n    letter-spacing: -0.025em;\n}\n\n/* CardDescription styles */\n.fc-card-description {\n    font-size: 0.875rem;\n    color: #50575e; /* WordPress medium gray */\n}\n\n/* CardContent styles */\n.fc-card-content {\n    padding: 0.5rem;\n}\n\n/* CardFooter styles */\n.fc-card-footer {\n    display: flex;\n    align-items: center;\n    padding: 1.5rem;\n    padding-top: 0;\n}\n"],sourceRoot:""}]);const i=l},477:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,o=e[r];if(!(0<a(o,n)))break e;e[r]=n,e[t]=o,t=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length,l=o>>>1;r<l;){var i=2*(r+1)-1,s=e[i],c=i+1,u=e[c];if(0>a(s,t))c<o&&0>a(u,s)?(e[r]=u,e[c]=t,r=c):(e[r]=s,e[i]=t,r=i);else{if(!(c<o&&0>a(u,t)))break e;e[r]=u,e[c]=t,r=c}}}return n}function a(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if(n.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var l=performance;n.unstable_now=function(){return l.now()}}else{var i=Date,s=i.now();n.unstable_now=function(){return i.now()-s}}var c=[],u=[],d=1,f=null,A=3,p=!1,m=!1,h=!1,g=!1,b="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var n=r(u);null!==n;){if(null===n.callback)o(u);else{if(!(n.startTime<=e))break;o(u),n.sortIndex=n.expirationTime,t(c,n)}n=r(u)}}function x(e){if(h=!1,w(e),!m)if(null!==r(c))m=!0,k||(k=!0,E());else{var n=r(u);null!==n&&P(x,n.startTime-e)}}var E,k=!1,B=-1,C=5,S=-1;function N(){return!(!g&&n.unstable_now()-S<C)}function j(){if(g=!1,k){var e=n.unstable_now();S=e;var t=!0;try{e:{m=!1,h&&(h=!1,y(B),B=-1),p=!0;var a=A;try{n:{for(w(e),f=r(c);null!==f&&!(f.expirationTime>e&&N());){var l=f.callback;if("function"==typeof l){f.callback=null,A=f.priorityLevel;var i=l(f.expirationTime<=e);if(e=n.unstable_now(),"function"==typeof i){f.callback=i,w(e),t=!0;break n}f===r(c)&&o(c),w(e)}else o(c);f=r(c)}if(null!==f)t=!0;else{var s=r(u);null!==s&&P(x,s.startTime-e),t=!1}}break e}finally{f=null,A=a,p=!1}t=void 0}}finally{t?E():k=!1}}}if("function"==typeof v)E=function(){v(j)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,F=_.port2;_.port1.onmessage=j,E=function(){F.postMessage(null)}}else E=function(){b(j,0)};function P(e,t){B=b((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return A},n.unstable_next=function(e){switch(A){case 1:case 2:case 3:var n=3;break;default:n=A}var t=A;A=n;try{return e()}finally{A=t}},n.unstable_requestPaint=function(){g=!0},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=A;A=e;try{return n()}finally{A=t}},n.unstable_scheduleCallback=function(e,o,a){var l=n.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:i=a+i,sortIndex:-1},a>l?(e.sortIndex=a,t(u,e),null===r(c)&&e===r(u)&&(h?(y(B),B=-1):h=!0,P(x,a-l))):(e.sortIndex=i,t(c,e),m||p||(m=!0,k||(k=!0,E()))),e},n.unstable_shouldYield=N,n.unstable_wrapCallback=function(e){var n=A;return function(){var t=A;A=n;try{return e.apply(this,arguments)}finally{A=t}}}},540:(e,n,t)=>{"use strict";e.exports=t(869)},604:(e,n,t)=>{var r;!function(){"use strict";var o={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function a(e){return function(e,n){var t,r,l,i,s,c,u,d,f,A=1,p=e.length,m="";for(r=0;r<p;r++)if("string"==typeof e[r])m+=e[r];else if("object"==typeof e[r]){if((i=e[r]).keys)for(t=n[A],l=0;l<i.keys.length;l++){if(null==t)throw new Error(a('[sprintf] Cannot access property "%s" of undefined value "%s"',i.keys[l],i.keys[l-1]));t=t[i.keys[l]]}else t=i.param_no?n[i.param_no]:n[A++];if(o.not_type.test(i.type)&&o.not_primitive.test(i.type)&&t instanceof Function&&(t=t()),o.numeric_arg.test(i.type)&&"number"!=typeof t&&isNaN(t))throw new TypeError(a("[sprintf] expecting number but found %T",t));switch(o.number.test(i.type)&&(d=t>=0),i.type){case"b":t=parseInt(t,10).toString(2);break;case"c":t=String.fromCharCode(parseInt(t,10));break;case"d":case"i":t=parseInt(t,10);break;case"j":t=JSON.stringify(t,null,i.width?parseInt(i.width):0);break;case"e":t=i.precision?parseFloat(t).toExponential(i.precision):parseFloat(t).toExponential();break;case"f":t=i.precision?parseFloat(t).toFixed(i.precision):parseFloat(t);break;case"g":t=i.precision?String(Number(t.toPrecision(i.precision))):parseFloat(t);break;case"o":t=(parseInt(t,10)>>>0).toString(8);break;case"s":t=String(t),t=i.precision?t.substring(0,i.precision):t;break;case"t":t=String(!!t),t=i.precision?t.substring(0,i.precision):t;break;case"T":t=Object.prototype.toString.call(t).slice(8,-1).toLowerCase(),t=i.precision?t.substring(0,i.precision):t;break;case"u":t=parseInt(t,10)>>>0;break;case"v":t=t.valueOf(),t=i.precision?t.substring(0,i.precision):t;break;case"x":t=(parseInt(t,10)>>>0).toString(16);break;case"X":t=(parseInt(t,10)>>>0).toString(16).toUpperCase()}o.json.test(i.type)?m+=t:(!o.number.test(i.type)||d&&!i.sign?f="":(f=d?"+":"-",t=t.toString().replace(o.sign,"")),c=i.pad_char?"0"===i.pad_char?"0":i.pad_char.charAt(1):" ",u=i.width-(f+t).length,s=i.width&&u>0?c.repeat(u):"",m+=i.align?f+t+s:"0"===c?f+s+t:s+f+t)}return m}(function(e){if(i[e])return i[e];for(var n,t=e,r=[],a=0;t;){if(null!==(n=o.text.exec(t)))r.push(n[0]);else if(null!==(n=o.modulo.exec(t)))r.push("%");else{if(null===(n=o.placeholder.exec(t)))throw new SyntaxError("[sprintf] unexpected placeholder");if(n[2]){a|=1;var l=[],s=n[2],c=[];if(null===(c=o.key.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(l.push(c[1]);""!==(s=s.substring(c[0].length));)if(null!==(c=o.key_access.exec(s)))l.push(c[1]);else{if(null===(c=o.index_access.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");l.push(c[1])}n[2]=l}else a|=2;if(3===a)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r.push({placeholder:n[0],param_no:n[1],keys:n[2],sign:n[3],pad_char:n[4],align:n[5],width:n[6],precision:n[7],type:n[8]})}t=t.substring(n[0].length)}return i[e]=r}(e),arguments)}function l(e,n){return a.apply(null,[e].concat(n||[]))}var i=Object.create(null);"undefined"!=typeof window&&(window.sprintf=a,window.vsprintf=l,void 0===(r=function(){return{sprintf:a,vsprintf:l}}.call(n,t,n,e))||(e.exports=r))}()},659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},698:(e,n)=>{"use strict";var t=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function o(e,n,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==n.key&&(o=""+n.key),"key"in n)for(var a in r={},n)"key"!==a&&(r[a]=n[a]);else r=n;return n=r.ref,{$$typeof:t,type:e,key:o,ref:void 0!==n?n:null,props:r}}n.Fragment=r,n.jsx=o,n.jsxs=o},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},848:(e,n,t)=>{"use strict";e.exports=t(698)},869:(e,n)=>{"use strict";var t=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),A=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,h={};function g(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||p}function b(){}function y(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=g.prototype;var v=y.prototype=new b;v.constructor=y,m(v,g.prototype),v.isPureReactComponent=!0;var w=Array.isArray,x={H:null,A:null,T:null,S:null,V:null},E=Object.prototype.hasOwnProperty;function k(e,n,r,o,a,l){return r=l.ref,{$$typeof:t,type:e,key:n,ref:void 0!==r?r:null,props:l}}function B(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var C=/\/+/g;function S(e,n){return"object"==typeof e&&null!==e&&null!=e.key?(t=""+e.key,r={"=":"=0",":":"=2"},"$"+t.replace(/[=:]/g,(function(e){return r[e]}))):n.toString(36);var t,r}function N(){}function j(e,n,o,a,l){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var s,c,u=!1;if(null===e)u=!0;else switch(i){case"bigint":case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case t:case r:u=!0;break;case f:return j((u=e._init)(e._payload),n,o,a,l)}}if(u)return l=l(e),u=""===a?"."+S(e,0):a,w(l)?(o="",null!=u&&(o=u.replace(C,"$&/")+"/"),j(l,n,o,"",(function(e){return e}))):null!=l&&(B(l)&&(s=l,c=o+(null==l.key||e&&e.key===l.key?"":(""+l.key).replace(C,"$&/")+"/")+u,l=k(s.type,c,void 0,0,0,s.props)),n.push(l)),1;u=0;var d,p=""===a?".":a+":";if(w(e))for(var m=0;m<e.length;m++)u+=j(a=e[m],n,o,i=p+S(a,m),l);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=A&&d[A]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(a=e.next()).done;)u+=j(a=a.value,n,o,i=p+S(a,m++),l);else if("object"===i){if("function"==typeof e.then)return j(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(N,N):(e.status="pending",e.then((function(n){"pending"===e.status&&(e.status="fulfilled",e.value=n)}),(function(n){"pending"===e.status&&(e.status="rejected",e.reason=n)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),n,o,a,l);throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.")}return u}function _(e,n,t){if(null==e)return e;var r=[],o=0;return j(e,r,"","",(function(e){return n.call(t,e,o++)})),r}function F(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var P="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function O(){}n.Children={map:_,forEach:function(e,n,t){_(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return _(e,(function(){n++})),n},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!B(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=g,n.Fragment=o,n.Profiler=l,n.PureComponent=y,n.StrictMode=a,n.Suspense=u,n.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=x,n.__COMPILER_RUNTIME={__proto__:null,c:function(e){return x.H.useMemoCache(e)}},n.cache=function(e){return function(){return e.apply(null,arguments)}},n.cloneElement=function(e,n,t){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),o=e.key;if(null!=n)for(a in n.ref,void 0!==n.key&&(o=""+n.key),n)!E.call(n,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===n.ref||(r[a]=n[a]);var a=arguments.length-2;if(1===a)r.children=t;else if(1<a){for(var l=Array(a),i=0;i<a;i++)l[i]=arguments[i+2];r.children=l}return k(e.type,o,void 0,0,0,r)},n.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},n.createElement=function(e,n,t){var r,o={},a=null;if(null!=n)for(r in void 0!==n.key&&(a=""+n.key),n)E.call(n,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=n[r]);var l=arguments.length-2;if(1===l)o.children=t;else if(1<l){for(var i=Array(l),s=0;s<l;s++)i[s]=arguments[s+2];o.children=i}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return k(e,a,void 0,0,0,o)},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=B,n.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:F}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=x.T,t={};x.T=t;try{var r=e(),o=x.S;null!==o&&o(t,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(O,P)}catch(e){P(e)}finally{x.T=n}},n.unstable_useCacheRefresh=function(){return x.H.useCacheRefresh()},n.use=function(e){return x.H.use(e)},n.useActionState=function(e,n,t){return x.H.useActionState(e,n,t)},n.useCallback=function(e,n){return x.H.useCallback(e,n)},n.useContext=function(e){return x.H.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e,n){return x.H.useDeferredValue(e,n)},n.useEffect=function(e,n,t){var r=x.H;if("function"==typeof t)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,n)},n.useId=function(){return x.H.useId()},n.useImperativeHandle=function(e,n,t){return x.H.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return x.H.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return x.H.useLayoutEffect(e,n)},n.useMemo=function(e,n){return x.H.useMemo(e,n)},n.useOptimistic=function(e,n){return x.H.useOptimistic(e,n)},n.useReducer=function(e,n,t){return x.H.useReducer(e,n,t)},n.useRef=function(e){return x.H.useRef(e)},n.useState=function(e){return x.H.useState(e)},n.useSyncExternalStore=function(e,n,t){return x.H.useSyncExternalStore(e,n,t)},n.useTransition=function(){return x.H.useTransition()},n.version="19.1.0"},961:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(221)},982:(e,n,t)=>{"use strict";e.exports=t(477)}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var a=r[e]={id:e,exports:{}};return t[e](a,a.exports,o),a.exports}o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(t,r){if(1&r&&(t=this(t)),8&r)return t;if("object"==typeof t&&t){if(4&r&&t.__esModule)return t;if(16&r&&"function"==typeof t.then)return t}var a=Object.create(null);o.r(a);var l={};e=e||[null,n({}),n([]),n(n)];for(var i=2&r&&t;"object"==typeof i&&!~e.indexOf(i);i=n(i))Object.getOwnPropertyNames(i).forEach((e=>l[e]=()=>t[e]));return l.default=()=>t,o.d(a,l),a},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nc=void 0,(()=>{"use strict";var e,n,t,r,a=o(848),l=o(540),i=o.t(l,2),s=o(338);o(604),function(e,n){n=n||{}}(console.error),e={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},n=["(","?"],t={")":["("],":":["?","?:"]},r=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/;var c={"!":function(e){return!e},"*":function(e,n){return e*n},"/":function(e,n){return e/n},"%":function(e,n){return e%n},"+":function(e,n){return e+n},"-":function(e,n){return e-n},"<":function(e,n){return e<n},"<=":function(e,n){return e<=n},">":function(e,n){return e>n},">=":function(e,n){return e>=n},"==":function(e,n){return e===n},"!=":function(e,n){return e!==n},"&&":function(e,n){return e&&n},"||":function(e,n){return e||n},"?:":function(e,n,t){if(e)throw n;return t}};var u={contextDelimiter:"",onMissingKey:null};function d(e,n){var t;for(t in this.data=e,this.pluralForms={},this.options={},u)this.options[t]=void 0!==n&&t in n?n[t]:u[t]}d.prototype.getPluralForm=function(o,a){var l,i,s,u,d=this.pluralForms[o];return d||("function"!=typeof(s=(l=this.data[o][""])["Plural-Forms"]||l["plural-forms"]||l.plural_forms)&&(i=function(e){var n,t,r;for(n=e.split(";"),t=0;t<n.length;t++)if(0===(r=n[t].trim()).indexOf("plural="))return r.substr(7)}(l["Plural-Forms"]||l["plural-forms"]||l.plural_forms),u=function(o){var a=function(o){for(var a,l,i,s,c=[],u=[];a=o.match(r);){for(l=a[0],(i=o.substr(0,a.index).trim())&&c.push(i);s=u.pop();){if(t[l]){if(t[l][0]===s){l=t[l][1]||l;break}}else if(n.indexOf(s)>=0||e[s]<e[l]){u.push(s);break}c.push(s)}t[l]||u.push(l),o=o.substr(a.index+l.length)}return(o=o.trim())&&c.push(o),c.concat(u.reverse())}(o);return function(e){return function(e,n){var t,r,o,a,l,i,s=[];for(t=0;t<e.length;t++){if(l=e[t],a=c[l]){for(r=a.length,o=Array(r);r--;)o[r]=s.pop();try{i=a.apply(null,o)}catch(e){return e}}else i=n.hasOwnProperty(l)?n[l]:+l;s.push(i)}return s[0]}(a,e)}}(i),s=function(e){return+u({n:e})}),d=this.pluralForms[o]=s),d(a)},d.prototype.dcnpgettext=function(e,n,t,r,o){var a,l,i;return a=void 0===o?0:this.getPluralForm(e,o),l=t,n&&(l=n+this.options.contextDelimiter+t),(i=this.data[e][l])&&i[a]?i[a]:(this.options.onMissingKey&&this.options.onMissingKey(t,e),0===a?t:r)};const f={plural_forms:e=>1===e?0:1},A=/^i18n\.(n?gettext|has_translation)(_|$)/,p=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)},m=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)},h=function(e,n){return function(t,r,o,a=10){const l=e[n];if(!m(t))return;if(!p(r))return;if("function"!=typeof o)return void console.error("The hook callback must be a function.");if("number"!=typeof a)return void console.error("If specified, the hook priority must be a number.");const i={callback:o,priority:a,namespace:r};if(l[t]){const e=l[t].handlers;let n;for(n=e.length;n>0&&!(a>=e[n-1].priority);n--);n===e.length?e[n]=i:e.splice(n,0,i),l.__current.forEach((e=>{e.name===t&&e.currentIndex>=n&&e.currentIndex++}))}else l[t]={handlers:[i],runs:0};"hookAdded"!==t&&e.doAction("hookAdded",t,r,o,a)}},g=function(e,n,t=!1){return function(r,o){const a=e[n];if(!m(r))return;if(!t&&!p(o))return;if(!a[r])return 0;let l=0;if(t)l=a[r].handlers.length,a[r]={runs:a[r].runs,handlers:[]};else{const e=a[r].handlers;for(let n=e.length-1;n>=0;n--)e[n].namespace===o&&(e.splice(n,1),l++,a.__current.forEach((e=>{e.name===r&&e.currentIndex>=n&&e.currentIndex--})))}return"hookRemoved"!==r&&e.doAction("hookRemoved",r,o),l}},b=function(e,n){return function(t,r){const o=e[n];return void 0!==r?t in o&&o[t].handlers.some((e=>e.namespace===r)):t in o}},y=function(e,n,t,r){return function(o,...a){const l=e[n];l[o]||(l[o]={handlers:[],runs:0}),l[o].runs++;const i=l[o].handlers;if(!i||!i.length)return t?a[0]:void 0;const s={name:o,currentIndex:0};return(r?async function(){try{l.__current.add(s);let e=t?a[0]:void 0;for(;s.currentIndex<i.length;){const n=i[s.currentIndex];e=await n.callback.apply(null,a),t&&(a[0]=e),s.currentIndex++}return t?e:void 0}finally{l.__current.delete(s)}}:function(){try{l.__current.add(s);let e=t?a[0]:void 0;for(;s.currentIndex<i.length;)e=i[s.currentIndex].callback.apply(null,a),t&&(a[0]=e),s.currentIndex++;return t?e:void 0}finally{l.__current.delete(s)}})()}},v=function(e,n){return function(){var t;const r=e[n],o=Array.from(r.__current);return null!==(t=o.at(-1)?.name)&&void 0!==t?t:null}},w=function(e,n){return function(t){const r=e[n];return void 0===t?r.__current.size>0:Array.from(r.__current).some((e=>e.name===t))}},x=function(e,n){return function(t){const r=e[n];if(m(t))return r[t]&&r[t].runs?r[t].runs:0}};class E{constructor(){this.actions=Object.create(null),this.actions.__current=new Set,this.filters=Object.create(null),this.filters.__current=new Set,this.addAction=h(this,"actions"),this.addFilter=h(this,"filters"),this.removeAction=g(this,"actions"),this.removeFilter=g(this,"filters"),this.hasAction=b(this,"actions"),this.hasFilter=b(this,"filters"),this.removeAllActions=g(this,"actions",!0),this.removeAllFilters=g(this,"filters",!0),this.doAction=y(this,"actions",!1,!1),this.doActionAsync=y(this,"actions",!1,!0),this.applyFilters=y(this,"filters",!0,!1),this.applyFiltersAsync=y(this,"filters",!0,!0),this.currentAction=v(this,"actions"),this.currentFilter=v(this,"filters"),this.doingAction=w(this,"actions"),this.doingFilter=w(this,"filters"),this.didAction=x(this,"actions"),this.didFilter=x(this,"filters")}}const k=new E,{addAction:B,addFilter:C,removeAction:S,removeFilter:N,hasAction:j,hasFilter:_,removeAllActions:F,removeAllFilters:P,doAction:O,doActionAsync:I,applyFilters:z,applyFiltersAsync:T,currentAction:R,currentFilter:D,doingAction:L,doingFilter:M,didAction:W,didFilter:U,actions:$,filters:H}=k,q=((e,n,t)=>{const r=new d({}),o=new Set,a=()=>{o.forEach((e=>e()))},l=(e,n="default")=>{r.data[n]={...r.data[n],...e},r.data[n][""]={...f,...r.data[n]?.[""]},delete r.pluralForms[n]},i=(e,n)=>{l(e,n),a()},s=(e="default",n,t,o,a)=>(r.data[e]||l(void 0,e),r.dcnpgettext(e,n,t,o,a)),c=(e="default")=>e,u=(e,n,r)=>{let o=s(r,n,e);return t?(o=t.applyFilters("i18n.gettext_with_context",o,e,n,r),t.applyFilters("i18n.gettext_with_context_"+c(r),o,e,n,r)):o};if(t){const e=e=>{A.test(e)&&a()};t.addAction("hookAdded","core/i18n",e),t.addAction("hookRemoved","core/i18n",e)}return{getLocaleData:(e="default")=>r.data[e],setLocaleData:i,addLocaleData:(e,n="default")=>{r.data[n]={...r.data[n],...e,"":{...f,...r.data[n]?.[""],...e?.[""]}},delete r.pluralForms[n],a()},resetLocaleData:(e,n)=>{r.data={},r.pluralForms={},i(e,n)},subscribe:e=>(o.add(e),()=>o.delete(e)),__:(e,n)=>{let r=s(n,void 0,e);return t?(r=t.applyFilters("i18n.gettext",r,e,n),t.applyFilters("i18n.gettext_"+c(n),r,e,n)):r},_x:u,_n:(e,n,r,o)=>{let a=s(o,void 0,e,n,r);return t?(a=t.applyFilters("i18n.ngettext",a,e,n,r,o),t.applyFilters("i18n.ngettext_"+c(o),a,e,n,r,o)):a},_nx:(e,n,r,o,a)=>{let l=s(a,o,e,n,r);return t?(l=t.applyFilters("i18n.ngettext_with_context",l,e,n,r,o,a),t.applyFilters("i18n.ngettext_with_context_"+c(a),l,e,n,r,o,a)):l},isRTL:()=>"rtl"===u("ltr","text direction"),hasTranslation:(e,n,o)=>{const a=n?n+""+e:e;let l=!!r.data?.[null!=o?o:"default"]?.[a];return t&&(l=t.applyFilters("i18n.has_translation",l,e,n,o),l=t.applyFilters("i18n.has_translation_"+c(o),l,e,n,o)),l}}})(0,0,k),V=(q.getLocaleData.bind(q),q.setLocaleData.bind(q),q.resetLocaleData.bind(q),q.subscribe.bind(q),q.__.bind(q)),Y=(q._x.bind(q),q._n.bind(q),q._nx.bind(q),q.isRTL.bind(q),q.hasTranslation.bind(q),e=>{const n=(e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,((e,n,t)=>t?t.toUpperCase():n.toLowerCase())))(e);return n.charAt(0).toUpperCase()+n.slice(1)}),Q=(...e)=>e.filter(((e,n,t)=>Boolean(e)&&""!==e.trim()&&t.indexOf(e)===n)).join(" ").trim(),X=e=>{for(const n in e)if(n.startsWith("aria-")||"role"===n||"title"===n)return!0};var G={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const K=(0,l.forwardRef)((({color:e="currentColor",size:n=24,strokeWidth:t=2,absoluteStrokeWidth:r,className:o="",children:a,iconNode:i,...s},c)=>(0,l.createElement)("svg",{ref:c,...G,width:n,height:n,stroke:e,strokeWidth:r?24*Number(t)/Number(n):t,className:Q("lucide",o),...!a&&!X(s)&&{"aria-hidden":"true"},...s},[...i.map((([e,n])=>(0,l.createElement)(e,n))),...Array.isArray(a)?a:[a]]))),Z=(e,n)=>{const t=(0,l.forwardRef)((({className:t,...r},o)=>{return(0,l.createElement)(K,{ref:o,iconNode:n,className:Q(`lucide-${a=Y(e),a.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${e}`,t),...r});var a}));return t.displayName=Y(e),t},J=Z("upload",[["path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",key:"ih7n3h"}],["polyline",{points:"17 8 12 3 7 8",key:"t8dd8p"}],["line",{x1:"12",x2:"12",y1:"3",y2:"15",key:"widbto"}]]),ee=Z("refresh-cw",[["path",{d:"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8",key:"v9h5vc"}],["path",{d:"M21 3v5h-5",key:"1q7to0"}],["path",{d:"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16",key:"3uifl3"}],["path",{d:"M8 16H3v5",key:"1cv678"}]]),ne=Z("trash-2",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}],["line",{x1:"10",x2:"10",y1:"11",y2:"17",key:"1uufr5"}],["line",{x1:"14",x2:"14",y1:"11",y2:"17",key:"xtxkd"}]]);function te(e,n){if("function"==typeof e)return e(n);null!=e&&(e.current=n)}function re(...e){return l.useCallback(function(...e){return n=>{let t=!1;const r=e.map((e=>{const r=te(e,n);return t||"function"!=typeof r||(t=!0),r}));if(t)return()=>{for(let n=0;n<r.length;n++){const t=r[n];"function"==typeof t?t():te(e[n],null)}}}}(...e),e)}function oe(e){const n=le(e),t=l.forwardRef(((e,t)=>{const{children:r,...o}=e,i=l.Children.toArray(r),s=i.find(se);if(s){const e=s.props.children,r=i.map((n=>n===s?l.Children.count(e)>1?l.Children.only(null):l.isValidElement(e)?e.props.children:null:n));return(0,a.jsx)(n,{...o,ref:t,children:l.isValidElement(e)?l.cloneElement(e,void 0,r):null})}return(0,a.jsx)(n,{...o,ref:t,children:r})}));return t.displayName=`${e}.Slot`,t}var ae=oe("Slot");function le(e){const n=l.forwardRef(((e,n)=>{const{children:t,...r}=e,o=re(l.isValidElement(t)?function(e){let n=Object.getOwnPropertyDescriptor(e.props,"ref")?.get,t=n&&"isReactWarning"in n&&n.isReactWarning;return t?e.ref:(n=Object.getOwnPropertyDescriptor(e,"ref")?.get,t=n&&"isReactWarning"in n&&n.isReactWarning,t?e.props.ref:e.props.ref||e.ref)}(t):void 0,n);if(l.isValidElement(t)){const e=function(e,n){const t={...n};for(const r in n){const o=e[r],a=n[r];/^on[A-Z]/.test(r)?o&&a?t[r]=(...e)=>{const n=a(...e);return o(...e),n}:o&&(t[r]=o):"style"===r?t[r]={...o,...a}:"className"===r&&(t[r]=[o,a].filter(Boolean).join(" "))}return{...e,...t}}(r,t.props);return t.type!==l.Fragment&&(e.ref=o),l.cloneElement(t,e)}return l.Children.count(t)>1?l.Children.only(null):null}));return n.displayName=`${e}.SlotClone`,n}var ie=Symbol("radix.slottable");function se(e){return l.isValidElement(e)&&"function"==typeof e.type&&"__radixId"in e.type&&e.type.__radixId===ie}var ce=o(72),ue=o.n(ce),de=o(825),fe=o.n(de),Ae=o(659),pe=o.n(Ae),me=o(56),he=o.n(me),ge=o(159),be=o.n(ge),ye=o(113),ve=o.n(ye),we=o(275),xe={};xe.styleTagTransform=ve(),xe.setAttributes=he(),xe.insert=pe().bind(null,"head"),xe.domAPI=fe(),xe.insertStyleElement=be(),ue()(we.A,xe),we.A&&we.A.locals&&we.A.locals;const Ee=({variant:e,size:n,className:t})=>{const r=["fc-button"];return e?r.push(`fc-button-${e}`):r.push("fc-button-default"),n?r.push(`fc-button-size-${n}`):r.push("fc-button-size-default"),t&&r.push(t),r.join(" ")},ke=l.forwardRef(((e,n)=>{var{className:t,variant:r,size:o,asChild:l=!1}=e,i=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["className","variant","size","asChild"]);const s=l?ae:"button";return(0,a.jsx)(s,Object.assign({className:Ee({variant:r,size:o,className:t}),ref:n},i))}));var Be=o(433),Ce={};Ce.styleTagTransform=ve(),Ce.setAttributes=he(),Ce.insert=pe().bind(null,"head"),Ce.domAPI=fe(),Ce.insertStyleElement=be(),ue()(Be.A,Ce),Be.A&&Be.A.locals&&Be.A.locals;var Se=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t};const Ne=(e,n)=>n?`${e} ${n}`:e,je=l.forwardRef(((e,n)=>{var{className:t}=e,r=Se(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Ne("fc-card",t)},r))})),_e=(l.forwardRef(((e,n)=>{var{className:t}=e,r=Se(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Ne("fc-card-header",t)},r))})),l.forwardRef(((e,n)=>{var{className:t}=e,r=Se(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Ne("fc-card-title",t)},r))})),l.forwardRef(((e,n)=>{var{className:t}=e,r=Se(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Ne("fc-card-description",t)},r))})),l.forwardRef(((e,n)=>{var{className:t}=e,r=Se(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Ne("fc-card-content",t)},r))})));function Fe(e,n,{checkForDefaultPrevented:t=!0}={}){return function(r){if(e?.(r),!1===t||!r.defaultPrevented)return n?.(r)}}function Pe(e,n=[]){let t=[];const r=()=>{const n=t.map((e=>l.createContext(e)));return function(t){const r=t?.[e]||n;return l.useMemo((()=>({[`__scope${e}`]:{...t,[e]:r}})),[t,r])}};return r.scopeName=e,[function(n,r){const o=l.createContext(r),i=t.length;t=[...t,r];const s=n=>{const{scope:t,children:r,...s}=n,c=t?.[e]?.[i]||o,u=l.useMemo((()=>s),Object.values(s));return(0,a.jsx)(c.Provider,{value:u,children:r})};return s.displayName=n+"Provider",[s,function(t,a){const s=a?.[e]?.[i]||o,c=l.useContext(s);if(c)return c;if(void 0!==r)return r;throw new Error(`\`${t}\` must be used within \`${n}\``)}]},Oe(r,...n)]}function Oe(...e){const n=e[0];if(1===e.length)return n;const t=()=>{const t=e.map((e=>({useScope:e(),scopeName:e.scopeName})));return function(e){const r=t.reduce(((n,{useScope:t,scopeName:r})=>({...n,...t(e)[`__scope${r}`]})),{});return l.useMemo((()=>({[`__scope${n.scopeName}`]:r})),[r])}};return t.scopeName=n.scopeName,t}l.forwardRef(((e,n)=>{var{className:t}=e,r=Se(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Ne("fc-card-footer",t)},r))}));var Ie=o(961),ze=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","select","span","svg","ul"].reduce(((e,n)=>{const t=oe(`Primitive.${n}`),r=l.forwardRef(((e,r)=>{const{asChild:o,...l}=e,i=o?t:n;return"undefined"!=typeof window&&(window[Symbol.for("radix-ui")]=!0),(0,a.jsx)(i,{...l,ref:r})}));return r.displayName=`Primitive.${n}`,{...e,[n]:r}}),{});function Te(e){const n=l.useRef(e);return l.useEffect((()=>{n.current=e})),l.useMemo((()=>(...e)=>n.current?.(...e)),[])}var Re,De="dismissableLayer.update",Le=l.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),Me=l.forwardRef(((e,n)=>{const{disableOutsidePointerEvents:t=!1,onEscapeKeyDown:r,onPointerDownOutside:o,onFocusOutside:i,onInteractOutside:s,onDismiss:c,...u}=e,d=l.useContext(Le),[f,A]=l.useState(null),p=f?.ownerDocument??globalThis?.document,[,m]=l.useState({}),h=re(n,(e=>A(e))),g=Array.from(d.layers),[b]=[...d.layersWithOutsidePointerEventsDisabled].slice(-1),y=g.indexOf(b),v=f?g.indexOf(f):-1,w=d.layersWithOutsidePointerEventsDisabled.size>0,x=v>=y,E=function(e,n=globalThis?.document){const t=Te(e),r=l.useRef(!1),o=l.useRef((()=>{}));return l.useEffect((()=>{const e=e=>{if(e.target&&!r.current){let r=function(){Ue("dismissableLayer.pointerDownOutside",t,a,{discrete:!0})};const a={originalEvent:e};"touch"===e.pointerType?(n.removeEventListener("click",o.current),o.current=r,n.addEventListener("click",o.current,{once:!0})):r()}else n.removeEventListener("click",o.current);r.current=!1},a=window.setTimeout((()=>{n.addEventListener("pointerdown",e)}),0);return()=>{window.clearTimeout(a),n.removeEventListener("pointerdown",e),n.removeEventListener("click",o.current)}}),[n,t]),{onPointerDownCapture:()=>r.current=!0}}((e=>{const n=e.target,t=[...d.branches].some((e=>e.contains(n)));x&&!t&&(o?.(e),s?.(e),e.defaultPrevented||c?.())}),p),k=function(e,n=globalThis?.document){const t=Te(e),r=l.useRef(!1);return l.useEffect((()=>{const e=e=>{e.target&&!r.current&&Ue("dismissableLayer.focusOutside",t,{originalEvent:e},{discrete:!1})};return n.addEventListener("focusin",e),()=>n.removeEventListener("focusin",e)}),[n,t]),{onFocusCapture:()=>r.current=!0,onBlurCapture:()=>r.current=!1}}((e=>{const n=e.target;[...d.branches].some((e=>e.contains(n)))||(i?.(e),s?.(e),e.defaultPrevented||c?.())}),p);return function(e,n=globalThis?.document){const t=Te(e);l.useEffect((()=>{const e=e=>{"Escape"===e.key&&t(e)};return n.addEventListener("keydown",e,{capture:!0}),()=>n.removeEventListener("keydown",e,{capture:!0})}),[t,n])}((e=>{v===d.layers.size-1&&(r?.(e),!e.defaultPrevented&&c&&(e.preventDefault(),c()))}),p),l.useEffect((()=>{if(f)return t&&(0===d.layersWithOutsidePointerEventsDisabled.size&&(Re=p.body.style.pointerEvents,p.body.style.pointerEvents="none"),d.layersWithOutsidePointerEventsDisabled.add(f)),d.layers.add(f),We(),()=>{t&&1===d.layersWithOutsidePointerEventsDisabled.size&&(p.body.style.pointerEvents=Re)}}),[f,p,t,d]),l.useEffect((()=>()=>{f&&(d.layers.delete(f),d.layersWithOutsidePointerEventsDisabled.delete(f),We())}),[f,d]),l.useEffect((()=>{const e=()=>m({});return document.addEventListener(De,e),()=>document.removeEventListener(De,e)}),[]),(0,a.jsx)(ze.div,{...u,ref:h,style:{pointerEvents:w?x?"auto":"none":void 0,...e.style},onFocusCapture:Fe(e.onFocusCapture,k.onFocusCapture),onBlurCapture:Fe(e.onBlurCapture,k.onBlurCapture),onPointerDownCapture:Fe(e.onPointerDownCapture,E.onPointerDownCapture)})}));function We(){const e=new CustomEvent(De);document.dispatchEvent(e)}function Ue(e,n,t,{discrete:r}){const o=t.originalEvent.target,a=new CustomEvent(e,{bubbles:!1,cancelable:!0,detail:t});n&&o.addEventListener(e,n,{once:!0}),r?function(e,n){e&&Ie.flushSync((()=>e.dispatchEvent(n)))}(o,a):o.dispatchEvent(a)}Me.displayName="DismissableLayer",l.forwardRef(((e,n)=>{const t=l.useContext(Le),r=l.useRef(null),o=re(n,r);return l.useEffect((()=>{const e=r.current;if(e)return t.branches.add(e),()=>{t.branches.delete(e)}}),[t.branches]),(0,a.jsx)(ze.div,{...e,ref:o})})).displayName="DismissableLayerBranch";var $e=globalThis?.document?l.useLayoutEffect:()=>{},He=i[" useId ".trim().toString()]||(()=>{}),qe=0;function Ve(e){const[n,t]=l.useState(He());return $e((()=>{e||t((e=>e??String(qe++)))}),[e]),e||(n?`radix-${n}`:"")}const Ye=["top","right","bottom","left"],Qe=Math.min,Xe=Math.max,Ge=Math.round,Ke=Math.floor,Ze=e=>({x:e,y:e}),Je={left:"right",right:"left",bottom:"top",top:"bottom"},en={start:"end",end:"start"};function nn(e,n,t){return Xe(e,Qe(n,t))}function tn(e,n){return"function"==typeof e?e(n):e}function rn(e){return e.split("-")[0]}function on(e){return e.split("-")[1]}function an(e){return"x"===e?"y":"x"}function ln(e){return"y"===e?"height":"width"}function sn(e){return["top","bottom"].includes(rn(e))?"y":"x"}function cn(e){return an(sn(e))}function un(e){return e.replace(/start|end/g,(e=>en[e]))}function dn(e){return e.replace(/left|right|bottom|top/g,(e=>Je[e]))}function fn(e){return"number"!=typeof e?function(e){return{top:0,right:0,bottom:0,left:0,...e}}(e):{top:e,right:e,bottom:e,left:e}}function An(e){const{x:n,y:t,width:r,height:o}=e;return{width:r,height:o,top:t,left:n,right:n+r,bottom:t+o,x:n,y:t}}function pn(e,n,t){let{reference:r,floating:o}=e;const a=sn(n),l=cn(n),i=ln(l),s=rn(n),c="y"===a,u=r.x+r.width/2-o.width/2,d=r.y+r.height/2-o.height/2,f=r[i]/2-o[i]/2;let A;switch(s){case"top":A={x:u,y:r.y-o.height};break;case"bottom":A={x:u,y:r.y+r.height};break;case"right":A={x:r.x+r.width,y:d};break;case"left":A={x:r.x-o.width,y:d};break;default:A={x:r.x,y:r.y}}switch(on(n)){case"start":A[l]-=f*(t&&c?-1:1);break;case"end":A[l]+=f*(t&&c?-1:1)}return A}async function mn(e,n){var t;void 0===n&&(n={});const{x:r,y:o,platform:a,rects:l,elements:i,strategy:s}=e,{boundary:c="clippingAncestors",rootBoundary:u="viewport",elementContext:d="floating",altBoundary:f=!1,padding:A=0}=tn(n,e),p=fn(A),m=i[f?"floating"===d?"reference":"floating":d],h=An(await a.getClippingRect({element:null==(t=await(null==a.isElement?void 0:a.isElement(m)))||t?m:m.contextElement||await(null==a.getDocumentElement?void 0:a.getDocumentElement(i.floating)),boundary:c,rootBoundary:u,strategy:s})),g="floating"===d?{x:r,y:o,width:l.floating.width,height:l.floating.height}:l.reference,b=await(null==a.getOffsetParent?void 0:a.getOffsetParent(i.floating)),y=await(null==a.isElement?void 0:a.isElement(b))&&await(null==a.getScale?void 0:a.getScale(b))||{x:1,y:1},v=An(a.convertOffsetParentRelativeRectToViewportRelativeRect?await a.convertOffsetParentRelativeRectToViewportRelativeRect({elements:i,rect:g,offsetParent:b,strategy:s}):g);return{top:(h.top-v.top+p.top)/y.y,bottom:(v.bottom-h.bottom+p.bottom)/y.y,left:(h.left-v.left+p.left)/y.x,right:(v.right-h.right+p.right)/y.x}}function hn(e,n){return{top:e.top-n.height,right:e.right-n.width,bottom:e.bottom-n.height,left:e.left-n.width}}function gn(e){return Ye.some((n=>e[n]>=0))}function bn(){return"undefined"!=typeof window}function yn(e){return xn(e)?(e.nodeName||"").toLowerCase():"#document"}function vn(e){var n;return(null==e||null==(n=e.ownerDocument)?void 0:n.defaultView)||window}function wn(e){var n;return null==(n=(xn(e)?e.ownerDocument:e.document)||window.document)?void 0:n.documentElement}function xn(e){return!!bn()&&(e instanceof Node||e instanceof vn(e).Node)}function En(e){return!!bn()&&(e instanceof Element||e instanceof vn(e).Element)}function kn(e){return!!bn()&&(e instanceof HTMLElement||e instanceof vn(e).HTMLElement)}function Bn(e){return!(!bn()||"undefined"==typeof ShadowRoot)&&(e instanceof ShadowRoot||e instanceof vn(e).ShadowRoot)}function Cn(e){const{overflow:n,overflowX:t,overflowY:r,display:o}=Pn(e);return/auto|scroll|overlay|hidden|clip/.test(n+r+t)&&!["inline","contents"].includes(o)}function Sn(e){return["table","td","th"].includes(yn(e))}function Nn(e){return[":popover-open",":modal"].some((n=>{try{return e.matches(n)}catch(e){return!1}}))}function jn(e){const n=_n(),t=En(e)?Pn(e):e;return["transform","translate","scale","rotate","perspective"].some((e=>!!t[e]&&"none"!==t[e]))||!!t.containerType&&"normal"!==t.containerType||!n&&!!t.backdropFilter&&"none"!==t.backdropFilter||!n&&!!t.filter&&"none"!==t.filter||["transform","translate","scale","rotate","perspective","filter"].some((e=>(t.willChange||"").includes(e)))||["paint","layout","strict","content"].some((e=>(t.contain||"").includes(e)))}function _n(){return!("undefined"==typeof CSS||!CSS.supports)&&CSS.supports("-webkit-backdrop-filter","none")}function Fn(e){return["html","body","#document"].includes(yn(e))}function Pn(e){return vn(e).getComputedStyle(e)}function On(e){return En(e)?{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}:{scrollLeft:e.scrollX,scrollTop:e.scrollY}}function In(e){if("html"===yn(e))return e;const n=e.assignedSlot||e.parentNode||Bn(e)&&e.host||wn(e);return Bn(n)?n.host:n}function zn(e){const n=In(e);return Fn(n)?e.ownerDocument?e.ownerDocument.body:e.body:kn(n)&&Cn(n)?n:zn(n)}function Tn(e,n,t){var r;void 0===n&&(n=[]),void 0===t&&(t=!0);const o=zn(e),a=o===(null==(r=e.ownerDocument)?void 0:r.body),l=vn(o);if(a){const e=Rn(l);return n.concat(l,l.visualViewport||[],Cn(o)?o:[],e&&t?Tn(e):[])}return n.concat(o,Tn(o,[],t))}function Rn(e){return e.parent&&Object.getPrototypeOf(e.parent)?e.frameElement:null}function Dn(e){const n=Pn(e);let t=parseFloat(n.width)||0,r=parseFloat(n.height)||0;const o=kn(e),a=o?e.offsetWidth:t,l=o?e.offsetHeight:r,i=Ge(t)!==a||Ge(r)!==l;return i&&(t=a,r=l),{width:t,height:r,$:i}}function Ln(e){return En(e)?e:e.contextElement}function Mn(e){const n=Ln(e);if(!kn(n))return Ze(1);const t=n.getBoundingClientRect(),{width:r,height:o,$:a}=Dn(n);let l=(a?Ge(t.width):t.width)/r,i=(a?Ge(t.height):t.height)/o;return l&&Number.isFinite(l)||(l=1),i&&Number.isFinite(i)||(i=1),{x:l,y:i}}const Wn=Ze(0);function Un(e){const n=vn(e);return _n()&&n.visualViewport?{x:n.visualViewport.offsetLeft,y:n.visualViewport.offsetTop}:Wn}function $n(e,n,t,r){void 0===n&&(n=!1),void 0===t&&(t=!1);const o=e.getBoundingClientRect(),a=Ln(e);let l=Ze(1);n&&(r?En(r)&&(l=Mn(r)):l=Mn(e));const i=function(e,n,t){return void 0===n&&(n=!1),!(!t||n&&t!==vn(e))&&n}(a,t,r)?Un(a):Ze(0);let s=(o.left+i.x)/l.x,c=(o.top+i.y)/l.y,u=o.width/l.x,d=o.height/l.y;if(a){const e=vn(a),n=r&&En(r)?vn(r):r;let t=e,o=Rn(t);for(;o&&r&&n!==t;){const e=Mn(o),n=o.getBoundingClientRect(),r=Pn(o),a=n.left+(o.clientLeft+parseFloat(r.paddingLeft))*e.x,l=n.top+(o.clientTop+parseFloat(r.paddingTop))*e.y;s*=e.x,c*=e.y,u*=e.x,d*=e.y,s+=a,c+=l,t=vn(o),o=Rn(t)}}return An({width:u,height:d,x:s,y:c})}function Hn(e,n){const t=On(e).scrollLeft;return n?n.left+t:$n(wn(e)).left+t}function qn(e,n,t){void 0===t&&(t=!1);const r=e.getBoundingClientRect();return{x:r.left+n.scrollLeft-(t?0:Hn(e,r)),y:r.top+n.scrollTop}}function Vn(e,n,t){let r;if("viewport"===n)r=function(e,n){const t=vn(e),r=wn(e),o=t.visualViewport;let a=r.clientWidth,l=r.clientHeight,i=0,s=0;if(o){a=o.width,l=o.height;const e=_n();(!e||e&&"fixed"===n)&&(i=o.offsetLeft,s=o.offsetTop)}return{width:a,height:l,x:i,y:s}}(e,t);else if("document"===n)r=function(e){const n=wn(e),t=On(e),r=e.ownerDocument.body,o=Xe(n.scrollWidth,n.clientWidth,r.scrollWidth,r.clientWidth),a=Xe(n.scrollHeight,n.clientHeight,r.scrollHeight,r.clientHeight);let l=-t.scrollLeft+Hn(e);const i=-t.scrollTop;return"rtl"===Pn(r).direction&&(l+=Xe(n.clientWidth,r.clientWidth)-o),{width:o,height:a,x:l,y:i}}(wn(e));else if(En(n))r=function(e,n){const t=$n(e,!0,"fixed"===n),r=t.top+e.clientTop,o=t.left+e.clientLeft,a=kn(e)?Mn(e):Ze(1);return{width:e.clientWidth*a.x,height:e.clientHeight*a.y,x:o*a.x,y:r*a.y}}(n,t);else{const t=Un(e);r={x:n.x-t.x,y:n.y-t.y,width:n.width,height:n.height}}return An(r)}function Yn(e,n){const t=In(e);return!(t===n||!En(t)||Fn(t))&&("fixed"===Pn(t).position||Yn(t,n))}function Qn(e,n,t){const r=kn(n),o=wn(n),a="fixed"===t,l=$n(e,!0,a,n);let i={scrollLeft:0,scrollTop:0};const s=Ze(0);if(r||!r&&!a)if(("body"!==yn(n)||Cn(o))&&(i=On(n)),r){const e=$n(n,!0,a,n);s.x=e.x+n.clientLeft,s.y=e.y+n.clientTop}else o&&(s.x=Hn(o));const c=!o||r||a?Ze(0):qn(o,i);return{x:l.left+i.scrollLeft-s.x-c.x,y:l.top+i.scrollTop-s.y-c.y,width:l.width,height:l.height}}function Xn(e){return"static"===Pn(e).position}function Gn(e,n){if(!kn(e)||"fixed"===Pn(e).position)return null;if(n)return n(e);let t=e.offsetParent;return wn(e)===t&&(t=t.ownerDocument.body),t}function Kn(e,n){const t=vn(e);if(Nn(e))return t;if(!kn(e)){let n=In(e);for(;n&&!Fn(n);){if(En(n)&&!Xn(n))return n;n=In(n)}return t}let r=Gn(e,n);for(;r&&Sn(r)&&Xn(r);)r=Gn(r,n);return r&&Fn(r)&&Xn(r)&&!jn(r)?t:r||function(e){let n=In(e);for(;kn(n)&&!Fn(n);){if(jn(n))return n;if(Nn(n))return null;n=In(n)}return null}(e)||t}const Zn={convertOffsetParentRelativeRectToViewportRelativeRect:function(e){let{elements:n,rect:t,offsetParent:r,strategy:o}=e;const a="fixed"===o,l=wn(r),i=!!n&&Nn(n.floating);if(r===l||i&&a)return t;let s={scrollLeft:0,scrollTop:0},c=Ze(1);const u=Ze(0),d=kn(r);if((d||!d&&!a)&&(("body"!==yn(r)||Cn(l))&&(s=On(r)),kn(r))){const e=$n(r);c=Mn(r),u.x=e.x+r.clientLeft,u.y=e.y+r.clientTop}const f=!l||d||a?Ze(0):qn(l,s,!0);return{width:t.width*c.x,height:t.height*c.y,x:t.x*c.x-s.scrollLeft*c.x+u.x+f.x,y:t.y*c.y-s.scrollTop*c.y+u.y+f.y}},getDocumentElement:wn,getClippingRect:function(e){let{element:n,boundary:t,rootBoundary:r,strategy:o}=e;const a=[..."clippingAncestors"===t?Nn(n)?[]:function(e,n){const t=n.get(e);if(t)return t;let r=Tn(e,[],!1).filter((e=>En(e)&&"body"!==yn(e))),o=null;const a="fixed"===Pn(e).position;let l=a?In(e):e;for(;En(l)&&!Fn(l);){const n=Pn(l),t=jn(l);t||"fixed"!==n.position||(o=null),(a?!t&&!o:!t&&"static"===n.position&&o&&["absolute","fixed"].includes(o.position)||Cn(l)&&!t&&Yn(e,l))?r=r.filter((e=>e!==l)):o=n,l=In(l)}return n.set(e,r),r}(n,this._c):[].concat(t),r],l=a[0],i=a.reduce(((e,t)=>{const r=Vn(n,t,o);return e.top=Xe(r.top,e.top),e.right=Qe(r.right,e.right),e.bottom=Qe(r.bottom,e.bottom),e.left=Xe(r.left,e.left),e}),Vn(n,l,o));return{width:i.right-i.left,height:i.bottom-i.top,x:i.left,y:i.top}},getOffsetParent:Kn,getElementRects:async function(e){const n=this.getOffsetParent||Kn,t=this.getDimensions,r=await t(e.floating);return{reference:Qn(e.reference,await n(e.floating),e.strategy),floating:{x:0,y:0,width:r.width,height:r.height}}},getClientRects:function(e){return Array.from(e.getClientRects())},getDimensions:function(e){const{width:n,height:t}=Dn(e);return{width:n,height:t}},getScale:Mn,isElement:En,isRTL:function(e){return"rtl"===Pn(e).direction}};function Jn(e,n){return e.x===n.x&&e.y===n.y&&e.width===n.width&&e.height===n.height}const et=function(e){return void 0===e&&(e=0),{name:"offset",options:e,async fn(n){var t,r;const{x:o,y:a,placement:l,middlewareData:i}=n,s=await async function(e,n){const{placement:t,platform:r,elements:o}=e,a=await(null==r.isRTL?void 0:r.isRTL(o.floating)),l=rn(t),i=on(t),s="y"===sn(t),c=["left","top"].includes(l)?-1:1,u=a&&s?-1:1,d=tn(n,e);let{mainAxis:f,crossAxis:A,alignmentAxis:p}="number"==typeof d?{mainAxis:d,crossAxis:0,alignmentAxis:null}:{mainAxis:d.mainAxis||0,crossAxis:d.crossAxis||0,alignmentAxis:d.alignmentAxis};return i&&"number"==typeof p&&(A="end"===i?-1*p:p),s?{x:A*u,y:f*c}:{x:f*c,y:A*u}}(n,e);return l===(null==(t=i.offset)?void 0:t.placement)&&null!=(r=i.arrow)&&r.alignmentOffset?{}:{x:o+s.x,y:a+s.y,data:{...s,placement:l}}}}},nt=function(e){return void 0===e&&(e={}),{name:"shift",options:e,async fn(n){const{x:t,y:r,placement:o}=n,{mainAxis:a=!0,crossAxis:l=!1,limiter:i={fn:e=>{let{x:n,y:t}=e;return{x:n,y:t}}},...s}=tn(e,n),c={x:t,y:r},u=await mn(n,s),d=sn(rn(o)),f=an(d);let A=c[f],p=c[d];if(a){const e="y"===f?"bottom":"right";A=nn(A+u["y"===f?"top":"left"],A,A-u[e])}if(l){const e="y"===d?"bottom":"right";p=nn(p+u["y"===d?"top":"left"],p,p-u[e])}const m=i.fn({...n,[f]:A,[d]:p});return{...m,data:{x:m.x-t,y:m.y-r,enabled:{[f]:a,[d]:l}}}}}},tt=function(e){return void 0===e&&(e={}),{name:"flip",options:e,async fn(n){var t,r;const{placement:o,middlewareData:a,rects:l,initialPlacement:i,platform:s,elements:c}=n,{mainAxis:u=!0,crossAxis:d=!0,fallbackPlacements:f,fallbackStrategy:A="bestFit",fallbackAxisSideDirection:p="none",flipAlignment:m=!0,...h}=tn(e,n);if(null!=(t=a.arrow)&&t.alignmentOffset)return{};const g=rn(o),b=sn(i),y=rn(i)===i,v=await(null==s.isRTL?void 0:s.isRTL(c.floating)),w=f||(y||!m?[dn(i)]:function(e){const n=dn(e);return[un(e),n,un(n)]}(i)),x="none"!==p;!f&&x&&w.push(...function(e,n,t,r){const o=on(e);let a=function(e,n,t){const r=["left","right"],o=["right","left"],a=["top","bottom"],l=["bottom","top"];switch(e){case"top":case"bottom":return t?n?o:r:n?r:o;case"left":case"right":return n?a:l;default:return[]}}(rn(e),"start"===t,r);return o&&(a=a.map((e=>e+"-"+o)),n&&(a=a.concat(a.map(un)))),a}(i,m,p,v));const E=[i,...w],k=await mn(n,h),B=[];let C=(null==(r=a.flip)?void 0:r.overflows)||[];if(u&&B.push(k[g]),d){const e=function(e,n,t){void 0===t&&(t=!1);const r=on(e),o=cn(e),a=ln(o);let l="x"===o?r===(t?"end":"start")?"right":"left":"start"===r?"bottom":"top";return n.reference[a]>n.floating[a]&&(l=dn(l)),[l,dn(l)]}(o,l,v);B.push(k[e[0]],k[e[1]])}if(C=[...C,{placement:o,overflows:B}],!B.every((e=>e<=0))){var S,N;const e=((null==(S=a.flip)?void 0:S.index)||0)+1,n=E[e];if(n)return{data:{index:e,overflows:C},reset:{placement:n}};let t=null==(N=C.filter((e=>e.overflows[0]<=0)).sort(((e,n)=>e.overflows[1]-n.overflows[1]))[0])?void 0:N.placement;if(!t)switch(A){case"bestFit":{var j;const e=null==(j=C.filter((e=>{if(x){const n=sn(e.placement);return n===b||"y"===n}return!0})).map((e=>[e.placement,e.overflows.filter((e=>e>0)).reduce(((e,n)=>e+n),0)])).sort(((e,n)=>e[1]-n[1]))[0])?void 0:j[0];e&&(t=e);break}case"initialPlacement":t=i}if(o!==t)return{reset:{placement:t}}}return{}}}},rt=function(e){return void 0===e&&(e={}),{name:"size",options:e,async fn(n){var t,r;const{placement:o,rects:a,platform:l,elements:i}=n,{apply:s=()=>{},...c}=tn(e,n),u=await mn(n,c),d=rn(o),f=on(o),A="y"===sn(o),{width:p,height:m}=a.floating;let h,g;"top"===d||"bottom"===d?(h=d,g=f===(await(null==l.isRTL?void 0:l.isRTL(i.floating))?"start":"end")?"left":"right"):(g=d,h="end"===f?"top":"bottom");const b=m-u.top-u.bottom,y=p-u.left-u.right,v=Qe(m-u[h],b),w=Qe(p-u[g],y),x=!n.middlewareData.shift;let E=v,k=w;if(null!=(t=n.middlewareData.shift)&&t.enabled.x&&(k=y),null!=(r=n.middlewareData.shift)&&r.enabled.y&&(E=b),x&&!f){const e=Xe(u.left,0),n=Xe(u.right,0),t=Xe(u.top,0),r=Xe(u.bottom,0);A?k=p-2*(0!==e||0!==n?e+n:Xe(u.left,u.right)):E=m-2*(0!==t||0!==r?t+r:Xe(u.top,u.bottom))}await s({...n,availableWidth:k,availableHeight:E});const B=await l.getDimensions(i.floating);return p!==B.width||m!==B.height?{reset:{rects:!0}}:{}}}},ot=function(e){return void 0===e&&(e={}),{name:"hide",options:e,async fn(n){const{rects:t}=n,{strategy:r="referenceHidden",...o}=tn(e,n);switch(r){case"referenceHidden":{const e=hn(await mn(n,{...o,elementContext:"reference"}),t.reference);return{data:{referenceHiddenOffsets:e,referenceHidden:gn(e)}}}case"escaped":{const e=hn(await mn(n,{...o,altBoundary:!0}),t.floating);return{data:{escapedOffsets:e,escaped:gn(e)}}}default:return{}}}}},at=e=>({name:"arrow",options:e,async fn(n){const{x:t,y:r,placement:o,rects:a,platform:l,elements:i,middlewareData:s}=n,{element:c,padding:u=0}=tn(e,n)||{};if(null==c)return{};const d=fn(u),f={x:t,y:r},A=cn(o),p=ln(A),m=await l.getDimensions(c),h="y"===A,g=h?"top":"left",b=h?"bottom":"right",y=h?"clientHeight":"clientWidth",v=a.reference[p]+a.reference[A]-f[A]-a.floating[p],w=f[A]-a.reference[A],x=await(null==l.getOffsetParent?void 0:l.getOffsetParent(c));let E=x?x[y]:0;E&&await(null==l.isElement?void 0:l.isElement(x))||(E=i.floating[y]||a.floating[p]);const k=v/2-w/2,B=E/2-m[p]/2-1,C=Qe(d[g],B),S=Qe(d[b],B),N=C,j=E-m[p]-S,_=E/2-m[p]/2+k,F=nn(N,_,j),P=!s.arrow&&null!=on(o)&&_!==F&&a.reference[p]/2-(_<N?C:S)-m[p]/2<0,O=P?_<N?_-N:_-j:0;return{[A]:f[A]+O,data:{[A]:F,centerOffset:_-F-O,...P&&{alignmentOffset:O}},reset:P}}}),lt=function(e){return void 0===e&&(e={}),{options:e,fn(n){const{x:t,y:r,placement:o,rects:a,middlewareData:l}=n,{offset:i=0,mainAxis:s=!0,crossAxis:c=!0}=tn(e,n),u={x:t,y:r},d=sn(o),f=an(d);let A=u[f],p=u[d];const m=tn(i,n),h="number"==typeof m?{mainAxis:m,crossAxis:0}:{mainAxis:0,crossAxis:0,...m};if(s){const e="y"===f?"height":"width",n=a.reference[f]-a.floating[e]+h.mainAxis,t=a.reference[f]+a.reference[e]-h.mainAxis;A<n?A=n:A>t&&(A=t)}if(c){var g,b;const e="y"===f?"width":"height",n=["top","left"].includes(rn(o)),t=a.reference[d]-a.floating[e]+(n&&(null==(g=l.offset)?void 0:g[d])||0)+(n?0:h.crossAxis),r=a.reference[d]+a.reference[e]+(n?0:(null==(b=l.offset)?void 0:b[d])||0)-(n?h.crossAxis:0);p<t?p=t:p>r&&(p=r)}return{[f]:A,[d]:p}}}},it=(e,n,t)=>{const r=new Map,o={platform:Zn,...t},a={...o.platform,_c:r};return(async(e,n,t)=>{const{placement:r="bottom",strategy:o="absolute",middleware:a=[],platform:l}=t,i=a.filter(Boolean),s=await(null==l.isRTL?void 0:l.isRTL(n));let c=await l.getElementRects({reference:e,floating:n,strategy:o}),{x:u,y:d}=pn(c,r,s),f=r,A={},p=0;for(let t=0;t<i.length;t++){const{name:a,fn:m}=i[t],{x:h,y:g,data:b,reset:y}=await m({x:u,y:d,initialPlacement:r,placement:f,strategy:o,middlewareData:A,rects:c,platform:l,elements:{reference:e,floating:n}});u=null!=h?h:u,d=null!=g?g:d,A={...A,[a]:{...A[a],...b}},y&&p<=50&&(p++,"object"==typeof y&&(y.placement&&(f=y.placement),y.rects&&(c=!0===y.rects?await l.getElementRects({reference:e,floating:n,strategy:o}):y.rects),({x:u,y:d}=pn(c,f,s))),t=-1)}return{x:u,y:d,placement:f,strategy:o,middlewareData:A}})(e,n,{...o,platform:a})};var st="undefined"!=typeof document?l.useLayoutEffect:l.useEffect;function ct(e,n){if(e===n)return!0;if(typeof e!=typeof n)return!1;if("function"==typeof e&&e.toString()===n.toString())return!0;let t,r,o;if(e&&n&&"object"==typeof e){if(Array.isArray(e)){if(t=e.length,t!==n.length)return!1;for(r=t;0!=r--;)if(!ct(e[r],n[r]))return!1;return!0}if(o=Object.keys(e),t=o.length,t!==Object.keys(n).length)return!1;for(r=t;0!=r--;)if(!{}.hasOwnProperty.call(n,o[r]))return!1;for(r=t;0!=r--;){const t=o[r];if(!("_owner"===t&&e.$$typeof||ct(e[t],n[t])))return!1}return!0}return e!=e&&n!=n}function ut(e){return"undefined"==typeof window?1:(e.ownerDocument.defaultView||window).devicePixelRatio||1}function dt(e,n){const t=ut(e);return Math.round(n*t)/t}function ft(e){const n=l.useRef(e);return st((()=>{n.current=e})),n}const At=e=>({name:"arrow",options:e,fn(n){const{element:t,padding:r}="function"==typeof e?e(n):e;return t&&(o=t,{}.hasOwnProperty.call(o,"current"))?null!=t.current?at({element:t.current,padding:r}).fn(n):{}:t?at({element:t,padding:r}).fn(n):{};var o}}),pt=(e,n)=>({...et(e),options:[e,n]}),mt=(e,n)=>({...nt(e),options:[e,n]}),ht=(e,n)=>({...lt(e),options:[e,n]}),gt=(e,n)=>({...tt(e),options:[e,n]}),bt=(e,n)=>({...rt(e),options:[e,n]}),yt=(e,n)=>({...ot(e),options:[e,n]}),vt=(e,n)=>({...At(e),options:[e,n]});var wt=l.forwardRef(((e,n)=>{const{children:t,width:r=10,height:o=5,...l}=e;return(0,a.jsx)(ze.svg,{...l,ref:n,width:r,height:o,viewBox:"0 0 30 10",preserveAspectRatio:"none",children:e.asChild?t:(0,a.jsx)("polygon",{points:"0,0 30,0 15,10"})})}));wt.displayName="Arrow";var xt=wt;function Et(e){const[n,t]=l.useState(void 0);return $e((()=>{if(e){t({width:e.offsetWidth,height:e.offsetHeight});const n=new ResizeObserver((n=>{if(!Array.isArray(n))return;if(!n.length)return;const r=n[0];let o,a;if("borderBoxSize"in r){const e=r.borderBoxSize,n=Array.isArray(e)?e[0]:e;o=n.inlineSize,a=n.blockSize}else o=e.offsetWidth,a=e.offsetHeight;t({width:o,height:a})}));return n.observe(e,{box:"border-box"}),()=>n.unobserve(e)}t(void 0)}),[e]),n}var kt="Popper",[Bt,Ct]=Pe(kt),[St,Nt]=Bt(kt),jt=e=>{const{__scopePopper:n,children:t}=e,[r,o]=l.useState(null);return(0,a.jsx)(St,{scope:n,anchor:r,onAnchorChange:o,children:t})};jt.displayName=kt;var _t="PopperAnchor",Ft=l.forwardRef(((e,n)=>{const{__scopePopper:t,virtualRef:r,...o}=e,i=Nt(_t,t),s=l.useRef(null),c=re(n,s);return l.useEffect((()=>{i.onAnchorChange(r?.current||s.current)})),r?null:(0,a.jsx)(ze.div,{...o,ref:c})}));Ft.displayName=_t;var Pt="PopperContent",[Ot,It]=Bt(Pt),zt=l.forwardRef(((e,n)=>{const{__scopePopper:t,side:r="bottom",sideOffset:o=0,align:i="center",alignOffset:s=0,arrowPadding:c=0,avoidCollisions:u=!0,collisionBoundary:d=[],collisionPadding:f=0,sticky:A="partial",hideWhenDetached:p=!1,updatePositionStrategy:m="optimized",onPlaced:h,...g}=e,b=Nt(Pt,t),[y,v]=l.useState(null),w=re(n,(e=>v(e))),[x,E]=l.useState(null),k=Et(x),B=k?.width??0,C=k?.height??0,S=r+("center"!==i?"-"+i:""),N="number"==typeof f?f:{top:0,right:0,bottom:0,left:0,...f},j=Array.isArray(d)?d:[d],_=j.length>0,F={padding:N,boundary:j.filter(Lt),altBoundary:_},{refs:P,floatingStyles:O,placement:I,isPositioned:z,middlewareData:T}=function(e){void 0===e&&(e={});const{placement:n="bottom",strategy:t="absolute",middleware:r=[],platform:o,elements:{reference:a,floating:i}={},transform:s=!0,whileElementsMounted:c,open:u}=e,[d,f]=l.useState({x:0,y:0,strategy:t,placement:n,middlewareData:{},isPositioned:!1}),[A,p]=l.useState(r);ct(A,r)||p(r);const[m,h]=l.useState(null),[g,b]=l.useState(null),y=l.useCallback((e=>{e!==E.current&&(E.current=e,h(e))}),[]),v=l.useCallback((e=>{e!==k.current&&(k.current=e,b(e))}),[]),w=a||m,x=i||g,E=l.useRef(null),k=l.useRef(null),B=l.useRef(d),C=null!=c,S=ft(c),N=ft(o),j=ft(u),_=l.useCallback((()=>{if(!E.current||!k.current)return;const e={placement:n,strategy:t,middleware:A};N.current&&(e.platform=N.current),it(E.current,k.current,e).then((e=>{const n={...e,isPositioned:!1!==j.current};F.current&&!ct(B.current,n)&&(B.current=n,Ie.flushSync((()=>{f(n)})))}))}),[A,n,t,N,j]);st((()=>{!1===u&&B.current.isPositioned&&(B.current.isPositioned=!1,f((e=>({...e,isPositioned:!1}))))}),[u]);const F=l.useRef(!1);st((()=>(F.current=!0,()=>{F.current=!1})),[]),st((()=>{if(w&&(E.current=w),x&&(k.current=x),w&&x){if(S.current)return S.current(w,x,_);_()}}),[w,x,_,S,C]);const P=l.useMemo((()=>({reference:E,floating:k,setReference:y,setFloating:v})),[y,v]),O=l.useMemo((()=>({reference:w,floating:x})),[w,x]),I=l.useMemo((()=>{const e={position:t,left:0,top:0};if(!O.floating)return e;const n=dt(O.floating,d.x),r=dt(O.floating,d.y);return s?{...e,transform:"translate("+n+"px, "+r+"px)",...ut(O.floating)>=1.5&&{willChange:"transform"}}:{position:t,left:n,top:r}}),[t,s,O.floating,d.x,d.y]);return l.useMemo((()=>({...d,update:_,refs:P,elements:O,floatingStyles:I})),[d,_,P,O,I])}({strategy:"fixed",placement:S,whileElementsMounted:(...e)=>function(e,n,t,r){void 0===r&&(r={});const{ancestorScroll:o=!0,ancestorResize:a=!0,elementResize:l="function"==typeof ResizeObserver,layoutShift:i="function"==typeof IntersectionObserver,animationFrame:s=!1}=r,c=Ln(e),u=o||a?[...c?Tn(c):[],...Tn(n)]:[];u.forEach((e=>{o&&e.addEventListener("scroll",t,{passive:!0}),a&&e.addEventListener("resize",t)}));const d=c&&i?function(e,n){let t,r=null;const o=wn(e);function a(){var e;clearTimeout(t),null==(e=r)||e.disconnect(),r=null}return function l(i,s){void 0===i&&(i=!1),void 0===s&&(s=1),a();const c=e.getBoundingClientRect(),{left:u,top:d,width:f,height:A}=c;if(i||n(),!f||!A)return;const p={rootMargin:-Ke(d)+"px "+-Ke(o.clientWidth-(u+f))+"px "+-Ke(o.clientHeight-(d+A))+"px "+-Ke(u)+"px",threshold:Xe(0,Qe(1,s))||1};let m=!0;function h(n){const r=n[0].intersectionRatio;if(r!==s){if(!m)return l();r?l(!1,r):t=setTimeout((()=>{l(!1,1e-7)}),1e3)}1!==r||Jn(c,e.getBoundingClientRect())||l(),m=!1}try{r=new IntersectionObserver(h,{...p,root:o.ownerDocument})}catch(e){r=new IntersectionObserver(h,p)}r.observe(e)}(!0),a}(c,t):null;let f,A=-1,p=null;l&&(p=new ResizeObserver((e=>{let[r]=e;r&&r.target===c&&p&&(p.unobserve(n),cancelAnimationFrame(A),A=requestAnimationFrame((()=>{var e;null==(e=p)||e.observe(n)}))),t()})),c&&!s&&p.observe(c),p.observe(n));let m=s?$n(e):null;return s&&function n(){const r=$n(e);m&&!Jn(m,r)&&t(),m=r,f=requestAnimationFrame(n)}(),t(),()=>{var e;u.forEach((e=>{o&&e.removeEventListener("scroll",t),a&&e.removeEventListener("resize",t)})),null==d||d(),null==(e=p)||e.disconnect(),p=null,s&&cancelAnimationFrame(f)}}(...e,{animationFrame:"always"===m}),elements:{reference:b.anchor},middleware:[pt({mainAxis:o+C,alignmentAxis:s}),u&&mt({mainAxis:!0,crossAxis:!1,limiter:"partial"===A?ht():void 0,...F}),u&&gt({...F}),bt({...F,apply:({elements:e,rects:n,availableWidth:t,availableHeight:r})=>{const{width:o,height:a}=n.reference,l=e.floating.style;l.setProperty("--radix-popper-available-width",`${t}px`),l.setProperty("--radix-popper-available-height",`${r}px`),l.setProperty("--radix-popper-anchor-width",`${o}px`),l.setProperty("--radix-popper-anchor-height",`${a}px`)}}),x&&vt({element:x,padding:c}),Mt({arrowWidth:B,arrowHeight:C}),p&&yt({strategy:"referenceHidden",...F})]}),[R,D]=Wt(I),L=Te(h);$e((()=>{z&&L?.()}),[z,L]);const M=T.arrow?.x,W=T.arrow?.y,U=0!==T.arrow?.centerOffset,[$,H]=l.useState();return $e((()=>{y&&H(window.getComputedStyle(y).zIndex)}),[y]),(0,a.jsx)("div",{ref:P.setFloating,"data-radix-popper-content-wrapper":"",style:{...O,transform:z?O.transform:"translate(0, -200%)",minWidth:"max-content",zIndex:$,"--radix-popper-transform-origin":[T.transformOrigin?.x,T.transformOrigin?.y].join(" "),...T.hide?.referenceHidden&&{visibility:"hidden",pointerEvents:"none"}},dir:e.dir,children:(0,a.jsx)(Ot,{scope:t,placedSide:R,onArrowChange:E,arrowX:M,arrowY:W,shouldHideArrow:U,children:(0,a.jsx)(ze.div,{"data-side":R,"data-align":D,...g,ref:w,style:{...g.style,animation:z?void 0:"none"}})})})}));zt.displayName=Pt;var Tt="PopperArrow",Rt={top:"bottom",right:"left",bottom:"top",left:"right"},Dt=l.forwardRef((function(e,n){const{__scopePopper:t,...r}=e,o=It(Tt,t),l=Rt[o.placedSide];return(0,a.jsx)("span",{ref:o.onArrowChange,style:{position:"absolute",left:o.arrowX,top:o.arrowY,[l]:0,transformOrigin:{top:"",right:"0 0",bottom:"center 0",left:"100% 0"}[o.placedSide],transform:{top:"translateY(100%)",right:"translateY(50%) rotate(90deg) translateX(-50%)",bottom:"rotate(180deg)",left:"translateY(50%) rotate(-90deg) translateX(50%)"}[o.placedSide],visibility:o.shouldHideArrow?"hidden":void 0},children:(0,a.jsx)(xt,{...r,ref:n,style:{...r.style,display:"block"}})})}));function Lt(e){return null!==e}Dt.displayName=Tt;var Mt=e=>({name:"transformOrigin",options:e,fn(n){const{placement:t,rects:r,middlewareData:o}=n,a=0!==o.arrow?.centerOffset,l=a?0:e.arrowWidth,i=a?0:e.arrowHeight,[s,c]=Wt(t),u={start:"0%",center:"50%",end:"100%"}[c],d=(o.arrow?.x??0)+l/2,f=(o.arrow?.y??0)+i/2;let A="",p="";return"bottom"===s?(A=a?u:`${d}px`,p=-i+"px"):"top"===s?(A=a?u:`${d}px`,p=`${r.floating.height+i}px`):"right"===s?(A=-i+"px",p=a?u:`${f}px`):"left"===s&&(A=`${r.floating.width+i}px`,p=a?u:`${f}px`),{data:{x:A,y:p}}}});function Wt(e){const[n,t="center"]=e.split("-");return[n,t]}var Ut=jt,$t=Ft,Ht=zt,qt=Dt,Vt=l.forwardRef(((e,n)=>{const{container:t,...r}=e,[o,i]=l.useState(!1);$e((()=>i(!0)),[]);const s=t||o&&globalThis?.document?.body;return s?Ie.createPortal((0,a.jsx)(ze.div,{...r,ref:n}),s):null}));Vt.displayName="Portal";var Yt=e=>{const{present:n,children:t}=e,r=function(e){const[n,t]=l.useState(),r=l.useRef(null),o=l.useRef(e),a=l.useRef("none"),i=e?"mounted":"unmounted",[s,c]=function(e,n){return l.useReducer(((e,t)=>n[e][t]??e),e)}(i,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return l.useEffect((()=>{const e=Qt(r.current);a.current="mounted"===s?e:"none"}),[s]),$e((()=>{const n=r.current,t=o.current;if(t!==e){const r=a.current,l=Qt(n);c(e?"MOUNT":"none"===l||"none"===n?.display?"UNMOUNT":t&&r!==l?"ANIMATION_OUT":"UNMOUNT"),o.current=e}}),[e,c]),$e((()=>{if(n){let e;const t=n.ownerDocument.defaultView??window,l=a=>{const l=Qt(r.current).includes(a.animationName);if(a.target===n&&l&&(c("ANIMATION_END"),!o.current)){const r=n.style.animationFillMode;n.style.animationFillMode="forwards",e=t.setTimeout((()=>{"forwards"===n.style.animationFillMode&&(n.style.animationFillMode=r)}))}},i=e=>{e.target===n&&(a.current=Qt(r.current))};return n.addEventListener("animationstart",i),n.addEventListener("animationcancel",l),n.addEventListener("animationend",l),()=>{t.clearTimeout(e),n.removeEventListener("animationstart",i),n.removeEventListener("animationcancel",l),n.removeEventListener("animationend",l)}}c("ANIMATION_END")}),[n,c]),{isPresent:["mounted","unmountSuspended"].includes(s),ref:l.useCallback((e=>{r.current=e?getComputedStyle(e):null,t(e)}),[])}}(n),o="function"==typeof t?t({present:r.isPresent}):l.Children.only(t),a=re(r.ref,function(e){let n=Object.getOwnPropertyDescriptor(e.props,"ref")?.get,t=n&&"isReactWarning"in n&&n.isReactWarning;return t?e.ref:(n=Object.getOwnPropertyDescriptor(e,"ref")?.get,t=n&&"isReactWarning"in n&&n.isReactWarning,t?e.props.ref:e.props.ref||e.ref)}(o));return"function"==typeof t||r.isPresent?l.cloneElement(o,{ref:a}):null};function Qt(e){return e?.animationName||"none"}Yt.displayName="Presence";var Xt=i[" useInsertionEffect ".trim().toString()]||$e;function Gt({prop:e,defaultProp:n,onChange:t=()=>{},caller:r}){const[o,a,i]=function({defaultProp:e,onChange:n}){const[t,r]=l.useState(e),o=l.useRef(t),a=l.useRef(n);return Xt((()=>{a.current=n}),[n]),l.useEffect((()=>{o.current!==t&&(a.current?.(t),o.current=t)}),[t,o]),[t,r,a]}({defaultProp:n,onChange:t}),s=void 0!==e,c=s?e:o;{const n=l.useRef(void 0!==e);l.useEffect((()=>{const e=n.current;if(e!==s){const n=e?"controlled":"uncontrolled",t=s?"controlled":"uncontrolled";console.warn(`${r} is changing from ${n} to ${t}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`)}n.current=s}),[s,r])}const u=l.useCallback((n=>{if(s){const t=function(e){return"function"==typeof e}(n)?n(e):n;t!==e&&i.current?.(t)}else a(n)}),[s,e,a,i]);return[c,u]}Symbol("RADIX:SYNC_STATE");var Kt=Object.freeze({position:"absolute",border:0,width:1,height:1,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",wordWrap:"normal"}),Zt=l.forwardRef(((e,n)=>(0,a.jsx)(ze.span,{...e,ref:n,style:{...Kt,...e.style}})));Zt.displayName="VisuallyHidden";var Jt=Zt,[er,nr]=Pe("Tooltip",[Ct]),tr=Ct(),rr="TooltipProvider",or=700,ar="tooltip.open",[lr,ir]=er(rr),sr=e=>{const{__scopeTooltip:n,delayDuration:t=or,skipDelayDuration:r=300,disableHoverableContent:o=!1,children:i}=e,s=l.useRef(!0),c=l.useRef(!1),u=l.useRef(0);return l.useEffect((()=>{const e=u.current;return()=>window.clearTimeout(e)}),[]),(0,a.jsx)(lr,{scope:n,isOpenDelayedRef:s,delayDuration:t,onOpen:l.useCallback((()=>{window.clearTimeout(u.current),s.current=!1}),[]),onClose:l.useCallback((()=>{window.clearTimeout(u.current),u.current=window.setTimeout((()=>s.current=!0),r)}),[r]),isPointerInTransitRef:c,onPointerInTransitChange:l.useCallback((e=>{c.current=e}),[]),disableHoverableContent:o,children:i})};sr.displayName=rr;var cr="Tooltip",[ur,dr]=er(cr),fr=e=>{const{__scopeTooltip:n,children:t,open:r,defaultOpen:o,onOpenChange:i,disableHoverableContent:s,delayDuration:c}=e,u=ir(cr,e.__scopeTooltip),d=tr(n),[f,A]=l.useState(null),p=Ve(),m=l.useRef(0),h=s??u.disableHoverableContent,g=c??u.delayDuration,b=l.useRef(!1),[y,v]=Gt({prop:r,defaultProp:o??!1,onChange:e=>{e?(u.onOpen(),document.dispatchEvent(new CustomEvent(ar))):u.onClose(),i?.(e)},caller:cr}),w=l.useMemo((()=>y?b.current?"delayed-open":"instant-open":"closed"),[y]),x=l.useCallback((()=>{window.clearTimeout(m.current),m.current=0,b.current=!1,v(!0)}),[v]),E=l.useCallback((()=>{window.clearTimeout(m.current),m.current=0,v(!1)}),[v]),k=l.useCallback((()=>{window.clearTimeout(m.current),m.current=window.setTimeout((()=>{b.current=!0,v(!0),m.current=0}),g)}),[g,v]);return l.useEffect((()=>()=>{m.current&&(window.clearTimeout(m.current),m.current=0)}),[]),(0,a.jsx)(Ut,{...d,children:(0,a.jsx)(ur,{scope:n,contentId:p,open:y,stateAttribute:w,trigger:f,onTriggerChange:A,onTriggerEnter:l.useCallback((()=>{u.isOpenDelayedRef.current?k():x()}),[u.isOpenDelayedRef,k,x]),onTriggerLeave:l.useCallback((()=>{h?E():(window.clearTimeout(m.current),m.current=0)}),[E,h]),onOpen:x,onClose:E,disableHoverableContent:h,children:t})})};fr.displayName=cr;var Ar="TooltipTrigger",pr=l.forwardRef(((e,n)=>{const{__scopeTooltip:t,...r}=e,o=dr(Ar,t),i=ir(Ar,t),s=tr(t),c=re(n,l.useRef(null),o.onTriggerChange),u=l.useRef(!1),d=l.useRef(!1),f=l.useCallback((()=>u.current=!1),[]);return l.useEffect((()=>()=>document.removeEventListener("pointerup",f)),[f]),(0,a.jsx)($t,{asChild:!0,...s,children:(0,a.jsx)(ze.button,{"aria-describedby":o.open?o.contentId:void 0,"data-state":o.stateAttribute,...r,ref:c,onPointerMove:Fe(e.onPointerMove,(e=>{"touch"!==e.pointerType&&(d.current||i.isPointerInTransitRef.current||(o.onTriggerEnter(),d.current=!0))})),onPointerLeave:Fe(e.onPointerLeave,(()=>{o.onTriggerLeave(),d.current=!1})),onPointerDown:Fe(e.onPointerDown,(()=>{o.open&&o.onClose(),u.current=!0,document.addEventListener("pointerup",f,{once:!0})})),onFocus:Fe(e.onFocus,(()=>{u.current||o.onOpen()})),onBlur:Fe(e.onBlur,o.onClose),onClick:Fe(e.onClick,o.onClose)})})}));pr.displayName=Ar;var mr="TooltipPortal",[hr,gr]=er(mr,{forceMount:void 0}),br="TooltipContent",yr=l.forwardRef(((e,n)=>{const t=gr(br,e.__scopeTooltip),{forceMount:r=t.forceMount,side:o="top",...l}=e,i=dr(br,e.__scopeTooltip);return(0,a.jsx)(Yt,{present:r||i.open,children:i.disableHoverableContent?(0,a.jsx)(kr,{side:o,...l,ref:n}):(0,a.jsx)(vr,{side:o,...l,ref:n})})})),vr=l.forwardRef(((e,n)=>{const t=dr(br,e.__scopeTooltip),r=ir(br,e.__scopeTooltip),o=l.useRef(null),i=re(n,o),[s,c]=l.useState(null),{trigger:u,onClose:d}=t,f=o.current,{onPointerInTransitChange:A}=r,p=l.useCallback((()=>{c(null),A(!1)}),[A]),m=l.useCallback(((e,n)=>{const t=e.currentTarget,r={x:e.clientX,y:e.clientY},o=function(e,n,t=5){const r=[];switch(n){case"top":r.push({x:e.x-t,y:e.y+t},{x:e.x+t,y:e.y+t});break;case"bottom":r.push({x:e.x-t,y:e.y-t},{x:e.x+t,y:e.y-t});break;case"left":r.push({x:e.x+t,y:e.y-t},{x:e.x+t,y:e.y+t});break;case"right":r.push({x:e.x-t,y:e.y-t},{x:e.x-t,y:e.y+t})}return r}(r,function(e,n){const t=Math.abs(n.top-e.y),r=Math.abs(n.bottom-e.y),o=Math.abs(n.right-e.x),a=Math.abs(n.left-e.x);switch(Math.min(t,r,o,a)){case a:return"left";case o:return"right";case t:return"top";case r:return"bottom";default:throw new Error("unreachable")}}(r,t.getBoundingClientRect())),a=function(e){const n=e.slice();return n.sort(((e,n)=>e.x<n.x?-1:e.x>n.x?1:e.y<n.y?-1:e.y>n.y?1:0)),function(e){if(e.length<=1)return e.slice();const n=[];for(let t=0;t<e.length;t++){const r=e[t];for(;n.length>=2;){const e=n[n.length-1],t=n[n.length-2];if(!((e.x-t.x)*(r.y-t.y)>=(e.y-t.y)*(r.x-t.x)))break;n.pop()}n.push(r)}n.pop();const t=[];for(let n=e.length-1;n>=0;n--){const r=e[n];for(;t.length>=2;){const e=t[t.length-1],n=t[t.length-2];if(!((e.x-n.x)*(r.y-n.y)>=(e.y-n.y)*(r.x-n.x)))break;t.pop()}t.push(r)}return t.pop(),1===n.length&&1===t.length&&n[0].x===t[0].x&&n[0].y===t[0].y?n:n.concat(t)}(n)}([...o,...function(e){const{top:n,right:t,bottom:r,left:o}=e;return[{x:o,y:n},{x:t,y:n},{x:t,y:r},{x:o,y:r}]}(n.getBoundingClientRect())]);c(a),A(!0)}),[A]);return l.useEffect((()=>()=>p()),[p]),l.useEffect((()=>{if(u&&f){const e=e=>m(e,f),n=e=>m(e,u);return u.addEventListener("pointerleave",e),f.addEventListener("pointerleave",n),()=>{u.removeEventListener("pointerleave",e),f.removeEventListener("pointerleave",n)}}}),[u,f,m,p]),l.useEffect((()=>{if(s){const e=e=>{const n=e.target,t={x:e.clientX,y:e.clientY},r=u?.contains(n)||f?.contains(n),o=!function(e,n){const{x:t,y:r}=e;let o=!1;for(let e=0,a=n.length-1;e<n.length;a=e++){const l=n[e],i=n[a],s=l.x,c=l.y,u=i.x,d=i.y;c>r!=d>r&&t<(u-s)*(r-c)/(d-c)+s&&(o=!o)}return o}(t,s);r?p():o&&(p(),d())};return document.addEventListener("pointermove",e),()=>document.removeEventListener("pointermove",e)}}),[u,f,s,d,p]),(0,a.jsx)(kr,{...e,ref:i})})),[wr,xr]=er(cr,{isInside:!1}),Er=function(e){const n=({children:e})=>(0,a.jsx)(a.Fragment,{children:e});return n.displayName=`${e}.Slottable`,n.__radixId=ie,n}("TooltipContent"),kr=l.forwardRef(((e,n)=>{const{__scopeTooltip:t,children:r,"aria-label":o,onEscapeKeyDown:i,onPointerDownOutside:s,...c}=e,u=dr(br,t),d=tr(t),{onClose:f}=u;return l.useEffect((()=>(document.addEventListener(ar,f),()=>document.removeEventListener(ar,f))),[f]),l.useEffect((()=>{if(u.trigger){const e=e=>{const n=e.target;n?.contains(u.trigger)&&f()};return window.addEventListener("scroll",e,{capture:!0}),()=>window.removeEventListener("scroll",e,{capture:!0})}}),[u.trigger,f]),(0,a.jsx)(Me,{asChild:!0,disableOutsidePointerEvents:!1,onEscapeKeyDown:i,onPointerDownOutside:s,onFocusOutside:e=>e.preventDefault(),onDismiss:f,children:(0,a.jsxs)(Ht,{"data-state":u.stateAttribute,...d,...c,ref:n,style:{...c.style,"--radix-tooltip-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-tooltip-content-available-width":"var(--radix-popper-available-width)","--radix-tooltip-content-available-height":"var(--radix-popper-available-height)","--radix-tooltip-trigger-width":"var(--radix-popper-anchor-width)","--radix-tooltip-trigger-height":"var(--radix-popper-anchor-height)"},children:[(0,a.jsx)(Er,{children:r}),(0,a.jsx)(wr,{scope:t,isInside:!0,children:(0,a.jsx)(Jt,{id:u.contentId,role:"tooltip",children:o||r})})]})})}));yr.displayName=br;var Br="TooltipArrow";l.forwardRef(((e,n)=>{const{__scopeTooltip:t,...r}=e,o=tr(t);return xr(Br,t).isInside?null:(0,a.jsx)(qt,{...o,...r,ref:n})})).displayName=Br;var Cr=sr,Sr=fr,Nr=pr,jr=yr,_r=o(26),Fr={};Fr.styleTagTransform=ve(),Fr.setAttributes=he(),Fr.insert=pe().bind(null,"head"),Fr.domAPI=fe(),Fr.insertStyleElement=be(),ue()(_r.A,Fr),_r.A&&_r.A.locals&&_r.A.locals;const Pr=Cr,Or=Sr,Ir=Nr,zr=l.forwardRef(((e,n)=>{var t,r,{className:o,sideOffset:l=4}=e,i=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["className","sideOffset"]);return(0,a.jsx)(jr,Object.assign({ref:n,sideOffset:l,className:(t="fc-tooltip-content",r=o,r?`${t} ${r}`:t)},i))}));var Tr=o(141),Rr={};Rr.styleTagTransform=ve(),Rr.setAttributes=he(),Rr.insert=pe().bind(null,"head"),Rr.domAPI=fe(),Rr.insertStyleElement=be(),ue()(Tr.A,Rr),Tr.A&&Tr.A.locals&&Tr.A.locals;var Dr=function(e,n,t,r){return new(t||(t=Promise))((function(o,a){function l(e){try{s(r.next(e))}catch(e){a(e)}}function i(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,i)}s((r=r.apply(e,n||[])).next())}))},Lr=function(e,n,t,r){return new(t||(t=Promise))((function(o,a){function l(e){try{s(r.next(e))}catch(e){a(e)}}function i(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,i)}s((r=r.apply(e,n||[])).next())}))};const Mr=Z("plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]),Wr=Z("search",[["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}],["path",{d:"m21 21-4.3-4.3",key:"1qie3q"}]]);function Ur(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(n=0;n<o;n++)e[n]&&(t=Ur(e[n]))&&(r&&(r+=" "),r+=t)}else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function $r(){for(var e,n,t=0,r="",o=arguments.length;t<o;t++)(e=arguments[t])&&(n=Ur(e))&&(r&&(r+=" "),r+=n);return r}const Hr=e=>"boolean"==typeof e?`${e}`:0===e?"0":e,qr=$r,Vr=(e,n)=>t=>{var r;if(null==(null==n?void 0:n.variants))return qr(e,null==t?void 0:t.class,null==t?void 0:t.className);const{variants:o,defaultVariants:a}=n,l=Object.keys(o).map((e=>{const n=null==t?void 0:t[e],r=null==a?void 0:a[e];if(null===n)return null;const l=Hr(n)||Hr(r);return o[e][l]})),i=t&&Object.entries(t).reduce(((e,n)=>{let[t,r]=n;return void 0===r||(e[t]=r),e}),{}),s=null==n||null===(r=n.compoundVariants)||void 0===r?void 0:r.reduce(((e,n)=>{let{class:t,className:r,...o}=n;return Object.entries(o).every((e=>{let[n,t]=e;return Array.isArray(t)?t.includes({...a,...i}[n]):{...a,...i}[n]===t}))?[...e,t,r]:e}),[]);return qr(e,l,s,null==t?void 0:t.class,null==t?void 0:t.className)},Yr=e=>{const n=Kr(e),{conflictingClassGroups:t,conflictingClassGroupModifiers:r}=e;return{getClassGroupId:e=>{const t=e.split("-");return""===t[0]&&1!==t.length&&t.shift(),Qr(t,n)||Gr(e)},getConflictingClassGroupIds:(e,n)=>{const o=t[e]||[];return n&&r[e]?[...o,...r[e]]:o}}},Qr=(e,n)=>{if(0===e.length)return n.classGroupId;const t=e[0],r=n.nextPart.get(t),o=r?Qr(e.slice(1),r):void 0;if(o)return o;if(0===n.validators.length)return;const a=e.join("-");return n.validators.find((({validator:e})=>e(a)))?.classGroupId},Xr=/^\[(.+)\]$/,Gr=e=>{if(Xr.test(e)){const n=Xr.exec(e)[1],t=n?.substring(0,n.indexOf(":"));if(t)return"arbitrary.."+t}},Kr=e=>{const{theme:n,prefix:t}=e,r={nextPart:new Map,validators:[]};return no(Object.entries(e.classGroups),t).forEach((([e,t])=>{Zr(t,r,e,n)})),r},Zr=(e,n,t,r)=>{e.forEach((e=>{if("string"!=typeof e){if("function"==typeof e)return eo(e)?void Zr(e(r),n,t,r):void n.validators.push({validator:e,classGroupId:t});Object.entries(e).forEach((([e,o])=>{Zr(o,Jr(n,e),t,r)}))}else(""===e?n:Jr(n,e)).classGroupId=t}))},Jr=(e,n)=>{let t=e;return n.split("-").forEach((e=>{t.nextPart.has(e)||t.nextPart.set(e,{nextPart:new Map,validators:[]}),t=t.nextPart.get(e)})),t},eo=e=>e.isThemeGetter,no=(e,n)=>n?e.map((([e,t])=>[e,t.map((e=>"string"==typeof e?n+e:"object"==typeof e?Object.fromEntries(Object.entries(e).map((([e,t])=>[n+e,t]))):e))])):e,to=e=>{if(e<1)return{get:()=>{},set:()=>{}};let n=0,t=new Map,r=new Map;const o=(o,a)=>{t.set(o,a),n++,n>e&&(n=0,r=t,t=new Map)};return{get(e){let n=t.get(e);return void 0!==n?n:void 0!==(n=r.get(e))?(o(e,n),n):void 0},set(e,n){t.has(e)?t.set(e,n):o(e,n)}}},ro=e=>{const{separator:n,experimentalParseClassName:t}=e,r=1===n.length,o=n[0],a=n.length,l=e=>{const t=[];let l,i=0,s=0;for(let c=0;c<e.length;c++){let u=e[c];if(0===i){if(u===o&&(r||e.slice(c,c+a)===n)){t.push(e.slice(s,c)),s=c+a;continue}if("/"===u){l=c;continue}}"["===u?i++:"]"===u&&i--}const c=0===t.length?e:e.substring(s),u=c.startsWith("!");return{modifiers:t,hasImportantModifier:u,baseClassName:u?c.substring(1):c,maybePostfixModifierPosition:l&&l>s?l-s:void 0}};return t?e=>t({className:e,parseClassName:l}):l},oo=e=>{if(e.length<=1)return e;const n=[];let t=[];return e.forEach((e=>{"["===e[0]?(n.push(...t.sort(),e),t=[]):t.push(e)})),n.push(...t.sort()),n},ao=/\s+/;function lo(){let e,n,t=0,r="";for(;t<arguments.length;)(e=arguments[t++])&&(n=io(e))&&(r&&(r+=" "),r+=n);return r}const io=e=>{if("string"==typeof e)return e;let n,t="";for(let r=0;r<e.length;r++)e[r]&&(n=io(e[r]))&&(t&&(t+=" "),t+=n);return t};function so(e,...n){let t,r,o,a=function(i){const s=n.reduce(((e,n)=>n(e)),e());return t=(e=>({cache:to(e.cacheSize),parseClassName:ro(e),...Yr(e)}))(s),r=t.cache.get,o=t.cache.set,a=l,l(i)};function l(e){const n=r(e);if(n)return n;const a=((e,n)=>{const{parseClassName:t,getClassGroupId:r,getConflictingClassGroupIds:o}=n,a=[],l=e.trim().split(ao);let i="";for(let e=l.length-1;e>=0;e-=1){const n=l[e],{modifiers:s,hasImportantModifier:c,baseClassName:u,maybePostfixModifierPosition:d}=t(n);let f=Boolean(d),A=r(f?u.substring(0,d):u);if(!A){if(!f){i=n+(i.length>0?" "+i:i);continue}if(A=r(u),!A){i=n+(i.length>0?" "+i:i);continue}f=!1}const p=oo(s).join(":"),m=c?p+"!":p,h=m+A;if(a.includes(h))continue;a.push(h);const g=o(A,f);for(let e=0;e<g.length;++e){const n=g[e];a.push(m+n)}i=n+(i.length>0?" "+i:i)}return i})(e,t);return o(e,a),a}return function(){return a(lo.apply(null,arguments))}}const co=e=>{const n=n=>n[e]||[];return n.isThemeGetter=!0,n},uo=/^\[(?:([a-z-]+):)?(.+)\]$/i,fo=/^\d+\/\d+$/,Ao=new Set(["px","full","screen"]),po=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,mo=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,ho=/^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/,go=/^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/,bo=/^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/,yo=e=>wo(e)||Ao.has(e)||fo.test(e),vo=e=>Io(e,"length",zo),wo=e=>Boolean(e)&&!Number.isNaN(Number(e)),xo=e=>Io(e,"number",wo),Eo=e=>Boolean(e)&&Number.isInteger(Number(e)),ko=e=>e.endsWith("%")&&wo(e.slice(0,-1)),Bo=e=>uo.test(e),Co=e=>po.test(e),So=new Set(["length","size","percentage"]),No=e=>Io(e,So,To),jo=e=>Io(e,"position",To),_o=new Set(["image","url"]),Fo=e=>Io(e,_o,Do),Po=e=>Io(e,"",Ro),Oo=()=>!0,Io=(e,n,t)=>{const r=uo.exec(e);return!!r&&(r[1]?"string"==typeof n?r[1]===n:n.has(r[1]):t(r[2]))},zo=e=>mo.test(e)&&!ho.test(e),To=()=>!1,Ro=e=>go.test(e),Do=e=>bo.test(e),Lo=so((Symbol.toStringTag,()=>{const e=co("colors"),n=co("spacing"),t=co("blur"),r=co("brightness"),o=co("borderColor"),a=co("borderRadius"),l=co("borderSpacing"),i=co("borderWidth"),s=co("contrast"),c=co("grayscale"),u=co("hueRotate"),d=co("invert"),f=co("gap"),A=co("gradientColorStops"),p=co("gradientColorStopPositions"),m=co("inset"),h=co("margin"),g=co("opacity"),b=co("padding"),y=co("saturate"),v=co("scale"),w=co("sepia"),x=co("skew"),E=co("space"),k=co("translate"),B=()=>["auto",Bo,n],C=()=>[Bo,n],S=()=>["",yo,vo],N=()=>["auto",wo,Bo],j=()=>["","0",Bo],_=()=>[wo,Bo];return{cacheSize:500,separator:":",theme:{colors:[Oo],spacing:[yo,vo],blur:["none","",Co,Bo],brightness:_(),borderColor:[e],borderRadius:["none","","full",Co,Bo],borderSpacing:C(),borderWidth:S(),contrast:_(),grayscale:j(),hueRotate:_(),invert:j(),gap:C(),gradientColorStops:[e],gradientColorStopPositions:[ko,vo],inset:B(),margin:B(),opacity:_(),padding:C(),saturate:_(),scale:_(),sepia:j(),skew:_(),space:C(),translate:C()},classGroups:{aspect:[{aspect:["auto","square","video",Bo]}],container:["container"],columns:[{columns:[Co]}],"break-after":[{"break-after":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-before":[{"break-before":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-inside":[{"break-inside":["auto","avoid","avoid-page","avoid-column"]}],"box-decoration":[{"box-decoration":["slice","clone"]}],box:[{box:["border","content"]}],display:["block","inline-block","inline","flex","inline-flex","table","inline-table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row-group","table-row","flow-root","grid","inline-grid","contents","list-item","hidden"],float:[{float:["right","left","none","start","end"]}],clear:[{clear:["left","right","both","none","start","end"]}],isolation:["isolate","isolation-auto"],"object-fit":[{object:["contain","cover","fill","none","scale-down"]}],"object-position":[{object:["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top",Bo]}],overflow:[{overflow:["auto","hidden","clip","visible","scroll"]}],"overflow-x":[{"overflow-x":["auto","hidden","clip","visible","scroll"]}],"overflow-y":[{"overflow-y":["auto","hidden","clip","visible","scroll"]}],overscroll:[{overscroll:["auto","contain","none"]}],"overscroll-x":[{"overscroll-x":["auto","contain","none"]}],"overscroll-y":[{"overscroll-y":["auto","contain","none"]}],position:["static","fixed","absolute","relative","sticky"],inset:[{inset:[m]}],"inset-x":[{"inset-x":[m]}],"inset-y":[{"inset-y":[m]}],start:[{start:[m]}],end:[{end:[m]}],top:[{top:[m]}],right:[{right:[m]}],bottom:[{bottom:[m]}],left:[{left:[m]}],visibility:["visible","invisible","collapse"],z:[{z:["auto",Eo,Bo]}],basis:[{basis:B()}],"flex-direction":[{flex:["row","row-reverse","col","col-reverse"]}],"flex-wrap":[{flex:["wrap","wrap-reverse","nowrap"]}],flex:[{flex:["1","auto","initial","none",Bo]}],grow:[{grow:j()}],shrink:[{shrink:j()}],order:[{order:["first","last","none",Eo,Bo]}],"grid-cols":[{"grid-cols":[Oo]}],"col-start-end":[{col:["auto",{span:["full",Eo,Bo]},Bo]}],"col-start":[{"col-start":N()}],"col-end":[{"col-end":N()}],"grid-rows":[{"grid-rows":[Oo]}],"row-start-end":[{row:["auto",{span:[Eo,Bo]},Bo]}],"row-start":[{"row-start":N()}],"row-end":[{"row-end":N()}],"grid-flow":[{"grid-flow":["row","col","dense","row-dense","col-dense"]}],"auto-cols":[{"auto-cols":["auto","min","max","fr",Bo]}],"auto-rows":[{"auto-rows":["auto","min","max","fr",Bo]}],gap:[{gap:[f]}],"gap-x":[{"gap-x":[f]}],"gap-y":[{"gap-y":[f]}],"justify-content":[{justify:["normal","start","end","center","between","around","evenly","stretch"]}],"justify-items":[{"justify-items":["start","end","center","stretch"]}],"justify-self":[{"justify-self":["auto","start","end","center","stretch"]}],"align-content":[{content:["normal","start","end","center","between","around","evenly","stretch","baseline"]}],"align-items":[{items:["start","end","center","baseline","stretch"]}],"align-self":[{self:["auto","start","end","center","stretch","baseline"]}],"place-content":[{"place-content":["start","end","center","between","around","evenly","stretch","baseline"]}],"place-items":[{"place-items":["start","end","center","baseline","stretch"]}],"place-self":[{"place-self":["auto","start","end","center","stretch"]}],p:[{p:[b]}],px:[{px:[b]}],py:[{py:[b]}],ps:[{ps:[b]}],pe:[{pe:[b]}],pt:[{pt:[b]}],pr:[{pr:[b]}],pb:[{pb:[b]}],pl:[{pl:[b]}],m:[{m:[h]}],mx:[{mx:[h]}],my:[{my:[h]}],ms:[{ms:[h]}],me:[{me:[h]}],mt:[{mt:[h]}],mr:[{mr:[h]}],mb:[{mb:[h]}],ml:[{ml:[h]}],"space-x":[{"space-x":[E]}],"space-x-reverse":["space-x-reverse"],"space-y":[{"space-y":[E]}],"space-y-reverse":["space-y-reverse"],w:[{w:["auto","min","max","fit","svw","lvw","dvw",Bo,n]}],"min-w":[{"min-w":[Bo,n,"min","max","fit"]}],"max-w":[{"max-w":[Bo,n,"none","full","min","max","fit","prose",{screen:[Co]},Co]}],h:[{h:[Bo,n,"auto","min","max","fit","svh","lvh","dvh"]}],"min-h":[{"min-h":[Bo,n,"min","max","fit","svh","lvh","dvh"]}],"max-h":[{"max-h":[Bo,n,"min","max","fit","svh","lvh","dvh"]}],size:[{size:[Bo,n,"auto","min","max","fit"]}],"font-size":[{text:["base",Co,vo]}],"font-smoothing":["antialiased","subpixel-antialiased"],"font-style":["italic","not-italic"],"font-weight":[{font:["thin","extralight","light","normal","medium","semibold","bold","extrabold","black",xo]}],"font-family":[{font:[Oo]}],"fvn-normal":["normal-nums"],"fvn-ordinal":["ordinal"],"fvn-slashed-zero":["slashed-zero"],"fvn-figure":["lining-nums","oldstyle-nums"],"fvn-spacing":["proportional-nums","tabular-nums"],"fvn-fraction":["diagonal-fractions","stacked-fractions"],tracking:[{tracking:["tighter","tight","normal","wide","wider","widest",Bo]}],"line-clamp":[{"line-clamp":["none",wo,xo]}],leading:[{leading:["none","tight","snug","normal","relaxed","loose",yo,Bo]}],"list-image":[{"list-image":["none",Bo]}],"list-style-type":[{list:["none","disc","decimal",Bo]}],"list-style-position":[{list:["inside","outside"]}],"placeholder-color":[{placeholder:[e]}],"placeholder-opacity":[{"placeholder-opacity":[g]}],"text-alignment":[{text:["left","center","right","justify","start","end"]}],"text-color":[{text:[e]}],"text-opacity":[{"text-opacity":[g]}],"text-decoration":["underline","overline","line-through","no-underline"],"text-decoration-style":[{decoration:["solid","dashed","dotted","double","none","wavy"]}],"text-decoration-thickness":[{decoration:["auto","from-font",yo,vo]}],"underline-offset":[{"underline-offset":["auto",yo,Bo]}],"text-decoration-color":[{decoration:[e]}],"text-transform":["uppercase","lowercase","capitalize","normal-case"],"text-overflow":["truncate","text-ellipsis","text-clip"],"text-wrap":[{text:["wrap","nowrap","balance","pretty"]}],indent:[{indent:C()}],"vertical-align":[{align:["baseline","top","middle","bottom","text-top","text-bottom","sub","super",Bo]}],whitespace:[{whitespace:["normal","nowrap","pre","pre-line","pre-wrap","break-spaces"]}],break:[{break:["normal","words","all","keep"]}],hyphens:[{hyphens:["none","manual","auto"]}],content:[{content:["none",Bo]}],"bg-attachment":[{bg:["fixed","local","scroll"]}],"bg-clip":[{"bg-clip":["border","padding","content","text"]}],"bg-opacity":[{"bg-opacity":[g]}],"bg-origin":[{"bg-origin":["border","padding","content"]}],"bg-position":[{bg:["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top",jo]}],"bg-repeat":[{bg:["no-repeat",{repeat:["","x","y","round","space"]}]}],"bg-size":[{bg:["auto","cover","contain",No]}],"bg-image":[{bg:["none",{"gradient-to":["t","tr","r","br","b","bl","l","tl"]},Fo]}],"bg-color":[{bg:[e]}],"gradient-from-pos":[{from:[p]}],"gradient-via-pos":[{via:[p]}],"gradient-to-pos":[{to:[p]}],"gradient-from":[{from:[A]}],"gradient-via":[{via:[A]}],"gradient-to":[{to:[A]}],rounded:[{rounded:[a]}],"rounded-s":[{"rounded-s":[a]}],"rounded-e":[{"rounded-e":[a]}],"rounded-t":[{"rounded-t":[a]}],"rounded-r":[{"rounded-r":[a]}],"rounded-b":[{"rounded-b":[a]}],"rounded-l":[{"rounded-l":[a]}],"rounded-ss":[{"rounded-ss":[a]}],"rounded-se":[{"rounded-se":[a]}],"rounded-ee":[{"rounded-ee":[a]}],"rounded-es":[{"rounded-es":[a]}],"rounded-tl":[{"rounded-tl":[a]}],"rounded-tr":[{"rounded-tr":[a]}],"rounded-br":[{"rounded-br":[a]}],"rounded-bl":[{"rounded-bl":[a]}],"border-w":[{border:[i]}],"border-w-x":[{"border-x":[i]}],"border-w-y":[{"border-y":[i]}],"border-w-s":[{"border-s":[i]}],"border-w-e":[{"border-e":[i]}],"border-w-t":[{"border-t":[i]}],"border-w-r":[{"border-r":[i]}],"border-w-b":[{"border-b":[i]}],"border-w-l":[{"border-l":[i]}],"border-opacity":[{"border-opacity":[g]}],"border-style":[{border:["solid","dashed","dotted","double","none","hidden"]}],"divide-x":[{"divide-x":[i]}],"divide-x-reverse":["divide-x-reverse"],"divide-y":[{"divide-y":[i]}],"divide-y-reverse":["divide-y-reverse"],"divide-opacity":[{"divide-opacity":[g]}],"divide-style":[{divide:["solid","dashed","dotted","double","none"]}],"border-color":[{border:[o]}],"border-color-x":[{"border-x":[o]}],"border-color-y":[{"border-y":[o]}],"border-color-s":[{"border-s":[o]}],"border-color-e":[{"border-e":[o]}],"border-color-t":[{"border-t":[o]}],"border-color-r":[{"border-r":[o]}],"border-color-b":[{"border-b":[o]}],"border-color-l":[{"border-l":[o]}],"divide-color":[{divide:[o]}],"outline-style":[{outline:["","solid","dashed","dotted","double","none"]}],"outline-offset":[{"outline-offset":[yo,Bo]}],"outline-w":[{outline:[yo,vo]}],"outline-color":[{outline:[e]}],"ring-w":[{ring:S()}],"ring-w-inset":["ring-inset"],"ring-color":[{ring:[e]}],"ring-opacity":[{"ring-opacity":[g]}],"ring-offset-w":[{"ring-offset":[yo,vo]}],"ring-offset-color":[{"ring-offset":[e]}],shadow:[{shadow:["","inner","none",Co,Po]}],"shadow-color":[{shadow:[Oo]}],opacity:[{opacity:[g]}],"mix-blend":[{"mix-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity","plus-lighter","plus-darker"]}],"bg-blend":[{"bg-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"]}],filter:[{filter:["","none"]}],blur:[{blur:[t]}],brightness:[{brightness:[r]}],contrast:[{contrast:[s]}],"drop-shadow":[{"drop-shadow":["","none",Co,Bo]}],grayscale:[{grayscale:[c]}],"hue-rotate":[{"hue-rotate":[u]}],invert:[{invert:[d]}],saturate:[{saturate:[y]}],sepia:[{sepia:[w]}],"backdrop-filter":[{"backdrop-filter":["","none"]}],"backdrop-blur":[{"backdrop-blur":[t]}],"backdrop-brightness":[{"backdrop-brightness":[r]}],"backdrop-contrast":[{"backdrop-contrast":[s]}],"backdrop-grayscale":[{"backdrop-grayscale":[c]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[u]}],"backdrop-invert":[{"backdrop-invert":[d]}],"backdrop-opacity":[{"backdrop-opacity":[g]}],"backdrop-saturate":[{"backdrop-saturate":[y]}],"backdrop-sepia":[{"backdrop-sepia":[w]}],"border-collapse":[{border:["collapse","separate"]}],"border-spacing":[{"border-spacing":[l]}],"border-spacing-x":[{"border-spacing-x":[l]}],"border-spacing-y":[{"border-spacing-y":[l]}],"table-layout":[{table:["auto","fixed"]}],caption:[{caption:["top","bottom"]}],transition:[{transition:["none","all","","colors","opacity","shadow","transform",Bo]}],duration:[{duration:_()}],ease:[{ease:["linear","in","out","in-out",Bo]}],delay:[{delay:_()}],animate:[{animate:["none","spin","ping","pulse","bounce",Bo]}],transform:[{transform:["","gpu","none"]}],scale:[{scale:[v]}],"scale-x":[{"scale-x":[v]}],"scale-y":[{"scale-y":[v]}],rotate:[{rotate:[Eo,Bo]}],"translate-x":[{"translate-x":[k]}],"translate-y":[{"translate-y":[k]}],"skew-x":[{"skew-x":[x]}],"skew-y":[{"skew-y":[x]}],"transform-origin":[{origin:["center","top","top-right","right","bottom-right","bottom","bottom-left","left","top-left",Bo]}],accent:[{accent:["auto",e]}],appearance:[{appearance:["none","auto"]}],cursor:[{cursor:["auto","default","pointer","wait","text","move","help","not-allowed","none","context-menu","progress","cell","crosshair","vertical-text","alias","copy","no-drop","grab","grabbing","all-scroll","col-resize","row-resize","n-resize","e-resize","s-resize","w-resize","ne-resize","nw-resize","se-resize","sw-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","zoom-in","zoom-out",Bo]}],"caret-color":[{caret:[e]}],"pointer-events":[{"pointer-events":["none","auto"]}],resize:[{resize:["none","y","x",""]}],"scroll-behavior":[{scroll:["auto","smooth"]}],"scroll-m":[{"scroll-m":C()}],"scroll-mx":[{"scroll-mx":C()}],"scroll-my":[{"scroll-my":C()}],"scroll-ms":[{"scroll-ms":C()}],"scroll-me":[{"scroll-me":C()}],"scroll-mt":[{"scroll-mt":C()}],"scroll-mr":[{"scroll-mr":C()}],"scroll-mb":[{"scroll-mb":C()}],"scroll-ml":[{"scroll-ml":C()}],"scroll-p":[{"scroll-p":C()}],"scroll-px":[{"scroll-px":C()}],"scroll-py":[{"scroll-py":C()}],"scroll-ps":[{"scroll-ps":C()}],"scroll-pe":[{"scroll-pe":C()}],"scroll-pt":[{"scroll-pt":C()}],"scroll-pr":[{"scroll-pr":C()}],"scroll-pb":[{"scroll-pb":C()}],"scroll-pl":[{"scroll-pl":C()}],"snap-align":[{snap:["start","end","center","align-none"]}],"snap-stop":[{snap:["normal","always"]}],"snap-type":[{snap:["none","x","y","both"]}],"snap-strictness":[{snap:["mandatory","proximity"]}],touch:[{touch:["auto","none","manipulation"]}],"touch-x":[{"touch-pan":["x","left","right"]}],"touch-y":[{"touch-pan":["y","up","down"]}],"touch-pz":["touch-pinch-zoom"],select:[{select:["none","text","all","auto"]}],"will-change":[{"will-change":["auto","scroll","contents","transform",Bo]}],fill:[{fill:[e,"none"]}],"stroke-w":[{stroke:[yo,vo,xo]}],stroke:[{stroke:[e,"none"]}],sr:["sr-only","not-sr-only"],"forced-color-adjust":[{"forced-color-adjust":["auto","none"]}]},conflictingClassGroups:{overflow:["overflow-x","overflow-y"],overscroll:["overscroll-x","overscroll-y"],inset:["inset-x","inset-y","start","end","top","right","bottom","left"],"inset-x":["right","left"],"inset-y":["top","bottom"],flex:["basis","grow","shrink"],gap:["gap-x","gap-y"],p:["px","py","ps","pe","pt","pr","pb","pl"],px:["pr","pl"],py:["pt","pb"],m:["mx","my","ms","me","mt","mr","mb","ml"],mx:["mr","ml"],my:["mt","mb"],size:["w","h"],"font-size":["leading"],"fvn-normal":["fvn-ordinal","fvn-slashed-zero","fvn-figure","fvn-spacing","fvn-fraction"],"fvn-ordinal":["fvn-normal"],"fvn-slashed-zero":["fvn-normal"],"fvn-figure":["fvn-normal"],"fvn-spacing":["fvn-normal"],"fvn-fraction":["fvn-normal"],"line-clamp":["display","overflow"],rounded:["rounded-s","rounded-e","rounded-t","rounded-r","rounded-b","rounded-l","rounded-ss","rounded-se","rounded-ee","rounded-es","rounded-tl","rounded-tr","rounded-br","rounded-bl"],"rounded-s":["rounded-ss","rounded-es"],"rounded-e":["rounded-se","rounded-ee"],"rounded-t":["rounded-tl","rounded-tr"],"rounded-r":["rounded-tr","rounded-br"],"rounded-b":["rounded-br","rounded-bl"],"rounded-l":["rounded-tl","rounded-bl"],"border-spacing":["border-spacing-x","border-spacing-y"],"border-w":["border-w-s","border-w-e","border-w-t","border-w-r","border-w-b","border-w-l"],"border-w-x":["border-w-r","border-w-l"],"border-w-y":["border-w-t","border-w-b"],"border-color":["border-color-s","border-color-e","border-color-t","border-color-r","border-color-b","border-color-l"],"border-color-x":["border-color-r","border-color-l"],"border-color-y":["border-color-t","border-color-b"],"scroll-m":["scroll-mx","scroll-my","scroll-ms","scroll-me","scroll-mt","scroll-mr","scroll-mb","scroll-ml"],"scroll-mx":["scroll-mr","scroll-ml"],"scroll-my":["scroll-mt","scroll-mb"],"scroll-p":["scroll-px","scroll-py","scroll-ps","scroll-pe","scroll-pt","scroll-pr","scroll-pb","scroll-pl"],"scroll-px":["scroll-pr","scroll-pl"],"scroll-py":["scroll-pt","scroll-pb"],touch:["touch-x","touch-y","touch-pz"],"touch-x":["touch"],"touch-y":["touch"],"touch-pz":["touch"]},conflictingClassGroupModifiers:{"font-size":["leading"]}}}));function Mo(...e){return Lo($r(e))}const Wo=Vr("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),Uo=l.forwardRef(((e,n)=>{var{className:t,variant:r,size:o,asChild:l=!1}=e,i=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["className","variant","size","asChild"]);const s=l?ae:"button";return(0,a.jsx)(s,Object.assign({className:Mo(Wo({variant:r,size:o,className:t})),ref:n},i))}));Uo.displayName="Button";var $o=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t};const Ho=l.forwardRef(((e,n)=>{var{className:t}=e,r=$o(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Mo("rounded-lg border bg-card text-card-foreground shadow-sm",t)},r))}));Ho.displayName="Card";const qo=l.forwardRef(((e,n)=>{var{className:t}=e,r=$o(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Mo("flex flex-col space-y-1.5 p-6",t)},r))}));qo.displayName="CardHeader";const Vo=l.forwardRef(((e,n)=>{var{className:t}=e,r=$o(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Mo("text-2xl font-semibold leading-none tracking-tight",t)},r))}));Vo.displayName="CardTitle";const Yo=l.forwardRef(((e,n)=>{var{className:t}=e,r=$o(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Mo("text-sm text-muted-foreground",t)},r))}));Yo.displayName="CardDescription";const Qo=l.forwardRef(((e,n)=>{var{className:t}=e,r=$o(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Mo("p-6 pt-0",t)},r))}));Qo.displayName="CardContent",l.forwardRef(((e,n)=>{var{className:t}=e,r=$o(e,["className"]);return(0,a.jsx)("div",Object.assign({ref:n,className:Mo("flex items-center p-6 pt-0",t)},r))})).displayName="CardFooter";const Xo=l.forwardRef(((e,n)=>{var{className:t,type:r}=e,o=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["className","type"]);return(0,a.jsx)("input",Object.assign({type:r,className:Mo("flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",t),ref:n},o))}));Xo.displayName="Input";var Go=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t};const Ko=l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("div",{className:"relative w-full overflow-auto",children:(0,a.jsx)("table",Object.assign({ref:n,className:Mo("w-full caption-bottom text-sm",t)},r))})}));Ko.displayName="Table";const Zo=l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("thead",Object.assign({ref:n,className:Mo("[&_tr]:border-b",t)},r))}));Zo.displayName="TableHeader";const Jo=l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("tbody",Object.assign({ref:n,className:Mo("[&_tr:last-child]:border-0",t)},r))}));Jo.displayName="TableBody",l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("tfoot",Object.assign({ref:n,className:Mo("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",t)},r))})).displayName="TableFooter";const ea=l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("tr",Object.assign({ref:n,className:Mo("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",t)},r))}));ea.displayName="TableRow";const na=l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("td",Object.assign({ref:n,className:Mo("h-12 px-4 text-left align-middle font-medium text-muted-foreground",t)},r))}));na.displayName="TableHead";const ta=l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("td",Object.assign({ref:n,className:Mo("p-4 align-middle",t)},r))}));ta.displayName="TableCell",l.forwardRef(((e,n)=>{var{className:t}=e,r=Go(e,["className"]);return(0,a.jsx)("caption",Object.assign({ref:n,className:Mo("mt-4 text-sm text-muted-foreground",t)},r))})).displayName="TableCaption";const ra=Z("star",[["path",{d:"M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z",key:"r04s7s"}]]),oa=Z("chevron-up",[["path",{d:"m18 15-6-6-6 6",key:"153udz"}]]),aa=Z("chevron-down",[["path",{d:"m6 9 6 6 6-6",key:"qrunsl"}]]),la=Z("trash",[["path",{d:"M3 6h18",key:"d0wm0j"}],["path",{d:"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6",key:"4alrt4"}],["path",{d:"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2",key:"v07s0e"}]]);function ia({template:e,isExpanded:n,onToggleExpand:t,onDeleteInitiate:r,isDisabled:o,isLastTemplate:l}){return(0,a.jsxs)(ea,{className:"border-b border-[#c3c4c7]",children:[(0,a.jsx)(ta,{className:"text-center w-16 p-0",children:e.is_default&&(0,a.jsx)("div",{className:"flex items-center justify-center h-full",children:(0,a.jsx)(ra,{className:"h-5 w-5 fill-[#ffb900] text-[#ffb900]"})})}),(0,a.jsx)(ta,{className:"font-medium text-[#2271b1]",children:e.name||(0,a.jsx)("span",{className:"text-[#8c8f94] italic",children:V("Untitled","wp-coupons-core")})}),(0,a.jsx)(ta,{children:e.subject||(0,a.jsx)("span",{className:"text-[#8c8f94] italic",children:V("No subject","wp-coupons-core")})}),(0,a.jsx)(ta,{className:"text-right",children:(0,a.jsxs)("div",{className:"flex justify-end gap-2",children:[(0,a.jsxs)(Uo,{variant:"outline",size:"sm",className:"h-8 border-[#c3c4c7] text-[#2271b1] hover:text-[#135e96] hover:border-[#8c8f94]",onClick:n=>{n.preventDefault(),t(e.id)},children:[n?(0,a.jsx)(oa,{className:"h-4 w-4 mr-1"}):(0,a.jsx)(aa,{className:"h-4 w-4 mr-1"}),V("Edit","wp-coupons-core")]}),(0,a.jsxs)(Uo,{variant:"outline",size:"sm",className:"h-8 border-[#c3c4c7] text-[#b32d2e] hover:text-[#8a2424] hover:border-[#8c8f94]",onClick:n=>{n.preventDefault(),r(e)},disabled:o||l,style:{opacity:o||l?.5:1},children:[(0,a.jsx)(la,{className:"h-4 w-4"}),(0,a.jsx)("span",{className:"sr-only",children:"Usuń"})]})]})})]},e.id)}const sa=Z("save",[["path",{d:"M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z",key:"1c8476"}],["path",{d:"M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7",key:"1ydtos"}],["path",{d:"M7 3v4a1 1 0 0 0 1 1h7",key:"t51u73"}]]);var ca="Checkbox",[ua,da]=Pe(ca),[fa,Aa]=ua(ca);function pa(e){const{__scopeCheckbox:n,checked:t,children:r,defaultChecked:o,disabled:i,form:s,name:c,onCheckedChange:u,required:d,value:f="on",internal_do_not_use_render:A}=e,[p,m]=Gt({prop:t,defaultProp:o??!1,onChange:u,caller:ca}),[h,g]=l.useState(null),[b,y]=l.useState(null),v=l.useRef(!1),w=!h||!!s||!!h.closest("form"),x={checked:p,disabled:i,setChecked:m,control:h,setControl:g,name:c,form:s,value:f,hasConsumerStoppedPropagationRef:v,required:d,defaultChecked:!Ea(o)&&o,isFormControl:w,bubbleInput:b,setBubbleInput:y};return(0,a.jsx)(fa,{scope:n,...x,children:xa(A)?A(x):r})}var ma="CheckboxTrigger",ha=l.forwardRef((({__scopeCheckbox:e,onKeyDown:n,onClick:t,...r},o)=>{const{control:i,value:s,disabled:c,checked:u,required:d,setControl:f,setChecked:A,hasConsumerStoppedPropagationRef:p,isFormControl:m,bubbleInput:h}=Aa(ma,e),g=re(o,f),b=l.useRef(u);return l.useEffect((()=>{const e=i?.form;if(e){const n=()=>A(b.current);return e.addEventListener("reset",n),()=>e.removeEventListener("reset",n)}}),[i,A]),(0,a.jsx)(ze.button,{type:"button",role:"checkbox","aria-checked":Ea(u)?"mixed":u,"aria-required":d,"data-state":ka(u),"data-disabled":c?"":void 0,disabled:c,value:s,...r,ref:g,onKeyDown:Fe(n,(e=>{"Enter"===e.key&&e.preventDefault()})),onClick:Fe(t,(e=>{A((e=>!!Ea(e)||!e)),h&&m&&(p.current=e.isPropagationStopped(),p.current||e.stopPropagation())}))})}));ha.displayName=ma;var ga=l.forwardRef(((e,n)=>{const{__scopeCheckbox:t,name:r,checked:o,defaultChecked:l,required:i,disabled:s,value:c,onCheckedChange:u,form:d,...f}=e;return(0,a.jsx)(pa,{__scopeCheckbox:t,checked:o,defaultChecked:l,disabled:s,required:i,onCheckedChange:u,name:r,form:d,value:c,internal_do_not_use_render:({isFormControl:e})=>(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(ha,{...f,ref:n,__scopeCheckbox:t}),e&&(0,a.jsx)(wa,{__scopeCheckbox:t})]})})}));ga.displayName=ca;var ba="CheckboxIndicator",ya=l.forwardRef(((e,n)=>{const{__scopeCheckbox:t,forceMount:r,...o}=e,l=Aa(ba,t);return(0,a.jsx)(Yt,{present:r||Ea(l.checked)||!0===l.checked,children:(0,a.jsx)(ze.span,{"data-state":ka(l.checked),"data-disabled":l.disabled?"":void 0,...o,ref:n,style:{pointerEvents:"none",...e.style}})})}));ya.displayName=ba;var va="CheckboxBubbleInput",wa=l.forwardRef((({__scopeCheckbox:e,...n},t)=>{const{control:r,hasConsumerStoppedPropagationRef:o,checked:i,defaultChecked:s,required:c,disabled:u,name:d,value:f,form:A,bubbleInput:p,setBubbleInput:m}=Aa(va,e),h=re(t,m),g=function(e){const n=l.useRef({value:e,previous:e});return l.useMemo((()=>(n.current.value!==e&&(n.current.previous=n.current.value,n.current.value=e),n.current.previous)),[e])}(i),b=Et(r);l.useEffect((()=>{const e=p;if(!e)return;const n=window.HTMLInputElement.prototype,t=Object.getOwnPropertyDescriptor(n,"checked").set,r=!o.current;if(g!==i&&t){const n=new Event("click",{bubbles:r});e.indeterminate=Ea(i),t.call(e,!Ea(i)&&i),e.dispatchEvent(n)}}),[p,g,i,o]);const y=l.useRef(!Ea(i)&&i);return(0,a.jsx)(ze.input,{type:"checkbox","aria-hidden":!0,defaultChecked:s??y.current,required:c,disabled:u,name:d,value:f,form:A,...n,tabIndex:-1,ref:h,style:{...n.style,...b,position:"absolute",pointerEvents:"none",opacity:0,margin:0,transform:"translateX(-100%)"}})}));function xa(e){return"function"==typeof e}function Ea(e){return"indeterminate"===e}function ka(e){return Ea(e)?"indeterminate":e?"checked":"unchecked"}wa.displayName=va;const Ba=Z("check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]);const Ca=l.forwardRef(((e,n)=>{var{className:t}=e,r=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["className"]);return(0,a.jsx)(ga,Object.assign({ref:n,className:Mo("peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",t)},r,{children:(0,a.jsx)(ya,{className:Mo("flex items-center justify-center text-current"),children:(0,a.jsx)(Ba,{className:"h-4 w-4"})})}))}));Ca.displayName=ga.displayName;var Sa=l.forwardRef(((e,n)=>(0,a.jsx)(ze.label,{...e,ref:n,onMouseDown:n=>{n.target.closest("button, input, select, textarea")||(e.onMouseDown?.(n),!n.defaultPrevented&&n.detail>1&&n.preventDefault())}})));Sa.displayName="Label";var Na=Sa;const ja=Vr("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"),_a=l.forwardRef(((e,n)=>{var{className:t}=e,r=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["className"]);return(0,a.jsx)(Na,Object.assign({ref:n,className:Mo(ja(),t)},r))}));_a.displayName=Na.displayName;const Fa=(0,l.memo)((({id:e,initialValue:n,onChange:t,editorSettings:r={},editorRef:o,disabled:i=!1})=>{const s=(0,l.useRef)(!1);return(0,l.useEffect)((()=>{if("undefined"==typeof wp||void 0===wp.editor||"undefined"==typeof tinymce)return;if(s.current)return;const a={teeny:!0,quicktags:!0,media_buttons:!1,height:400,toolbar1:"bold,italic,underline,strikethrough,bullist,numlist,link,unlink,undo,redo"},l=Object.assign(Object.assign(Object.assign({},a),r),{readonly:i,tinymce:Object.assign(Object.assign(Object.assign({},a),r),{readonly:i,setup:e=>{o.current=e,e.on("init",(()=>{e.getContent()!==n&&e.setContent(n)})),e.on("change",t),e.on("keyup",t)}})});return wp.editor.initialize(e,l),o.current=tinymce.get(e),s.current=!0,()=>{tinymce.get(e)&&(tinymce.get(e).remove(),o.current=null,s.current=!1)}}),[e,t,r,o,i,n]),(0,l.useEffect)((()=>{tinymce.get(e)&&tinymce.get(e).setMode(i?"readonly":"design")}),[e,i]),(0,a.jsx)("textarea",{id:e,className:"w-full"})}));const Pa=(0,l.memo)((function({initialData:e,onSave:n,onCancel:t,isDisabled:r}){const[o,i]=(0,l.useState)(e),[s,c]=(0,l.useState)({}),[u,d]=(0,l.useState)(null),f=(0,l.useRef)(null),A=(0,l.useRef)(null);(0,l.useEffect)((()=>{i(e),c({}),e.id!==o.id&&d(null)}),[e]),(0,l.useEffect)((()=>()=>{f.current&&clearTimeout(f.current)}),[]),(0,l.useEffect)((()=>{if((null==u?void 0:u.visible)&&"success"===u.type){const e=setTimeout((()=>{d(null)}),3e3);return()=>clearTimeout(e)}}),[u]);const p=(e,n)=>{i((t=>Object.assign(Object.assign({},t),{[e]:n})))},m=(0,l.useCallback)((()=>{}),[]);return(0,a.jsxs)("div",{className:"border border-[#c3c4c7] bg-white rounded-md shadow-sm",children:[(0,a.jsx)("div",{className:"p-4 border-b border-[#c3c4c7] bg-[#f6f7f7]",children:(0,a.jsx)("h3",{className:"text-[#1d2327] font-medium",children:o.name?`${V("Editing template:","wp-coupons-core")} ${o.name}`:V("New template","wp-coupons-core")})}),(0,a.jsxs)("div",{className:"p-4 space-y-4",children:[(0,a.jsxs)("div",{className:"flex items-start space-x-2",children:[(0,a.jsx)(Ca,{id:`default-${o.id}`,checked:o.is_default,onCheckedChange:e=>(e=>{i((n=>Object.assign(Object.assign({},n),{is_default:e})))})(!0===e),className:"border-[#8c8f94] data-[state=checked]:bg-[#2271b1] data-[state=checked]:border-[#2271b1] mt-1",disabled:r}),(0,a.jsx)("div",{className:"space-y-1",children:(0,a.jsx)(_a,{htmlFor:`default-${o.id}`,className:"text-[#1d2327] font-medium",children:V("Default template","wp-coupons-core")})})]}),(0,a.jsxs)("div",{className:"space-y-2",children:[(0,a.jsx)(_a,{htmlFor:`name-${o.id}`,className:"text-[#1d2327] font-medium",children:V("Template name","wp-coupons-core")}),(0,a.jsx)(Xo,{id:`name-${o.id}`,value:o.name,onChange:e=>p("name",e.target.value),className:"border-[#8c8f94] focus:border-[#2271b1] focus:ring-[#2271b1]",placeholder:V("Enter template name","wp-coupons-core"),readOnly:r}),(null==s?void 0:s.name)&&(0,a.jsx)("p",{className:"text-xs text-red-600 mt-1",children:null==s?void 0:s.name})]}),(0,a.jsxs)("div",{className:"space-y-2",children:[(0,a.jsx)(_a,{htmlFor:`recipient-${o.id}`,className:"text-[#1d2327] font-medium",children:V("Additional recipients","wp-coupons-core")}),(0,a.jsx)(Xo,{id:`recipient-${o.id}`,value:o.recipients,onChange:e=>p("recipients",e.target.value),className:"border-[#8c8f94] focus:border-[#2271b1] focus:ring-[#2271b1]",placeholder:"john@doe.com, jane@doe.com",readOnly:r}),(null==s?void 0:s.recipients)&&(0,a.jsx)("p",{className:"text-xs text-red-600 mt-1",children:null==s?void 0:s.recipients}),(0,a.jsx)("p",{className:"text-xs text-[#50575e]",children:V("Comma-separated list of email addresses.","wp-coupons-core")})]}),(0,a.jsxs)("div",{className:"space-y-2",children:[(0,a.jsx)(_a,{htmlFor:`subject-${o.id}`,className:"text-[#1d2327] font-medium",children:V("Email subject","wp-coupons-core")}),(0,a.jsx)(Xo,{id:`subject-${o.id}`,value:o.subject,onChange:e=>p("subject",e.target.value),className:"border-[#8c8f94] focus:border-[#2271b1] focus:ring-[#2271b1]",placeholder:V("Enter message subject","wp-coupons-core"),readOnly:r}),(null==s?void 0:s.subject)&&(0,a.jsx)("p",{className:"text-xs text-red-600 mt-1",children:null==s?void 0:s.subject}),(0,a.jsx)("p",{className:"text-xs text-[#50575e]",children:`${V("You can use placeholders","wp-coupons-core")}: {recipient_name}, {recipient_message}, {recipient_email}, {buyer_name}, {coupon_url}, {coupon_code}, {coupon_value}, {coupon_expiry}, {site_title}, {site_url}, {admin_email}, {current_date}, {site_description}`})]}),(0,a.jsxs)("div",{className:"space-y-2",children:[(0,a.jsx)(_a,{htmlFor:`content-${o.id}`,className:"text-[#1d2327] font-medium",children:V("Email content","wp-coupons-core")}),(0,a.jsx)("div",{className:"border border-[#c3c4c7]",children:(0,a.jsx)(Fa,{id:`content-${o.id}-editor`,initialValue:(null==e?void 0:e.content)||"",onChange:m,editorRef:A,disabled:r})}),(0,a.jsx)("p",{className:"text-xs text-[#50575e]",children:`${V("You can use placeholders","wp-coupons-core")}: {recipient_name}, {recipient_message}, {recipient_email}, {buyer_name}, {coupon_url}, {coupon_code}, {coupon_value}, {coupon_expiry}, {site_title}, {site_url}, {admin_email}, {current_date}, {site_description}`})]}),(0,a.jsxs)("div",{className:"flex items-start space-x-2",children:[(0,a.jsx)(Ca,{id:`enabled-${o.id}`,checked:o.enabled,onCheckedChange:e=>p("enabled",!0===e),className:"border-[#8c8f94] data-[state=checked]:bg-[#2271b1] data-[state=checked]:border-[#2271b1] mt-1",disabled:r}),(0,a.jsx)("div",{className:"space-y-1",children:(0,a.jsx)(_a,{htmlFor:`enabled-${o.id}`,className:"text-[#1d2327] font-medium",children:V("Enable sending email to customer","wp-coupons-core")})})]}),(null==u?void 0:u.visible)&&(0,a.jsx)("p",{className:"text-sm mb-2 text-right "+("success"===u.type?"text-green-600":"text-red-600"),children:u.message}),(0,a.jsxs)("div",{className:"flex justify-end gap-2 pt-2",children:[(0,a.jsx)(Uo,{variant:"outline",className:"border-[#c3c4c7] text-[#2271b1] hover:border-[#8c8f94]",onClick:t,children:V("Cancel","wp-coupons-core")}),(0,a.jsxs)(Uo,{type:"button",className:"bg-[#2271b1] hover:bg-[#135e96] text-white",onClick:e=>{return t=this,r=void 0,l=function*(){e.preventDefault(),d(null);const t=A.current?A.current.getContent():o.content,r=Object.assign(Object.assign({},o),{content:t}),a=(e=>{const n={};if(e.name.trim()||(n.name=V("Template name is required.","wp-coupons-core")),e.subject.trim()||(n.subject=V("Email subject is required.","wp-coupons-core")),e.recipients){const t=e.recipients.split(",").map((e=>e.trim())).filter((e=>e)),r=/^[^\s@]+@[^\s@]+\.[^\s@]+$/,o=/^{{[a-zA-Z0-9_]+}}$/;t.filter((e=>!r.test(e)&&!o.test(e))).length>0&&(n.recipients=V("The 'Email recipient' field contains an invalid email address or placeholder.","wp-coupons-core"))}return n})(r);if(c(a),Object.keys(a).length>0)d({message:V("Please correct the errors in the form.","wp-coupons-core"),type:"error",visible:!0});else{c({});try{yield n(r),d({message:V("Template saved successfully!","wp-coupons-core"),type:"success",visible:!0})}catch(e){d({message:e instanceof Error?e.message:V("An error occurred while saving the template.","wp-coupons-core"),type:"error",visible:!0})}}},new((a=void 0)||(a=Promise))((function(e,n){function o(e){try{s(l.next(e))}catch(e){n(e)}}function i(e){try{s(l.throw(e))}catch(e){n(e)}}function s(n){var t;n.done?e(n.value):(t=n.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,i)}s((l=l.apply(t,r||[])).next())}));var t,r,a,l},disabled:r,style:{opacity:r?.5:1},children:[(0,a.jsx)(sa,{className:"mr-2 h-4 w-4"}),V("Save changes","wp-coupons-core")]})]})]})]})}));var Oa="focusScope.autoFocusOnMount",Ia="focusScope.autoFocusOnUnmount",za={bubbles:!1,cancelable:!0},Ta=l.forwardRef(((e,n)=>{const{loop:t=!1,trapped:r=!1,onMountAutoFocus:o,onUnmountAutoFocus:i,...s}=e,[c,u]=l.useState(null),d=Te(o),f=Te(i),A=l.useRef(null),p=re(n,(e=>u(e))),m=l.useRef({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;l.useEffect((()=>{if(r){let e=function(e){if(m.paused||!c)return;const n=e.target;c.contains(n)?A.current=n:Ma(A.current,{select:!0})},n=function(e){if(m.paused||!c)return;const n=e.relatedTarget;null!==n&&(c.contains(n)||Ma(A.current,{select:!0}))},t=function(e){if(document.activeElement===document.body)for(const n of e)n.removedNodes.length>0&&Ma(c)};document.addEventListener("focusin",e),document.addEventListener("focusout",n);const r=new MutationObserver(t);return c&&r.observe(c,{childList:!0,subtree:!0}),()=>{document.removeEventListener("focusin",e),document.removeEventListener("focusout",n),r.disconnect()}}}),[r,c,m.paused]),l.useEffect((()=>{if(c){Wa.add(m);const e=document.activeElement;if(!c.contains(e)){const n=new CustomEvent(Oa,za);c.addEventListener(Oa,d),c.dispatchEvent(n),n.defaultPrevented||(function(e,{select:n=!1}={}){const t=document.activeElement;for(const r of e)if(Ma(r,{select:n}),document.activeElement!==t)return}(Ra(c).filter((e=>"A"!==e.tagName)),{select:!0}),document.activeElement===e&&Ma(c))}return()=>{c.removeEventListener(Oa,d),setTimeout((()=>{const n=new CustomEvent(Ia,za);c.addEventListener(Ia,f),c.dispatchEvent(n),n.defaultPrevented||Ma(e??document.body,{select:!0}),c.removeEventListener(Ia,f),Wa.remove(m)}),0)}}}),[c,d,f,m]);const h=l.useCallback((e=>{if(!t&&!r)return;if(m.paused)return;const n="Tab"===e.key&&!e.altKey&&!e.ctrlKey&&!e.metaKey,o=document.activeElement;if(n&&o){const n=e.currentTarget,[r,a]=function(e){const n=Ra(e);return[Da(n,e),Da(n.reverse(),e)]}(n);r&&a?e.shiftKey||o!==a?e.shiftKey&&o===r&&(e.preventDefault(),t&&Ma(a,{select:!0})):(e.preventDefault(),t&&Ma(r,{select:!0})):o===n&&e.preventDefault()}}),[t,r,m.paused]);return(0,a.jsx)(ze.div,{tabIndex:-1,...s,ref:p,onKeyDown:h})}));function Ra(e){const n=[],t=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:e=>{const n="INPUT"===e.tagName&&"hidden"===e.type;return e.disabled||e.hidden||n?NodeFilter.FILTER_SKIP:e.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;t.nextNode();)n.push(t.currentNode);return n}function Da(e,n){for(const t of e)if(!La(t,{upTo:n}))return t}function La(e,{upTo:n}){if("hidden"===getComputedStyle(e).visibility)return!0;for(;e;){if(void 0!==n&&e===n)return!1;if("none"===getComputedStyle(e).display)return!0;e=e.parentElement}return!1}function Ma(e,{select:n=!1}={}){if(e&&e.focus){const t=document.activeElement;e.focus({preventScroll:!0}),e!==t&&function(e){return e instanceof HTMLInputElement&&"select"in e}(e)&&n&&e.select()}}Ta.displayName="FocusScope";var Wa=function(){let e=[];return{add(n){const t=e[0];n!==t&&t?.pause(),e=Ua(e,n),e.unshift(n)},remove(n){e=Ua(e,n),e[0]?.resume()}}}();function Ua(e,n){const t=[...e],r=t.indexOf(n);return-1!==r&&t.splice(r,1),t}var $a=0;function Ha(){const e=document.createElement("span");return e.setAttribute("data-radix-focus-guard",""),e.tabIndex=0,e.style.outline="none",e.style.opacity="0",e.style.position="fixed",e.style.pointerEvents="none",e}var qa=function(){return qa=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},qa.apply(this,arguments)};function Va(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var Ya="right-scroll-bar-position",Qa="width-before-scroll-bar";function Xa(e,n){return"function"==typeof e?e(n):e&&(e.current=n),e}var Ga="undefined"!=typeof window?l.useLayoutEffect:l.useEffect,Ka=new WeakMap;function Za(e){return e}var Ja=function(e){void 0===e&&(e={});var n=function(e,n){void 0===n&&(n=Za);var t=[],r=!1;return{read:function(){if(r)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return t.length?t[t.length-1]:e},useMedium:function(e){var o=n(e,r);return t.push(o),function(){t=t.filter((function(e){return e!==o}))}},assignSyncMedium:function(e){for(r=!0;t.length;){var n=t;t=[],n.forEach(e)}t={push:function(n){return e(n)},filter:function(){return t}}},assignMedium:function(e){r=!0;var n=[];if(t.length){var o=t;t=[],o.forEach(e),n=t}var a=function(){var t=n;n=[],t.forEach(e)},l=function(){return Promise.resolve().then(a)};l(),t={push:function(e){n.push(e),l()},filter:function(e){return n=n.filter(e),t}}}}}(null);return n.options=qa({async:!0,ssr:!1},e),n}(),el=function(){},nl=l.forwardRef((function(e,n){var t=l.useRef(null),r=l.useState({onScrollCapture:el,onWheelCapture:el,onTouchMoveCapture:el}),o=r[0],a=r[1],i=e.forwardProps,s=e.children,c=e.className,u=e.removeScrollBar,d=e.enabled,f=e.shards,A=e.sideCar,p=e.noIsolation,m=e.inert,h=e.allowPinchZoom,g=e.as,b=void 0===g?"div":g,y=e.gapMode,v=Va(e,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noIsolation","inert","allowPinchZoom","as","gapMode"]),w=A,x=function(e,n){var t,r,o,a=(t=n||null,r=function(n){return e.forEach((function(e){return Xa(e,n)}))},(o=(0,l.useState)((function(){return{value:t,callback:r,facade:{get current(){return o.value},set current(e){var n=o.value;n!==e&&(o.value=e,o.callback(e,n))}}}}))[0]).callback=r,o.facade);return Ga((function(){var n=Ka.get(a);if(n){var t=new Set(n),r=new Set(e),o=a.current;t.forEach((function(e){r.has(e)||Xa(e,null)})),r.forEach((function(e){t.has(e)||Xa(e,o)}))}Ka.set(a,e)}),[e]),a}([t,n]),E=qa(qa({},v),o);return l.createElement(l.Fragment,null,d&&l.createElement(w,{sideCar:Ja,removeScrollBar:u,shards:f,noIsolation:p,inert:m,setCallbacks:a,allowPinchZoom:!!h,lockRef:t,gapMode:y}),i?l.cloneElement(l.Children.only(s),qa(qa({},E),{ref:x})):l.createElement(b,qa({},E,{className:c,ref:x}),s))}));nl.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1},nl.classNames={fullWidth:Qa,zeroRight:Ya};var tl=function(e){var n=e.sideCar,t=Va(e,["sideCar"]);if(!n)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var r=n.read();if(!r)throw new Error("Sidecar medium not found");return l.createElement(r,qa({},t))};tl.isSideCarExport=!0;var rl=function(){var e=0,n=null;return{add:function(t){var r,a;0==e&&(n=function(){if(!document)return null;var e=document.createElement("style");e.type="text/css";var n=o.nc;return n&&e.setAttribute("nonce",n),e}())&&(a=t,(r=n).styleSheet?r.styleSheet.cssText=a:r.appendChild(document.createTextNode(a)),function(e){(document.head||document.getElementsByTagName("head")[0]).appendChild(e)}(n)),e++},remove:function(){! --e&&n&&(n.parentNode&&n.parentNode.removeChild(n),n=null)}}},ol=function(){var e,n=(e=rl(),function(n,t){l.useEffect((function(){return e.add(n),function(){e.remove()}}),[n&&t])});return function(e){var t=e.styles,r=e.dynamic;return n(t,r),null}},al={left:0,top:0,right:0,gap:0},ll=function(e){return parseInt(e||"",10)||0},il=ol(),sl="data-scroll-locked",cl=function(e,n,t,r){var o=e.left,a=e.top,l=e.right,i=e.gap;return void 0===t&&(t="margin"),"\n  .".concat("with-scroll-bars-hidden"," {\n   overflow: hidden ").concat(r,";\n   padding-right: ").concat(i,"px ").concat(r,";\n  }\n  body[").concat(sl,"] {\n    overflow: hidden ").concat(r,";\n    overscroll-behavior: contain;\n    ").concat([n&&"position: relative ".concat(r,";"),"margin"===t&&"\n    padding-left: ".concat(o,"px;\n    padding-top: ").concat(a,"px;\n    padding-right: ").concat(l,"px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(i,"px ").concat(r,";\n    "),"padding"===t&&"padding-right: ".concat(i,"px ").concat(r,";")].filter(Boolean).join(""),"\n  }\n  \n  .").concat(Ya," {\n    right: ").concat(i,"px ").concat(r,";\n  }\n  \n  .").concat(Qa," {\n    margin-right: ").concat(i,"px ").concat(r,";\n  }\n  \n  .").concat(Ya," .").concat(Ya," {\n    right: 0 ").concat(r,";\n  }\n  \n  .").concat(Qa," .").concat(Qa," {\n    margin-right: 0 ").concat(r,";\n  }\n  \n  body[").concat(sl,"] {\n    ").concat("--removed-body-scroll-bar-size",": ").concat(i,"px;\n  }\n")},ul=function(){var e=parseInt(document.body.getAttribute(sl)||"0",10);return isFinite(e)?e:0},dl=function(e){var n=e.noRelative,t=e.noImportant,r=e.gapMode,o=void 0===r?"margin":r;l.useEffect((function(){return document.body.setAttribute(sl,(ul()+1).toString()),function(){var e=ul()-1;e<=0?document.body.removeAttribute(sl):document.body.setAttribute(sl,e.toString())}}),[]);var a=l.useMemo((function(){return function(e){if(void 0===e&&(e="margin"),"undefined"==typeof window)return al;var n=function(e){var n=window.getComputedStyle(document.body),t=n["padding"===e?"paddingLeft":"marginLeft"],r=n["padding"===e?"paddingTop":"marginTop"],o=n["padding"===e?"paddingRight":"marginRight"];return[ll(t),ll(r),ll(o)]}(e),t=document.documentElement.clientWidth,r=window.innerWidth;return{left:n[0],top:n[1],right:n[2],gap:Math.max(0,r-t+n[2]-n[0])}}(o)}),[o]);return l.createElement(il,{styles:cl(a,!n,o,t?"":"!important")})},fl=!1;if("undefined"!=typeof window)try{var Al=Object.defineProperty({},"passive",{get:function(){return fl=!0,!0}});window.addEventListener("test",Al,Al),window.removeEventListener("test",Al,Al)}catch(e){fl=!1}var pl=!!fl&&{passive:!1},ml=function(e,n){if(!(e instanceof Element))return!1;var t=window.getComputedStyle(e);return"hidden"!==t[n]&&!(t.overflowY===t.overflowX&&!function(e){return"TEXTAREA"===e.tagName}(e)&&"visible"===t[n])},hl=function(e,n){var t=n.ownerDocument,r=n;do{if("undefined"!=typeof ShadowRoot&&r instanceof ShadowRoot&&(r=r.host),gl(e,r)){var o=bl(e,r);if(o[1]>o[2])return!0}r=r.parentNode}while(r&&r!==t.body);return!1},gl=function(e,n){return"v"===e?function(e){return ml(e,"overflowY")}(n):function(e){return ml(e,"overflowX")}(n)},bl=function(e,n){return"v"===e?[(t=n).scrollTop,t.scrollHeight,t.clientHeight]:function(e){return[e.scrollLeft,e.scrollWidth,e.clientWidth]}(n);var t},yl=function(e){return"changedTouches"in e?[e.changedTouches[0].clientX,e.changedTouches[0].clientY]:[0,0]},vl=function(e){return[e.deltaX,e.deltaY]},wl=function(e){return e&&"current"in e?e.current:e},xl=function(e){return"\n  .block-interactivity-".concat(e," {pointer-events: none;}\n  .allow-interactivity-").concat(e," {pointer-events: all;}\n")},El=0,kl=[];function Bl(e){for(var n=null;null!==e;)e instanceof ShadowRoot&&(n=e.host,e=e.host),e=e.parentNode;return n}const Cl=(Sl=function(e){var n=l.useRef([]),t=l.useRef([0,0]),r=l.useRef(),o=l.useState(El++)[0],a=l.useState(ol)[0],i=l.useRef(e);l.useEffect((function(){i.current=e}),[e]),l.useEffect((function(){if(e.inert){document.body.classList.add("block-interactivity-".concat(o));var n=function(e,n,t){if(t||2===arguments.length)for(var r,o=0,a=n.length;o<a;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return e.concat(r||Array.prototype.slice.call(n))}([e.lockRef.current],(e.shards||[]).map(wl),!0).filter(Boolean);return n.forEach((function(e){return e.classList.add("allow-interactivity-".concat(o))})),function(){document.body.classList.remove("block-interactivity-".concat(o)),n.forEach((function(e){return e.classList.remove("allow-interactivity-".concat(o))}))}}}),[e.inert,e.lockRef.current,e.shards]);var s=l.useCallback((function(e,n){if("touches"in e&&2===e.touches.length||"wheel"===e.type&&e.ctrlKey)return!i.current.allowPinchZoom;var o,a=yl(e),l=t.current,s="deltaX"in e?e.deltaX:l[0]-a[0],c="deltaY"in e?e.deltaY:l[1]-a[1],u=e.target,d=Math.abs(s)>Math.abs(c)?"h":"v";if("touches"in e&&"h"===d&&"range"===u.type)return!1;var f=hl(d,u);if(!f)return!0;if(f?o=d:(o="v"===d?"h":"v",f=hl(d,u)),!f)return!1;if(!r.current&&"changedTouches"in e&&(s||c)&&(r.current=o),!o)return!0;var A=r.current||o;return function(e,n,t,r){var o=function(e,n){return"h"===e&&"rtl"===n?-1:1}(e,window.getComputedStyle(n).direction),a=o*r,l=t.target,i=n.contains(l),s=!1,c=a>0,u=0,d=0;do{var f=bl(e,l),A=f[0],p=f[1]-f[2]-o*A;(A||p)&&gl(e,l)&&(u+=p,d+=A),l=l instanceof ShadowRoot?l.host:l.parentNode}while(!i&&l!==document.body||i&&(n.contains(l)||n===l));return(c&&(Math.abs(u)<1||!1)||!c&&(Math.abs(d)<1||!1))&&(s=!0),s}(A,n,e,"h"===A?s:c)}),[]),c=l.useCallback((function(e){var t=e;if(kl.length&&kl[kl.length-1]===a){var r="deltaY"in t?vl(t):yl(t),o=n.current.filter((function(e){return e.name===t.type&&(e.target===t.target||t.target===e.shadowParent)&&(n=e.delta,o=r,n[0]===o[0]&&n[1]===o[1]);var n,o}))[0];if(o&&o.should)t.cancelable&&t.preventDefault();else if(!o){var l=(i.current.shards||[]).map(wl).filter(Boolean).filter((function(e){return e.contains(t.target)}));(l.length>0?s(t,l[0]):!i.current.noIsolation)&&t.cancelable&&t.preventDefault()}}}),[]),u=l.useCallback((function(e,t,r,o){var a={name:e,delta:t,target:r,should:o,shadowParent:Bl(r)};n.current.push(a),setTimeout((function(){n.current=n.current.filter((function(e){return e!==a}))}),1)}),[]),d=l.useCallback((function(e){t.current=yl(e),r.current=void 0}),[]),f=l.useCallback((function(n){u(n.type,vl(n),n.target,s(n,e.lockRef.current))}),[]),A=l.useCallback((function(n){u(n.type,yl(n),n.target,s(n,e.lockRef.current))}),[]);l.useEffect((function(){return kl.push(a),e.setCallbacks({onScrollCapture:f,onWheelCapture:f,onTouchMoveCapture:A}),document.addEventListener("wheel",c,pl),document.addEventListener("touchmove",c,pl),document.addEventListener("touchstart",d,pl),function(){kl=kl.filter((function(e){return e!==a})),document.removeEventListener("wheel",c,pl),document.removeEventListener("touchmove",c,pl),document.removeEventListener("touchstart",d,pl)}}),[]);var p=e.removeScrollBar,m=e.inert;return l.createElement(l.Fragment,null,m?l.createElement(a,{styles:xl(o)}):null,p?l.createElement(dl,{gapMode:e.gapMode}):null)},Ja.useMedium(Sl),tl);var Sl,Nl=l.forwardRef((function(e,n){return l.createElement(nl,qa({},e,{ref:n,sideCar:Cl}))}));Nl.classNames=nl.classNames;const jl=Nl;var _l=new WeakMap,Fl=new WeakMap,Pl={},Ol=0,Il=function(e){return e&&(e.host||Il(e.parentNode))},zl=function(e,n,t){void 0===t&&(t="data-aria-hidden");var r=Array.from(Array.isArray(e)?e:[e]),o=n||function(e){return"undefined"==typeof document?null:(Array.isArray(e)?e[0]:e).ownerDocument.body}(e);return o?(r.push.apply(r,Array.from(o.querySelectorAll("[aria-live]"))),function(e,n,t,r){var o=function(e,n){return n.map((function(n){if(e.contains(n))return n;var t=Il(n);return t&&e.contains(t)?t:(console.error("aria-hidden",n,"in not contained inside",e,". Doing nothing"),null)})).filter((function(e){return Boolean(e)}))}(n,Array.isArray(e)?e:[e]);Pl[t]||(Pl[t]=new WeakMap);var a=Pl[t],l=[],i=new Set,s=new Set(o),c=function(e){e&&!i.has(e)&&(i.add(e),c(e.parentNode))};o.forEach(c);var u=function(e){e&&!s.has(e)&&Array.prototype.forEach.call(e.children,(function(e){if(i.has(e))u(e);else try{var n=e.getAttribute(r),o=null!==n&&"false"!==n,s=(_l.get(e)||0)+1,c=(a.get(e)||0)+1;_l.set(e,s),a.set(e,c),l.push(e),1===s&&o&&Fl.set(e,!0),1===c&&e.setAttribute(t,"true"),o||e.setAttribute(r,"true")}catch(n){console.error("aria-hidden: cannot operate on ",e,n)}}))};return u(n),i.clear(),Ol++,function(){l.forEach((function(e){var n=_l.get(e)-1,o=a.get(e)-1;_l.set(e,n),a.set(e,o),n||(Fl.has(e)||e.removeAttribute(r),Fl.delete(e)),o||e.removeAttribute(t)})),--Ol||(_l=new WeakMap,_l=new WeakMap,Fl=new WeakMap,Pl={})}}(r,o,t,"aria-hidden")):function(){return null}},Tl="Dialog",[Rl,Dl]=Pe(Tl),[Ll,Ml]=Rl(Tl),Wl=e=>{const{__scopeDialog:n,children:t,open:r,defaultOpen:o,onOpenChange:i,modal:s=!0}=e,c=l.useRef(null),u=l.useRef(null),[d,f]=Gt({prop:r,defaultProp:o??!1,onChange:i,caller:Tl});return(0,a.jsx)(Ll,{scope:n,triggerRef:c,contentRef:u,contentId:Ve(),titleId:Ve(),descriptionId:Ve(),open:d,onOpenChange:f,onOpenToggle:l.useCallback((()=>f((e=>!e))),[f]),modal:s,children:t})};Wl.displayName=Tl;var Ul="DialogTrigger";l.forwardRef(((e,n)=>{const{__scopeDialog:t,...r}=e,o=Ml(Ul,t),l=re(n,o.triggerRef);return(0,a.jsx)(ze.button,{type:"button","aria-haspopup":"dialog","aria-expanded":o.open,"aria-controls":o.contentId,"data-state":si(o.open),...r,ref:l,onClick:Fe(e.onClick,o.onOpenToggle)})})).displayName=Ul;var $l="DialogPortal",[Hl,ql]=Rl($l,{forceMount:void 0}),Vl=e=>{const{__scopeDialog:n,forceMount:t,children:r,container:o}=e,i=Ml($l,n);return(0,a.jsx)(Hl,{scope:n,forceMount:t,children:l.Children.map(r,(e=>(0,a.jsx)(Yt,{present:t||i.open,children:(0,a.jsx)(Vt,{asChild:!0,container:o,children:e})})))})};Vl.displayName=$l;var Yl="DialogOverlay",Ql=l.forwardRef(((e,n)=>{const t=ql(Yl,e.__scopeDialog),{forceMount:r=t.forceMount,...o}=e,l=Ml(Yl,e.__scopeDialog);return l.modal?(0,a.jsx)(Yt,{present:r||l.open,children:(0,a.jsx)(Gl,{...o,ref:n})}):null}));Ql.displayName=Yl;var Xl=oe("DialogOverlay.RemoveScroll"),Gl=l.forwardRef(((e,n)=>{const{__scopeDialog:t,...r}=e,o=Ml(Yl,t);return(0,a.jsx)(jl,{as:Xl,allowPinchZoom:!0,shards:[o.contentRef],children:(0,a.jsx)(ze.div,{"data-state":si(o.open),...r,ref:n,style:{pointerEvents:"auto",...r.style}})})})),Kl="DialogContent",Zl=l.forwardRef(((e,n)=>{const t=ql(Kl,e.__scopeDialog),{forceMount:r=t.forceMount,...o}=e,l=Ml(Kl,e.__scopeDialog);return(0,a.jsx)(Yt,{present:r||l.open,children:l.modal?(0,a.jsx)(Jl,{...o,ref:n}):(0,a.jsx)(ei,{...o,ref:n})})}));Zl.displayName=Kl;var Jl=l.forwardRef(((e,n)=>{const t=Ml(Kl,e.__scopeDialog),r=l.useRef(null),o=re(n,t.contentRef,r);return l.useEffect((()=>{const e=r.current;if(e)return zl(e)}),[]),(0,a.jsx)(ni,{...e,ref:o,trapFocus:t.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:Fe(e.onCloseAutoFocus,(e=>{e.preventDefault(),t.triggerRef.current?.focus()})),onPointerDownOutside:Fe(e.onPointerDownOutside,(e=>{const n=e.detail.originalEvent,t=0===n.button&&!0===n.ctrlKey;(2===n.button||t)&&e.preventDefault()})),onFocusOutside:Fe(e.onFocusOutside,(e=>e.preventDefault()))})})),ei=l.forwardRef(((e,n)=>{const t=Ml(Kl,e.__scopeDialog),r=l.useRef(!1),o=l.useRef(!1);return(0,a.jsx)(ni,{...e,ref:n,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:n=>{e.onCloseAutoFocus?.(n),n.defaultPrevented||(r.current||t.triggerRef.current?.focus(),n.preventDefault()),r.current=!1,o.current=!1},onInteractOutside:n=>{e.onInteractOutside?.(n),n.defaultPrevented||(r.current=!0,"pointerdown"===n.detail.originalEvent.type&&(o.current=!0));const a=n.target,l=t.triggerRef.current?.contains(a);l&&n.preventDefault(),"focusin"===n.detail.originalEvent.type&&o.current&&n.preventDefault()}})})),ni=l.forwardRef(((e,n)=>{const{__scopeDialog:t,trapFocus:r,onOpenAutoFocus:o,onCloseAutoFocus:i,...s}=e,c=Ml(Kl,t),u=l.useRef(null),d=re(n,u);return l.useEffect((()=>{const e=document.querySelectorAll("[data-radix-focus-guard]");return document.body.insertAdjacentElement("afterbegin",e[0]??Ha()),document.body.insertAdjacentElement("beforeend",e[1]??Ha()),$a++,()=>{1===$a&&document.querySelectorAll("[data-radix-focus-guard]").forEach((e=>e.remove())),$a--}}),[]),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(Ta,{asChild:!0,loop:!0,trapped:r,onMountAutoFocus:o,onUnmountAutoFocus:i,children:(0,a.jsx)(Me,{role:"dialog",id:c.contentId,"aria-describedby":c.descriptionId,"aria-labelledby":c.titleId,"data-state":si(c.open),...s,ref:d,onDismiss:()=>c.onOpenChange(!1)})}),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(fi,{titleId:c.titleId}),(0,a.jsx)(Ai,{contentRef:u,descriptionId:c.descriptionId})]})]})})),ti="DialogTitle",ri=l.forwardRef(((e,n)=>{const{__scopeDialog:t,...r}=e,o=Ml(ti,t);return(0,a.jsx)(ze.h2,{id:o.titleId,...r,ref:n})}));ri.displayName=ti;var oi="DialogDescription",ai=l.forwardRef(((e,n)=>{const{__scopeDialog:t,...r}=e,o=Ml(oi,t);return(0,a.jsx)(ze.p,{id:o.descriptionId,...r,ref:n})}));ai.displayName=oi;var li="DialogClose",ii=l.forwardRef(((e,n)=>{const{__scopeDialog:t,...r}=e,o=Ml(li,t);return(0,a.jsx)(ze.button,{type:"button",...r,ref:n,onClick:Fe(e.onClick,(()=>o.onOpenChange(!1)))})}));function si(e){return e?"open":"closed"}ii.displayName=li;var ci="DialogTitleWarning",[ui,di]=function(e,n){const t=l.createContext(n),r=e=>{const{children:n,...r}=e,o=l.useMemo((()=>r),Object.values(r));return(0,a.jsx)(t.Provider,{value:o,children:n})};return r.displayName=e+"Provider",[r,function(r){const o=l.useContext(t);if(o)return o;if(void 0!==n)return n;throw new Error(`\`${r}\` must be used within \`${e}\``)}]}(ci,{contentName:Kl,titleName:ti,docsSlug:"dialog"}),fi=({titleId:e})=>{const n=di(ci),t=`\`${n.contentName}\` requires a \`${n.titleName}\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \`${n.titleName}\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${n.docsSlug}`;return l.useEffect((()=>{e&&(document.getElementById(e)||console.error(t))}),[t,e]),null},Ai=({contentRef:e,descriptionId:n})=>{const t=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${di("DialogDescriptionWarning").contentName}}.`;return l.useEffect((()=>{const r=e.current?.getAttribute("aria-describedby");n&&r&&(document.getElementById(n)||console.warn(t))}),[t,e,n]),null},pi=Wl,mi=Vl,hi=Ql,gi=Zl,bi=ri,yi=ai,vi=ii;const wi=Z("x",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]);var xi=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t};const Ei=pi,ki=mi,Bi=vi,Ci=l.forwardRef(((e,n)=>{var{className:t}=e,r=xi(e,["className"]);return(0,a.jsx)(hi,Object.assign({ref:n,className:Mo("fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",t)},r))}));Ci.displayName=hi.displayName;const Si=l.forwardRef(((e,n)=>{var{className:t,children:r}=e,o=xi(e,["className","children"]);return(0,a.jsxs)(ki,{children:[(0,a.jsx)(Ci,{}),(0,a.jsxs)(gi,Object.assign({ref:n,className:Mo("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",t)},o,{children:[r,(0,a.jsxs)(vi,{className:"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground",children:[(0,a.jsx)(wi,{className:"h-4 w-4"}),(0,a.jsx)("span",{className:"sr-only",children:"Close"})]})]}))]})}));Si.displayName=gi.displayName;const Ni=e=>{var{className:n}=e,t=xi(e,["className"]);return(0,a.jsx)("div",Object.assign({className:Mo("flex flex-col space-y-1.5 text-center sm:text-left",n)},t))};Ni.displayName="DialogHeader";const ji=e=>{var{className:n}=e,t=xi(e,["className"]);return(0,a.jsx)("div",Object.assign({className:Mo("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",n)},t))};ji.displayName="DialogFooter";const _i=l.forwardRef(((e,n)=>{var{className:t}=e,r=xi(e,["className"]);return(0,a.jsx)(bi,Object.assign({ref:n,className:Mo("text-lg font-semibold leading-none tracking-tight",t)},r))}));_i.displayName=bi.displayName;const Fi=l.forwardRef(((e,n)=>{var{className:t}=e,r=xi(e,["className"]);return(0,a.jsx)(yi,Object.assign({ref:n,className:Mo("text-sm text-muted-foreground",t)},r))}));function Pi({isOpen:e,templateName:n,onConfirm:t,onClose:r}){return(0,a.jsx)(Ei,{open:e,onOpenChange:r,children:(0,a.jsxs)(Si,{className:"bg-white border border-[#c3c4c7] shadow-md",children:[(0,a.jsxs)(Ni,{children:[(0,a.jsx)(_i,{className:"text-[#1d2327]",children:V("Confirm deletion","wp-coupons-core")}),(0,a.jsx)(Fi,{className:"text-[#50575e]",children:V('Are you sure you want to delete the template "%s"? This action cannot be undone.',"wp-coupons-core").replace("%s",n||V("Untitled","wp-coupons-core"))})]}),(0,a.jsxs)(ji,{className:"gap-2",children:[(0,a.jsx)(Bi,{asChild:!0,children:(0,a.jsx)(Uo,{variant:"outline",className:"border-[#c3c4c7] text-[#2271b1] hover:border-[#8c8f94]",children:V("Cancel","wp-coupons-core")})}),(0,a.jsx)(Uo,{className:"bg-[#d63638] hover:bg-[#b32d2e] text-white",onClick:e=>{e.preventDefault(),t()},children:V("Delete","wp-coupons-core")})]})]})})}Fi.displayName=yi.displayName;var Oi=function(e,n,t,r){return new(t||(t=Promise))((function(o,a){function l(e){try{s(r.next(e))}catch(e){a(e)}}function i(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,i)}s((r=r.apply(e,n||[])).next())}))};const Ii=[];var zi=o(218),Ti={};Ti.styleTagTransform=ve(),Ti.setAttributes=he(),Ti.insert=pe().bind(null,"head"),Ti.domAPI=fe(),Ti.insertStyleElement=be(),ue()(zi.A,Ti),zi.A&&zi.A.locals&&zi.A.locals;const Ri=document.getElementById("coupon_code_list");Ri&&s.createRoot(Ri).render((0,a.jsx)(l.StrictMode,{children:(0,a.jsx)((function(){const[e,n]=(0,l.useState)([]),[t,r]=(0,l.useState)(!0),[o,i]=(0,l.useState)(null),[s,c]=(0,l.useState)(null),u=(0,l.useRef)(null);(0,l.useEffect)((()=>{(()=>{Dr(this,void 0,void 0,(function*(){if(fcCodeImport.enabled)try{const e=new FormData;e.append("action","fcci_fetch_files"),e.append("nonce",fcCodeImport.nonce);const t=yield fetch(fcCodeImport.ajaxurl,{method:"POST",body:e}),r=yield t.json();if(r.success){const e=r.data.map((e=>Object.assign(Object.assign({},e),{uploadDate:new Date(e.uploadDate)})));n(e)}else i(r.data||"Failed to fetch files.")}catch(e){i(e.message||"An error occurred while fetching files.")}finally{r(!1)}else r(!1)}))})()}),[]);const d=t=>Dr(this,void 0,void 0,(function*(){try{const r=new FormData;r.append("action","fcci_delete_file"),r.append("nonce",fcCodeImport.nonce),r.append("id",t);const o=yield fetch(fcCodeImport.ajaxurl,{method:"POST",body:r}),a=yield o.json();a.success?n(e.filter((e=>e.id!==t))):console.error("File deletion failed:",a.data)}catch(e){console.error("Error deleting file:",e)}}));return(0,a.jsx)("div",{className:"fc-file-upload-container",children:(0,a.jsx)(je,{className:"fc-file-upload-card",children:(0,a.jsxs)(_e,{className:"fc-file-upload-card-content",children:[(0,a.jsx)("div",{className:"fc-file-upload-header",children:(0,a.jsxs)("div",{className:"fc-file-upload-controls",children:[(0,a.jsxs)("label",{htmlFor:"file-upload",className:"fc-file-upload-label "+(fcCodeImport.enabled?"":"fc-file-upload-disabled"),children:[(0,a.jsx)(J,{}),V("Add New File","wp-coupons-core")]}),(0,a.jsx)("input",{id:"file-upload",type:"file",className:"fc-file-upload-input-hidden",onChange:e=>{e.target.files&&e.target.files.length>0&&Array.from(e.target.files).forEach((e=>{const t=new FileReader;t.onload=t=>{var r;if(null===(r=t.target)||void 0===r?void 0:r.result){const t=new FormData;t.append("action","fcci_upload_file"),t.append("nonce",fcCodeImport.nonce),t.append("file",e),fetch(fcCodeImport.ajaxurl,{method:"POST",body:t}).then((e=>e.json())).then((t=>{if(t.success){const r={id:t.data.id,name:e.name,uploadDate:new Date,totalRecords:t.data.totalRecords,usedRecords:t.data.usedRecords};n((e=>[...e,r]))}else console.error("File upload failed:",t.data)})).catch((e=>{console.error("Error uploading file:",e)}))}},t.onerror=e=>{var n;console.error("Error reading file:",null===(n=e.target)||void 0===n?void 0:n.error)},t.readAsDataURL(e)}))},multiple:!0,disabled:!fcCodeImport.enabled}),(0,a.jsx)("input",{ref:u,type:"file",className:"fc-file-upload-input-hidden",onChange:e=>Dr(this,void 0,void 0,(function*(){if(e.target.files&&e.target.files.length>0&&s){const t=e.target.files[0],r=new FormData;r.append("action","fcci_overwrite_file"),r.append("nonce",fcCodeImport.nonce),r.append("id",s.id),r.append("file",t);try{const e=yield fetch(fcCodeImport.ajaxurl,{method:"POST",body:r}),t=yield e.json();t.success?n((e=>e.map((e=>e.id===s.id?Object.assign(Object.assign({},e),{uploadDate:new Date(t.data.uploadDate),totalRecords:t.data.totalRecords,usedRecords:t.data.usedRecords}):e)))):console.error("File overwrite failed:",t.data)}catch(e){console.error("Error overwriting file:",e)}finally{c(null),e.target.value=""}}}))}),(0,a.jsx)("span",{className:"fc-file-upload-info-text",children:V("Upload files to your dashboard","wp-coupons-core")})]})}),(0,a.jsx)("div",{className:"fc-file-upload-table-container",children:(0,a.jsxs)("table",{className:"fc-file-upload-table",children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:V("File Name","wp-coupons-core")}),(0,a.jsx)("th",{children:V("Upload Date","wp-coupons-core")}),(0,a.jsx)("th",{children:V("Records Used","wp-coupons-core")}),(0,a.jsx)("th",{children:V("Actions","wp-coupons-core")})]})}),(0,a.jsxs)("tbody",{children:[t&&(0,a.jsx)("tr",{children:(0,a.jsx)("td",{colSpan:4,className:"text-center",children:V("Loading files…","wp-coupons-core")})}),o&&(0,a.jsx)("tr",{children:(0,a.jsx)("td",{colSpan:4,className:"text-center",style:{color:"red"},children:o})}),t||o||0!==e.length?e.map((e=>(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{className:"file-name-cell",children:e.name}),(0,a.jsx)("td",{className:"upload-date-cell",children:e.uploadDate.toLocaleDateString()}),(0,a.jsx)("td",{className:"records-used-cell",children:(0,a.jsxs)("div",{className:"records-used-content",children:[(0,a.jsxs)("span",{className:"records-used-text "+(e.usedRecords===e.totalRecords?"records-used-text-full":e.usedRecords>0?"records-used-text-partial":"records-used-text-none"),children:[e.usedRecords,"/",e.totalRecords]}),e.usedRecords===e.totalRecords&&(0,a.jsx)("span",{className:"records-used-badge",children:V("Used","wp-coupons-core")})]})}),(0,a.jsx)("td",{className:"actions-cell",children:(0,a.jsxs)("div",{className:"actions-content",children:[(0,a.jsx)(Pr,{children:(0,a.jsxs)(Or,{children:[(0,a.jsx)(Ir,{asChild:!0,children:(0,a.jsxs)(ke,{variant:"ghost",size:"sm",onClick:n=>((e,n)=>{var t;e.preventDefault(),c(n),null===(t=u.current)||void 0===t||t.click()})(n,e),className:"action-button",children:[(0,a.jsx)(ee,{}),V("Overwrite","wp-coupons-core")]})}),(0,a.jsx)(zr,{className:"fc-file-upload-tooltip-content",children:(0,a.jsx)("p",{children:V("Replace this file with a new version. This will add any new records to the existing ones in database.","wp-coupons-core")})})]})}),(0,a.jsxs)(ke,{variant:"ghost",size:"sm",onClick:n=>{n.preventDefault(),d(e.id)},className:"action-button",children:[(0,a.jsx)(ne,{}),V("Delete","wp-coupons-core")]})]})})]},e.id))):(0,a.jsx)("tr",{children:(0,a.jsx)("td",{colSpan:4,className:"text-center",children:V("No files uploaded yet.","wp-coupons-core")})})]})]})})]})})})}),{})}));const Di=document.getElementById("coupon_email_templates_list");Di&&s.createRoot(Di).render((0,a.jsx)(l.StrictMode,{children:(0,a.jsx)((function(){const e=!fcSendingSettings.enabled,[n,t]=(0,l.useState)(""),[r,o]=(0,l.useState)(null),[i,s]=(0,l.useState)({}),[c,u]=(0,l.useState)(Ii),[d,f]=(0,l.useState)(null),[A,p]=(0,l.useState)(null);(0,l.useEffect)((()=>{m()}),[]);const m=()=>Oi(this,void 0,void 0,(function*(){try{const e=yield Lr(void 0,void 0,void 0,(function*(){const e=yield fetch(fcSendingSettings.ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"fc_email_template_get_all",nonce:fcSendingSettings.nonce})});if(!e.ok)throw new Error(V("Failed to fetch templates","wp-coupons-core"));return(yield e.json()).data||[]}));u(e)}catch(e){f({message:e instanceof Error?e.message:V("Failed to load templates.","wp-coupons-core"),type:"error",visible:!0})}})),h=c.filter((e=>e.name.toLowerCase().includes(n.toLowerCase()))),g=e=>{if(r===e)o(null);else{o(e);const n=c.find((n=>n.id===e));n&&s(Object.assign(Object.assign({},i),{[e]:Object.assign({},n)}))}},b=e=>Oi(this,void 0,void 0,(function*(){const n=(e=>{const n={};if(e.name.trim()||(n.name=V("Template name is required.","wp-coupons-core")),e.subject.trim()||(n.subject=V("Email subject is required.","wp-coupons-core")),e.recipients){const t=e.recipients.split(",").map((e=>e.trim())).filter((e=>e)),r=/^[^\s@]+@[^\s@]+\.[^\s@]+$/,o=/^{{[a-zA-Z0-9_]+}}$/;t.filter((e=>!r.test(e)&&!o.test(e))).length>0&&(n.recipients=V("The 'Email recipient' field contains an invalid email address or placeholder.","wp-coupons-core"))}return n})(e);var t;if(!(Object.keys(n).length>0))try{let n;if(e.id<0){const{id:r}=e,o=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(t[r[o]]=e[r[o]])}return t}(e,["id"]);n=yield(t=o,Lr(void 0,void 0,void 0,(function*(){var e;const n=yield fetch(fcSendingSettings.ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"fc_email_template_create",nonce:fcSendingSettings.nonce,name:t.name||"",subject:t.subject||"",recipients:t.recipients||"",content:t.content||"",enabled:(null!==(e=t.enabled)&&void 0!==e&&e).toString(),is_default:t.is_default.toString()})});if(!n.ok)throw new Error(V("Failed to create template","wp-coupons-core"));const r=yield n.json();if(!r.success||!r.data||void 0===r.data.id)throw new Error(V("Invalid response from create API","wp-coupons-core"));return r.data})))}else n=yield(e=>Lr(void 0,void 0,void 0,(function*(){var n;const t=yield fetch(fcSendingSettings.ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"fc_email_template_update",nonce:fcSendingSettings.nonce,id:e.id.toString(),name:e.name||"",subject:e.subject||"",recipients:e.recipients||"",content:e.content||"",enabled:(null!==(n=e.enabled)&&void 0!==n&&n).toString(),is_default:e.is_default.toString()})});if(!t.ok)throw new Error(V("Failed to update template","wp-coupons-core"));const r=yield t.json();if(!r.success||!r.data||void 0===r.data.id)throw new Error(r.data||V("Invalid response from update API","wp-coupons-core"));return r.data})))(e);return u((t=>{let r=[...t];const o=e.id<0?e.id:n.id,a=r.findIndex((e=>e.id===o));return a>-1&&(r[a]=n),n.is_default&&(r=r.map((e=>e.id===n.id?e:Object.assign(Object.assign({},e),{is_default:!1})))),r})),s((t=>{const r=Object.assign({},t);return e.id<0?(delete r[e.id],r[n.id]=n):r[e.id]=n,n.is_default&&Object.keys(r).forEach((e=>{const t=Number(e);t!==n.id&&(r[t]=Object.assign(Object.assign({},r[t]),{is_default:!1}))})),r})),void(r===e.id?o(n.id):o(null))}catch(e){throw console.error("Error saving template:",e),e}})),y=e=>{p(e)};return(0,a.jsx)("div",{className:"wp-admin",children:(0,a.jsxs)("div",{className:"flex flex-col space-y-6 bg-[#f0f0f1]",children:[(0,a.jsxs)("div",{className:"flex justify-between items-center",children:[(0,a.jsx)("h2",{children:V("Email Templates","wp-coupons-core")}),(0,a.jsxs)(Uo,{className:"bg-[#2271b1] hover:bg-[#135e96] text-white",onClick:e=>{e.preventDefault(),(()=>{const e=-Date.now(),n={id:e,name:"",subject:"",recipients:"",content:"",enabled:!0,is_default:!1},t=[n,...c];u(t),s(Object.assign(Object.assign({},i),{[e]:Object.assign({},n)})),o(e)})()},disabled:e,style:{opacity:e?.5:1},children:[(0,a.jsx)(Mr,{className:"mr-2 h-4 w-4"}),V("Add new","wp-coupons-core")]})]}),(null==d?void 0:d.visible)&&(0,a.jsxs)("div",{className:`p-3 my-3 rounded-md border ${"success"===d.type?"bg-green-50 border-green-300 text-green-700":"bg-red-50 border-red-300 text-red-700"} relative`,children:[(0,a.jsx)("span",{children:d.message}),(0,a.jsx)("button",{onClick:()=>f((e=>e?Object.assign(Object.assign({},e),{visible:!1}):null)),className:"absolute top-1 right-2 text-lg","aria-label":V("Close","wp-coupons-core"),children:"×"})]}),(0,a.jsxs)(Ho,{className:"border-[#c3c4c7] shadow-sm",children:[(0,a.jsxs)(qo,{className:"bg-white border-b border-[#c3c4c7] pb-4",children:[(0,a.jsxs)("div",{className:"flex justify-between items-center",children:[(0,a.jsx)(Vo,{className:"text-lg font-medium text-[#1d2327]"}),(0,a.jsxs)("div",{className:"relative w-64",children:[(0,a.jsx)(Wr,{className:"absolute left-2 top-2.5 h-4 w-4 text-[#8c8f94]"}),(0,a.jsx)(Xo,{placeholder:V("Search templates…","wp-coupons-core"),className:"pl-8 border-[#8c8f94] focus:border-[#2271b1] focus:ring-[#2271b1]",value:n,onChange:e=>t(e.target.value)})]})]}),(0,a.jsx)(Yo,{className:"text-[#50575e]",children:V("Manage email templates that will be sent after purchasing PDF Coupon product.","wp-coupons-core")})]}),(0,a.jsx)(Qo,{className:"p-0",children:(0,a.jsxs)(Ko,{children:[(0,a.jsx)(Zo,{children:(0,a.jsxs)(ea,{className:"bg-[#f6f7f7] border-b border-[#c3c4c7]",children:[(0,a.jsx)(na,{className:"font-medium text-[#1d2327] text-center w-16",children:V("Default template","wp-coupons-core")}),(0,a.jsx)(na,{className:"font-medium text-[#1d2327]",children:V("Template name","wp-coupons-core")}),(0,a.jsx)(na,{className:"font-medium text-[#1d2327]",children:V("Subject","wp-coupons-core")}),(0,a.jsx)(na,{className:"font-medium text-[#1d2327] text-right",children:V("Actions","wp-coupons-core")})]})}),(0,a.jsx)(Jo,{children:h.length>0?h.map((n=>(0,a.jsxs)(l.Fragment,{children:[(0,a.jsx)(ia,{template:n,isExpanded:r===n.id,onToggleExpand:g,onDeleteInitiate:y,isDisabled:e,isLastTemplate:1===h.length}),r===n.id&&i[n.id]&&(0,a.jsx)(ea,{className:"bg-[#f6f7f7}",children:(0,a.jsx)(ta,{colSpan:4,className:"p-4",children:(0,a.jsx)(Pa,{initialData:i[n.id],onSave:b,onCancel:()=>o(null),isDisabled:e})})})]},n.id))):(0,a.jsx)(ea,{children:(0,a.jsx)(ta,{colSpan:4,className:"text-center py-6 text-[#50575e]",children:V("No templates found matching the search criteria.","wp-coupons-core")})})})]})})]}),(0,a.jsx)(Pi,{isOpen:!!A,templateName:(null==A?void 0:A.name)||"",onConfirm:()=>Oi(this,void 0,void 0,(function*(){var e;if(A)try{if(A.id<0){const e=c.filter((e=>e.id!==A.id));u(e);const n=Object.assign({},i);delete n[A.id],s(n),r===A.id&&o(null)}else{yield(e=A.id,Lr(void 0,void 0,void 0,(function*(){if(!(yield fetch(fcSendingSettings.ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"fc_email_template_delete",nonce:fcSendingSettings.nonce,id:e.toString()})})).ok)throw new Error(V("Failed to delete template","wp-coupons-core"));return!0}))),yield m();const n=Object.assign({},i);delete n[A.id],s(n),r===A.id&&o(null)}f({message:V("Template deleted successfully!","wp-coupons-core"),type:"success",visible:!0})}catch(e){f({message:e instanceof Error?e.message:V("An error occurred while deleting the template.","wp-coupons-core"),type:"error",visible:!0})}finally{p(null)}})),onClose:()=>{p(null)}})]})})}),{})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,